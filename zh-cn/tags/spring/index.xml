<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on Endless River</title><link>https://wangy325.github.io/zh-cn/tags/spring/</link><description>Recent content in Spring on Endless River</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 23 Dec 2024 17:00:37 +0800</lastBuildDate><atom:link href="https://wangy325.github.io/zh-cn/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>SpringBoot使用AOP的简单示例</title><link>https://wangy325.github.io/zh-cn/docs/java/spring/SpringBoot-aop-demo/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/java/spring/SpringBoot-aop-demo/</guid><description>&lt;p>有一个cd接口，其实体类用于播放歌曲，同时我们想在播放歌曲的时候记录每个曲目的播放次数。看起来，记录次数这个事和播放曲目是不相干的事情，当然，我们可以在每首歌曲播放完成之后记录，但是更好的办法是使用一个切面，切入到播放方法中，来完成这件事，这样可以减少无关逻辑对代码的侵入。&lt;/p></description></item><item><title>在SpringBoot中使用MessageSource</title><link>https://wangy325.github.io/zh-cn/docs/note/translations/use-springboot-messagesource/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/note/translations/use-springboot-messagesource/</guid><description>&lt;blockquote>
&lt;p>&lt;span id="hook">几个说明&lt;/span>：&lt;/p>
&lt;ol>
&lt;li>&lt;del>properties配置文件中，&lt;code>spring.messages.basename&lt;/code>&lt;strong>必须&lt;/strong>要加classpath前缀。如 &lt;code>spring.messages.basename=classpath:i18n/messages&lt;/code>&lt;/del>；&lt;/li>
&lt;li>&lt;del>必须要手动配置&lt;code>MessageSource&lt;/code>，springboot不会自动配置之&lt;/del>；&lt;/li>
&lt;li>如果使用&lt;code>MessageSource.getMessage()&lt;/code>方法，第一个参数的引用形式为&lt;code>&amp;quot;code&amp;quot;&lt;/code>，而不是&lt;code>&amp;quot;{code}&amp;quot;&lt;/code>或者&lt;code>&amp;quot;${code}&amp;quot;&lt;/code>。如messageSource.getMessage(&amp;quot;test.msg&amp;quot;, null, &lt;del>Locale.getDefault()&lt;/del>)；&lt;/li>
&lt;li>在配置&lt;code>LocalValidatorFactoryBean&lt;/code>之后，才可以在&lt;code>javax.validation.constraints&lt;/code>包下的注解（&lt;code>@Size&lt;/code>，&lt;code>@NotNull&lt;/code>...）下的&lt;em>&lt;strong>message&lt;/strong>&lt;/em>属性中使用&lt;code>&amp;quot;{code}&amp;quot;&lt;/code>的形式声明校验提示信息。如
&lt;code>@NotNull(message = &amp;quot;{leftTime.not.null}&amp;quot;)&lt;/code>；&lt;/li>
&lt;li>springMVC的locale配置和JVM的locale配置不一样，在application.properties中配置的&lt;code>spring.mvc.locale=zh_CN&lt;/code>实际上配置的是&lt;code>WebMvcProperties&lt;/code>，在获取消息时，locale信息应该使用&lt;code>webMvcProperties.getLocale()&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>获取&lt;strong>而不是&lt;/strong>使用&lt;code>Locale.getDefault()&lt;/code>获取。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;hr>
&lt;p>MessageSource is a powerful feature available in Spring applications. This helps application developers handle various complex scenarios with writing much extra code, such as environment-specific configuration, internationalization or configurable values.&lt;/p>
&lt;p>One more scenario could be modifying the default validation messages to more user-friendly/custom messages.&lt;/p>
&lt;p>In this tutorial, we'll see how to configure and manage custom validation MessageSource in the application using Spring Boot.&lt;/p></description></item><item><title>在SpringBoot项目中使用MockMvc进行接口测试</title><link>https://wangy325.github.io/zh-cn/docs/java/spring/%E5%9C%A8SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MockMvc%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/java/spring/%E5%9C%A8SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MockMvc%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>现在流行在项目中使用
 &lt;a href="https://swagger.io">swagger&lt;/a>对接口进行测试，这确实很方便、直观。&lt;/p>
&lt;p>但是MockMvc作为spring-test包中指定的测试框架，在没有使用swagger的项目中，使用其进行测试是很好的选择。&lt;/p></description></item><item><title>Spring声明式事务的使用</title><link>https://wangy325.github.io/zh-cn/docs/java/spring/spring-transaction-propagation/</link><pubDate>Fri, 04 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/java/spring/spring-transaction-propagation/</guid><description>&lt;h2 id="1-从transactional注解开始">
 1 从&lt;code>@Transactional&lt;/code>注解开始
 &lt;a class="anchor" href="#1-%e4%bb%8etransactional%e6%b3%a8%e8%a7%a3%e5%bc%80%e5%a7%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>@Transactional&lt;/code>注解是使用spring-transaction的最便捷方式。也是使用Spring框架开发最先接触的内容。&lt;/p>
&lt;p>当你在一个服务的方法上使用&lt;code>@Transactional&lt;/code>注解时，意味着你希望为此方法开启事务支持。如果你的项目成功配置了&lt;strong>数据源&lt;/strong>和&lt;strong>事务管理器&lt;/strong>，Spring会为此方法使用如下默认设置开启事务：&lt;/p></description></item><item><title>Spring WebClient实现微服务的负载均衡调用</title><link>https://wangy325.github.io/zh-cn/posts/27_webclient_as_loadbalanced_client/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/27_webclient_as_loadbalanced_client/</guid><description>&lt;p>在微服务应用中，负载均衡来保证应用的可用性的常用手段。&lt;code>Spring-Cloud-LoadBalancer&lt;/code>提供了服务之间实现负载均衡调用的能力。&lt;/p>
&lt;p>除了使用
 &lt;a href="https://docs.spring.io/spring-cloud-openfeign/docs/3.1.9/reference/html/#spring-cloud-feign">Open-Feign&lt;/a>外，还可以使用&lt;code>RestTemplate&lt;/code>和&lt;code>WebClint&lt;/code>进行服务调用。&lt;/p>
&lt;p>&lt;code>WebClient&lt;/code>是
 &lt;a href="https://docs.spring.io/spring-framework/reference/web/webflux-webclient.html">Spring WebFlux&lt;/a>项目下的HTTP工具，基于Reactor的非阻塞流式API，是&lt;code>RestTemplate&lt;/code>的有效替代。&lt;/p></description></item><item><title>为Spring-Boot应用程序设置参数的几种方式</title><link>https://wangy325.github.io/zh-cn/posts/24_4_ways_to_setting_spring_boot_applications/</link><pubDate>Sat, 30 Nov 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/24_4_ways_to_setting_spring_boot_applications/</guid><description>&lt;p>除了在&lt;code>application.yml&lt;/code>或&lt;code>application.properties&lt;/code>中配置Spring-Boot应用程序的参数外，还可以通过运行&lt;code>java -jar&lt;/code>命令行的方式来配置参数。&lt;/p>
&lt;p>比如&lt;code>java -jar -Dspring.profiles.active=dev app.jar&lt;/code>就是常使用的命令之一。&lt;/p>
&lt;blockquote>
&lt;p>当然，&lt;code>java -jar&lt;/code>命令不止配置Spring参数，还可以配置JVM参数。本文只以Spring-Boot应用程序为例。&lt;/p>
&lt;/blockquote>
&lt;p>有时候，可能会看见这样的应用启动方式：&lt;code>java -jar --spring.profiles.active=dev app.jar&lt;/code>，它也是可行的。这两个分别是什么呢？&lt;/p></description></item><item><title>在RESTful API设计中应用HATEOAS</title><link>https://wangy325.github.io/zh-cn/posts/23_HATEOAS%E5%9C%A8RESTful-API%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</link><pubDate>Tue, 26 Nov 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/23_HATEOAS%E5%9C%A8RESTful-API%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</guid><description>&lt;p>HATEOAS 是 REST(Representational state transfer) 的约束之一。&lt;/p>
&lt;p>HATEOAS 是 Hypermedia As The Engine Of Application State 的缩写，从字面上理解是 “&lt;strong>超媒体即是应用状态引擎&lt;/strong>” 。其原则就是客户端与服务器的交互完全由超媒体动态提供，客户端无需事先了解如何与数据或者服务器交互。相反的，在一些RPC服务或者Redis，Mysql等软件，需要事先了解接口定义或者特定的交互语法。&lt;/p></description></item></channel></rss>