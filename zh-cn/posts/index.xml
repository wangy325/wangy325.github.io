<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on xf&amp;pl</title><link>https://wangy325.github.io/zh-cn/posts/</link><description>Recent content in Blog on xf&amp;pl</description><generator>Hugo</generator><language>zh-CN</language><atom:link href="https://wangy325.github.io/zh-cn/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring WebClient实现微服务的负载均衡调用</title><link>https://wangy325.github.io/zh-cn/posts/2024/20241219_webclient_as_loadbalanced_client/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20241219_webclient_as_loadbalanced_client/</guid><description>&lt;p>在微服务应用中，负载均衡来保证应用的可用性的常用手段。&lt;code>Spring-Cloud-LoadBalancer&lt;/code>提供了服务之间实现负载均衡调用的能力。&lt;/p>
&lt;p>除了使用
 &lt;a href="https://docs.spring.io/spring-cloud-openfeign/docs/3.1.9/reference/html/#spring-cloud-feign">Open-Feign&lt;/a>外，还可以使用&lt;code>RestTemplate&lt;/code>和&lt;code>WebClint&lt;/code>进行服务调用。&lt;/p>
&lt;p>&lt;code>WebClient&lt;/code>是
 &lt;a href="https://docs.spring.io/spring-framework/reference/web/webflux-webclient.html">Spring WebFlux&lt;/a>项目下的HTTP工具，基于Reactor的非阻塞流式API，是&lt;code>RestTemplate&lt;/code>的有效替代。&lt;/p></description></item><item><title>更换macOS下Firefox的浏览器图标</title><link>https://wangy325.github.io/zh-cn/posts/2024/20241216_change_firefox_icon_on_mac_OS/</link><pubDate>Mon, 16 Dec 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20241216_change_firefox_icon_on_mac_OS/</guid><description>&lt;p>不知道从哪一个版本开始，MacOS下的Firefox的应用程序图标变的，真的，不能说很丑，只能说很违和，我都不好意思让这个图标留在dock栏。经典火狐图标扁平化的还是不错，但是用一个接近黑色的深蓝色底色，就真的很难评价。&lt;/p>
&lt;blockquote>
&lt;p>话说也很久没有使用Firefox了。&lt;/p>&lt;/blockquote>
&lt;p>于是想了想，看看能否换回白底或者经典的火狐图标。&lt;/p></description></item><item><title>为Spring-Boot应用程序设置参数的几种方式</title><link>https://wangy325.github.io/zh-cn/posts/2024/20241130_4_ways_to_setting_spring_boot_applications/</link><pubDate>Sat, 30 Nov 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20241130_4_ways_to_setting_spring_boot_applications/</guid><description>&lt;p>除了在&lt;code>application.yml&lt;/code>或&lt;code>application.properties&lt;/code>中配置Spring-Boot应用程序的参数外，还可以通过运行&lt;code>java -jar&lt;/code>命令行的方式来配置参数。&lt;/p>
&lt;p>比如&lt;code>java -jar -Dspring.profiles.active=dev app.jar&lt;/code>就是常使用的命令之一。&lt;/p>
&lt;blockquote>
&lt;p>当然，&lt;code>java -jar&lt;/code>命令不止配置Spring参数，还可以配置JVM参数。本文只以Spring-Boot应用程序为例。&lt;/p>&lt;/blockquote>
&lt;p>有时候，可能会看见这样的应用启动方式：&lt;code>java -jar --spring.profiles.active=dev app.jar&lt;/code>，它也是可行的。这两个分别是什么呢？&lt;/p></description></item><item><title>在Docker Compose配置环境变量的几种方法</title><link>https://wangy325.github.io/zh-cn/posts/2024/20241130_5_ways_to_docker_compose_envs/</link><pubDate>Sat, 30 Nov 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20241130_5_ways_to_docker_compose_envs/</guid><description>&lt;p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。 它允许您定义组成应用程序的服务、它们连接到的网络以及它们运行所需的环境变量。&lt;/p>
&lt;p>使用 Docker Compose，可以在容器中通过多种方式设置环境变量。可以使用 Compose 文件或 CLI。&lt;/p>
&lt;p>请注意，每种方法都受
 &lt;a href="https://docs.docker.com/compose/environment-variables/envvars-precedence/">环境变量优先级&lt;/a> 的约束。&lt;/p></description></item><item><title>在RESTful API设计中应用HATEOAS</title><link>https://wangy325.github.io/zh-cn/posts/2024/20241126_HATEOAS%E5%9C%A8RESTful-API%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</link><pubDate>Tue, 26 Nov 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20241126_HATEOAS%E5%9C%A8RESTful-API%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</guid><description>&lt;p>HATEOAS 是 REST(Representational state transfer) 的约束之一。&lt;/p>
&lt;p>HATEOAS 是 Hypermedia As The Engine Of Application State 的缩写，从字面上理解是 “&lt;strong>超媒体即是应用状态引擎&lt;/strong>” 。其原则就是客户端与服务器的交互完全由超媒体动态提供，客户端无需事先了解如何与数据或者服务器交互。相反的，在一些RPC服务或者Redis，Mysql等软件，需要事先了解接口定义或者特定的交互语法。&lt;/p></description></item><item><title>在macOS monterey配置使用多版本jdk</title><link>https://wangy325.github.io/zh-cn/posts/2024/20241120_multi_jdk_for_macOS_monterey/</link><pubDate>Wed, 20 Nov 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20241120_multi_jdk_for_macOS_monterey/</guid><description>&lt;p>记录了在macOS 12 Monterry下安装并配置多版本JDK的方法。&lt;/p>
&lt;p>意外的发现&lt;code>brew&lt;/code>对Monterey的支持越发的少了...&lt;/p></description></item><item><title>Win11 WSL安装并使用docker</title><link>https://wangy325.github.io/zh-cn/posts/2024/20241031_wsl_and_docker_engine/</link><pubDate>Thu, 31 Oct 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20241031_wsl_and_docker_engine/</guid><description>&lt;p>在Windows中安装配置WSL Ubuntu并使用docker的过程中，遇到一些问题：&lt;/p>
&lt;ol>
&lt;li>安装WSL会遇到错误代码&lt;/li>
&lt;li>WSL1还是WSL2？&lt;/li>
&lt;li>WSL的网络代理如何设置？&lt;/li>
&lt;li>WSL的&lt;code>systemctl&lt;/code>不见了？&lt;/li>
&lt;li>docker-daemon启动失败？&lt;/li>
&lt;li>docker拉取镜像超时？&lt;/li>
&lt;/ol>
&lt;p>本文记录了这些遇到的问题，并提供了可行的解决办法。&lt;/p></description></item><item><title>让Infuse从TMDB正确获取元数据</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240823_infuse%E5%85%83%E6%95%B0%E6%8D%AE/</link><pubDate>Fri, 23 Aug 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240823_infuse%E5%85%83%E6%95%B0%E6%8D%AE/</guid><description>&lt;blockquote class="book-hint info">
 
 &lt;a class="hint-start">“&lt;/a>
 &lt;p>对于电影和剧集，早就不是“下完即删”了，对于高质量的电影和剧集，尤其是记录片，会收藏在硬盘里面。特别现在会优先考虑下载高清资源。&lt;/p>
&lt;p>这可能会是，捣鼓NAS的一个开始...&lt;/p>

&lt;/blockquote>
&lt;p>找剧的时候，误打误撞下载了一份DV的4K视频文件，用尽各种软件，播放都是偏（绿）色的。尽管IINA可以通过调整色调让视频颜色看起来正常些（能看），但是始终不满意。由于迅雷下得辛苦，就留着。&lt;/p>
&lt;blockquote>
&lt;p>DV = Dolby Vision，即杜比视界，对于不支持杜比视界的设备，播放就会出现偏色。&lt;/p>
&lt;p>
 &lt;a href="https://www.demolandia.net/4k-video-test/dolby-vision.html">https://www.demolandia.net/4k-video-test/dolby-vision.html&lt;/a> 可以下载DV的4K视频demo，检查你电脑电视是否支持DV。&lt;/p>&lt;/blockquote></description></item><item><title>Hugo自定义TOC模板及滚动监听</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240820_hugo%E6%96%87%E6%A1%A3%E8%87%AA%E5%AE%9A%E4%B9%89toc%E5%8F%8A%E6%BB%9A%E5%8A%A8%E7%9B%91%E5%90%AC/</link><pubDate>Tue, 20 Aug 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240820_hugo%E6%96%87%E6%A1%A3%E8%87%AA%E5%AE%9A%E4%B9%89toc%E5%8F%8A%E6%BB%9A%E5%8A%A8%E7%9B%91%E5%90%AC/</guid><description>&lt;blockquote class="book-hint warning">
 
 &lt;a class="hint-start">“&lt;/a>
 &lt;p>还挺麻烦的，主要是Hugo的模板语言语法，那是人看的吗？&lt;/p>

&lt;/blockquote>
&lt;p>一个文章目录，有几个基本要素：&lt;/p>
&lt;ol>
&lt;li>目录锚点，可以点击跳转&lt;/li>
&lt;li>目录层级，控制目录的展示&lt;/li>
&lt;/ol>
&lt;p>Hugo定义了默认的TOC模板，实现了上面的要素，比较简单：&lt;/p>
&lt;pre>&lt;code>{{ .TableOfContents}}
&lt;/code>&lt;/pre>
&lt;p>这个模板仅仅能用而已。对于较长的目录，以及多层级的目录都有点无能为力。&lt;/p>
&lt;p>如果想要让目录更加灵活，可以自定义TOC，并且实现滚动监听。&lt;/p></description></item><item><title>MySQL死锁</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240805_mysql%E6%AD%BB%E9%94%81_undone/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240805_mysql%E6%AD%BB%E9%94%81_undone/</guid><description>&lt;p>MySQL死锁是指多个事务之间，由于每个事务持有另一个事务所需的锁而无法继续执行的情况。因所有事务都在等待相同的资源变得可用，而没有一个事务释放它所持有的锁。&lt;/p>
&lt;p>多个事务以相反的顺序锁定多个表中的行（通过诸如UPDATE或SELECT ... FOR UPDATE之类的语句），就可能发生死锁。&lt;/p>
&lt;p>死锁也可能发生在这些语句锁定索引记录和间隙范围时，每个事务获取一些锁但由于时间问题而没有获取其他锁。&lt;/p></description></item><item><title>将MBP2018升级到macOS12 Monterey</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240729_macOS12%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 29 Jul 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240729_macOS12%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/</guid><description>&lt;p>原本计划MBP2018就在BigSur 11.7 养老算了，实际上已经苟了3年，并且计划一直苟下去的😂...但是有几个征兆，最终还是在7月份，更新了12。以下为主要原因:&lt;/p>
&lt;ul>
&lt;li>自带的应用商店出现了最低支持12的应用——削弱了老11用户的使用体验&lt;/li>
&lt;li>oneDrive自动更新之后不支持老版本，但是旧版本又不好找。（最后只能删除plist阻止其自动更新）&lt;/li>
&lt;li>部分破解软件的旧版本也不好找了&lt;/li>
&lt;li>docker竟然也...😅&lt;/li>
&lt;li>brew也...太慢了(升级之后好多了)&lt;/li>
&lt;/ul></description></item><item><title>更新使用Homebrew安装的软件包</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240717_update-homebrew-packages/</link><pubDate>Wed, 17 Jul 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240717_update-homebrew-packages/</guid><description>&lt;p>使用&lt;code>Homebrew&lt;/code>安装的软件包，安装完成之后，可能几年都不会去管一眼。不过么，等到几年后要升级的时候，还是会有点麻烦。主要是&lt;code>Homebrew&lt;/code>慢（:--汗😓️。&lt;/p></description></item><item><title>使用Pythonanywhere托管Telegram机器人</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240708_%E4%BD%BF%E7%94%A8PythonAnywhere%E6%89%98%E7%AE%A1%E7%94%B5%E6%8A%A5%E6%9C%BA%E5%99%A8%E4%BA%BA/</link><pubDate>Mon, 08 Jul 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240708_%E4%BD%BF%E7%94%A8PythonAnywhere%E6%89%98%E7%AE%A1%E7%94%B5%E6%8A%A5%E6%9C%BA%E5%99%A8%E4%BA%BA/</guid><description>&lt;p>基于&lt;code>Coze&lt;/code>的收费策略，在上面免费使用&lt;code>Gemini&lt;/code>的可能性不大了(每日20次&lt;code>gemini-1.5-flash&lt;/code>请求)。于是尝试单独接入并部署一个电报机器人玩玩看。&lt;/p>
&lt;p>GitHub上有关Telegram机器人的项目不少，并且使用python并接入google Gemini AI的也不在少数。随即
 &lt;a href="https://github.com/H-T-H/Gemini-Telegram-Bot.git">clone&lt;/a>了一个，查看文档之后，便可上手。&lt;/p></description></item><item><title> 获取JetBrains IDE的永久回退授权</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240701_get-perpetual-fallback-license-for-jetbrains-ides/</link><pubDate>Mon, 01 Jul 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240701_get-perpetual-fallback-license-for-jetbrains-ides/</guid><description>&lt;blockquote class="book-hint warning">
 
 &lt;a class="hint-start">“&lt;/a>
 &lt;p>此文并不是为推广或鼓励使用破解软件。&lt;/p>
&lt;p>如果条件允许，请购买正版软件，以支持开发者并体验最新的功能。&lt;/p>

&lt;/blockquote></description></item><item><title>使用Coze的插件和工作流创建自定义AI工具</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240621_use-coze-plugin-and-workflow/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240621_use-coze-plugin-and-workflow/</guid><description>&lt;p>
 &lt;a href="https://www.coze.com/docs/guides/welcome?_lang=zh">Coze&lt;/a>是一个提供AI机器人的HUB，利用它市场上提供的Bot，可以很方便地使用AI机器人工作或娱乐。除了市场上五花八门的AI机器人之外，Bot还提供了自定义工作流，插件等功能，用来创建自己的AI工具。&lt;/p>
&lt;blockquote>
&lt;p>⚠️2024年07月03日起，创建的Coze机器人需要
 &lt;a href="https://www.coze.com/docs/guides/subscription?_lang=zh">购买套餐&lt;/a>才能继续使用了，最便宜需要$9/M，看来字节也被薅羊毛薅到顶不住了😭️。&lt;/p>
&lt;p>目前免费用户有每日免费使用GPT-3.5-turbo模型100次的限制，其他的模型免费次数太少，基本不能碰了。&lt;/p>
&lt;p>这个改动对于免费用户来说，使用复杂工作流基本上属于流产，工作流一次调用可能需要使用多次LLM😅。&lt;/p>&lt;/blockquote></description></item><item><title>主动管理Clash的代理配置</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240615_%E4%B8%BB%E5%8A%A8%E6%89%98%E7%AE%A1Clash%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 15 Jun 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240615_%E4%B8%BB%E5%8A%A8%E6%89%98%E7%AE%A1Clash%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>自己搭建了这么多年的shadowsocks服务，经历了2次续年费后服务器ip被加黑名单之后，算是彻底放弃了（心痛100刀😭），说的就是帮瓦工。vultr的服务器虽然稳定，但是延迟比较高，糟糕的时候甚至连油管的高清视频都卡顿，不过大部分时间都是轻度搜索场景，也就还能使用。那时候也知道“机场”的概念，不过自己搭的服务用着放心么不是，机场随时跑路的，就一直没用。而且vultr的服务器，5刀/月，价格也在可接受的范围内。&lt;/p></description></item><item><title>更换个人博客主题</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240612_%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240612_%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/</guid><description>&lt;p>想换一个更加简洁的博客主题，也是觉得原来的
 &lt;a href="https://github.com/zzossig/hugo-theme-zzo.git">Zzo主题&lt;/a>两侧的留白过于浪费空间，且配色，有些腻了。&lt;/p>
&lt;p>不过，这主题用了很久了，且hugo版本也更新得不像样子了，新主题与旧版本的hugo并不兼容，故一并更新了hugo和主题的版本，这一顿折腾，应该又能撑2年吧。&lt;/p></description></item><item><title>Rime中州韻輸入引擎安裝與輸入方案定製指北</title><link>https://wangy325.github.io/zh-cn/posts/2024/20240606_Rime%E4%B8%AD%E5%B7%9E%E9%9F%BB%E8%BC%B8%E5%85%A5%E5%BC%95%E6%93%8E%E5%AE%89%E8%A3%9D%E8%88%87%E7%B0%A1%E5%96%AE%E8%AA%BF%E6%95%99/</link><pubDate>Thu, 06 Jun 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2024/20240606_Rime%E4%B8%AD%E5%B7%9E%E9%9F%BB%E8%BC%B8%E5%85%A5%E5%BC%95%E6%93%8E%E5%AE%89%E8%A3%9D%E8%88%87%E7%B0%A1%E5%96%AE%E8%AA%BF%E6%95%99/</guid><description>&lt;p>&lt;del>由于未知的原因&lt;/del>&lt;sup>很有可能是配置文件错误&lt;/sup>，使用几年多的Rime（squirrel）输入法发生异常。主要表现为小鹤双拼的键位映射异常（如键入‘budv’的候选词是‘病毒’而不是‘不对’。），检查了许久的配置文件，并没有发现明显异常。距离上次配置Rime已许久，很多细节都已经丢失。一番纠结后，决定再重新调试一下Rime，并作此记录。&lt;/p></description></item><item><title>位运算的小技巧</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 16 Oct 2022 09:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid><description>&lt;p>在
 &lt;a href="https://wangy325.github.io/zh-cn/posts/2022/20221015_%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/">移位运算&lt;/a>和
 &lt;a href="https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/">异或运算&lt;/a>中讨论了这两种位运算。计算机中还有一些其他的位运算，它们比较简单，但也还有一些巧妙的作用，本文将逐一介绍它们。&lt;/p></description></item><item><title>移位运算</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221015_%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/</link><pubDate>Sat, 15 Oct 2022 09:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221015_%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/</guid><description>&lt;p>位运算是直接操作内存中的二进制数据。因此运算效率比常规的四则运算高出不少。&lt;/p></description></item><item><title>异或运算</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/</link><pubDate>Fri, 14 Oct 2022 12:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/</guid><description>&lt;p>异或运算(&lt;em>exclusive or&lt;/em>)又记作&lt;em>XOR&lt;/em>，一般用插入符号(&lt;em>caret&lt;/em>)&lt;code>^&lt;/code>表示，其可以看到是更加单纯的或运算(|)。我们知道，或运算的规则是：&lt;/p>
&lt;ul>
&lt;li>a=1，b=1，a|b=1 ①&lt;/li>
&lt;li>a，b任意一个为1，a|b=1 ②&lt;/li>
&lt;/ul>
&lt;p>异或运算则是去除了或运算中的规则①，即只有a、b相异时，结果才为真，其他情形都为假。因此异或运算的真值表为：&lt;/p>
&lt;pre tabindex="0">&lt;code>0^0 = 0
0^1 = 1
1^0 = 1
1^1 = 0
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>与0异或，其值不变；与1异或，相当于取反。&lt;/p>&lt;/blockquote>
&lt;p>异或运算有一些特殊的性质，利用这些性质，可以解决特定的问题。这也是本文所要讨论的重点。&lt;/p></description></item><item><title>同余定理与二进制补码</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/</link><pubDate>Fri, 14 Oct 2022 10:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/</guid><description>&lt;p>我们知道，计算机使用2的补码（&lt;em>Two's complements&lt;/em>）来表示负数。这样有一个好处：可以使用同一种运算规则来处理正负数的运算，否则，二进制的正数和负数相加，将会得到错误的结果。为了处理这个讹误，必须为负数设计一套“加法器”。关于这一部分的讨论，参照
 &lt;a href="https://ruanyifeng.com/blog/2009/08/twos_complement.html">关于2的补码&lt;/a>。&lt;/p>
&lt;p>而补码使正负数使用同一套“加法器/乘法器”规则，实际上利用了同余运算的性质。&lt;/p></description></item><item><title>使用docker镜像快速搭建redis集群开发环境</title><link>https://wangy325.github.io/zh-cn/posts/2022/20220825_deploy-redis-cluster-with-docker/</link><pubDate>Thu, 25 Aug 2022 16:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20220825_deploy-redis-cluster-with-docker/</guid><description>&lt;h2 id="准备镜像">
 准备镜像
 &lt;a class="anchor" href="#%e5%87%86%e5%a4%87%e9%95%9c%e5%83%8f">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>docker&lt;/code>以及&lt;code>docker-compose&lt;/code>的安装以及加速镜像的配置不在此处说明。windows系统上直接安装客户端即可完成docker及docker-compose的安装。在centOS 8中安装docker服务以及docker-compose可以参考下面的文章：&lt;/p>
&lt;ul>
&lt;li>
 &lt;a href="https://zhuanlan.zhihu.com/p/286845061">在centOS 8中安装docker&lt;/a>&lt;/li>
&lt;li>
 &lt;a href="https://www.cnblogs.com/51ma/p/15641138.html">在contOS 8中安装docker-compose&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>运行如下命令检查docker和docker-compose的安装情况：&lt;/p></description></item><item><title>Spring声明式事务的使用</title><link>https://wangy325.github.io/zh-cn/posts/2021/20210604_spring-transaction-propagation/</link><pubDate>Fri, 04 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2021/20210604_spring-transaction-propagation/</guid><description>&lt;h2 id="1-从transactional注解开始">
 1 从&lt;code>@Transactional&lt;/code>注解开始
 &lt;a class="anchor" href="#1-%e4%bb%8etransactional%e6%b3%a8%e8%a7%a3%e5%bc%80%e5%a7%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>@Transactional&lt;/code>注解是使用spring-transaction的最便捷方式。也是使用Spring框架开发最先接触的内容。&lt;/p>
&lt;p>当你在一个服务的方法上使用&lt;code>@Transactional&lt;/code>注解时，意味着你希望为此方法开启事务支持。如果你的项目成功配置了&lt;strong>数据源&lt;/strong>和&lt;strong>事务管理器&lt;/strong>，Spring会为此方法使用如下默认设置开启事务：&lt;/p></description></item><item><title>MySQL显式锁简单介绍</title><link>https://wangy325.github.io/zh-cn/posts/2021/20210324_%E4%BD%BF%E7%94%A8mysql%E7%9A%84%E8%A1%8C%E9%94%81/</link><pubDate>Wed, 24 Mar 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2021/20210324_%E4%BD%BF%E7%94%A8mysql%E7%9A%84%E8%A1%8C%E9%94%81/</guid><description>&lt;p>对于MySQL数据库而言，
 &lt;a href="https://wangy325.github.io/zh-cn/posts/2020/20201127_MySQL%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/">事务的隔离级别&lt;/a>在不同程度上保证了数据一致性。&lt;/p>
&lt;p>我们知道，&lt;strong>事务&lt;/strong>的四大特性：原子性、一致性、隔离性、持久性，其中&lt;strong>隔离性&lt;/strong>就是通过&lt;strong>锁机制&lt;/strong>来保证的。&lt;/p>
&lt;blockquote>
&lt;p>另外3个性质，通过MySQL的&lt;code>redo log&lt;/code> 和&lt;code>undo log&lt;/code>来保证。&lt;/p>&lt;/blockquote>
&lt;p>MySQL对每条SQL语句的执行，都添加了一个隐式事务，言外之意，就是添加了隐式锁。&lt;/p>
&lt;p>除了隐式锁之外，MySQL还可以使用显式锁。&lt;/p>
&lt;p>这是从锁的可见性（或者使用方式）上来区分锁。本文不讨论MySQL的粒度锁（表锁，行锁，页锁）。&lt;/p>
&lt;!-- ~~我们知道，事务能读取到事务开始前就存在的数据，如果事务A需要对某条数据data1进行修改，在事务A还没有提交之前，事务B虽然不能读取到事务A对data1的修改（read committed隔离级别以上），但是能够读取data1原始的数据快照，并且能够再读取到的数据基础上对其进行修改（在事务A提交之后）。~~ --></description></item><item><title>一次服务器OOM故障</title><link>https://wangy325.github.io/zh-cn/posts/2021/20210220_%E6%9C%8D%E5%8A%A1%E5%99%A8OOM%E6%95%85%E9%9A%9C/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2021/20210220_%E6%9C%8D%E5%8A%A1%E5%99%A8OOM%E6%95%85%E9%9A%9C/</guid><description>&lt;p>使用&lt;code>idm&lt;/code>下载y2b视频导致服务器内存溢出，内核强制关闭了服务进程。&lt;/p>
&lt;p>通过系统日志定位原因，并介绍了服务器维护的几个相关命令。&lt;/p></description></item><item><title>在SpringBoot中使用MessageSource</title><link>https://wangy325.github.io/zh-cn/posts/2021/20210220_use-springboot-messagesource/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2021/20210220_use-springboot-messagesource/</guid><description>&lt;blockquote>
&lt;p>&lt;span id="hook">几个说明&lt;/span>：&lt;/p>
&lt;ol>
&lt;li>&lt;del>properties配置文件中，&lt;code>spring.messages.basename&lt;/code>&lt;strong>必须&lt;/strong>要加classpath前缀。如 &lt;code>spring.messages.basename=classpath:i18n/messages&lt;/code>&lt;/del>；&lt;/li>
&lt;li>&lt;del>必须要手动配置&lt;code>MessageSource&lt;/code>，springboot不会自动配置之&lt;/del>；&lt;/li>
&lt;li>如果使用&lt;code>MessageSource.getMessage()&lt;/code>方法，第一个参数的引用形式为&lt;code>&amp;quot;code&amp;quot;&lt;/code>，而不是&lt;code>&amp;quot;{code}&amp;quot;&lt;/code>或者&lt;code>&amp;quot;${code}&amp;quot;&lt;/code>。如messageSource.getMessage(&amp;quot;test.msg&amp;quot;, null, &lt;del>Locale.getDefault()&lt;/del>)；&lt;/li>
&lt;li>在配置&lt;code>LocalValidatorFactoryBean&lt;/code>之后，才可以在&lt;code>javax.validation.constraints&lt;/code>包下的注解（&lt;code>@Size&lt;/code>，&lt;code>@NotNull&lt;/code>...）下的&lt;em>&lt;strong>message&lt;/strong>&lt;/em>属性中使用&lt;code>&amp;quot;{code}&amp;quot;&lt;/code>的形式声明校验提示信息。如
&lt;code>@NotNull(message = &amp;quot;{leftTime.not.null}&amp;quot;)&lt;/code>；&lt;/li>
&lt;li>springMVC的locale配置和JVM的locale配置不一样，在application.properties中配置的&lt;code>spring.mvc.locale=zh_CN&lt;/code>实际上配置的是&lt;code>WebMvcProperties&lt;/code>，在获取消息时，locale信息应该使用&lt;code>webMvcProperties.getLocale()&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>获取&lt;strong>而不是&lt;/strong>使用&lt;code>Locale.getDefault()&lt;/code>获取。&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;hr>
&lt;p>MessageSource is a powerful feature available in Spring applications. This helps application developers handle various complex scenarios with writing much extra code, such as environment-specific configuration, internationalization or configurable values.&lt;/p>
&lt;p>One more scenario could be modifying the default validation messages to more user-friendly/custom messages.&lt;/p>
&lt;p>In this tutorial, we'll see how to configure and manage custom validation MessageSource in the application using Spring Boot.&lt;/p></description></item><item><title>使用Logback记录日志</title><link>https://wangy325.github.io/zh-cn/posts/2021/20210210_guide-to-logback-cn/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2021/20210210_guide-to-logback-cn/</guid><description>&lt;p>
 &lt;a href="https://logback.qos.ch/">Logback&lt;/a>是Java应用中使用最广的日志框架之一，它是
 &lt;a href="https://logback.qos.ch/reasonsToSwitch.html">其前辈框架Log4j的替代者&lt;/a>。相比Log4j，Logback在日志处理速度、配置多样性、对旧日志文件的处理灵活性上均要优于Log4j。&lt;/p>
&lt;p>这篇文章将介绍Logback的主要组成结构并指导你使用Logback构建更好的程序。&lt;/p></description></item><item><title>在SpringBoot项目中使用MockMvc进行接口测试</title><link>https://wangy325.github.io/zh-cn/posts/2021/20210207_%E5%9C%A8SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MockMvc%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2021/20210207_%E5%9C%A8SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MockMvc%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>现在流行在项目中使用
 &lt;a href="https://swagger.io">swagger&lt;/a>对接口进行测试，这确实很方便、直观。&lt;/p>
&lt;p>但是MockMvc作为spring-test包中指定的测试框架，在没有使用swagger的项目中，使用其进行测试是很好的选择。&lt;/p></description></item><item><title>Java8日期和时间API</title><link>https://wangy325.github.io/zh-cn/posts/2021/20210202_java-new-time-api/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2021/20210202_java-new-time-api/</guid><description>&lt;blockquote>
&lt;p>mybatis自 3.4.5 开始，已经支持使用&lt;code>LocaldateTime&lt;/code>作为时间查询入参，映射类型为&lt;code>TimeStamp&lt;/code>，参考地址: 
 &lt;a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers&lt;/a>&lt;/p>&lt;/blockquote>
&lt;h1 id="1-前言">
 1 前言
 &lt;a class="anchor" href="#1-%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h1>
&lt;p>在介绍Java SE 8中新的日期时间库前，先了解下Java 8之前的日期时间工具的诟病。&lt;/p>
&lt;p>在Java SE 8前，日期时间工具库在&lt;code>java.util&lt;/code>包中，包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>java.util.Date&lt;/code>：表示日期和时间&lt;/li>
&lt;li>&lt;code>java.util.Calendar&lt;/code>以及其实现子类：表示各种日历系统，常用的是格林威治日历&lt;code>java.util.GregorianCalendar&lt;/code>&lt;/li>
&lt;li>&lt;code>java.util.TimeZone&lt;/code>以及其实现子类：表示时区偏移量和夏令时&lt;/li>
&lt;/ul>
&lt;p>以及辅助其进行格式化和解析的工具库在java.text包中，包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>java.text.DateFormat&lt;/code>：格式化日期时间和解析日期时间的工具抽象类&lt;/li>
&lt;li>&lt;code>java.text.SimpleDateFormat&lt;/code>：DateDateFormat的实现&lt;/li>
&lt;/ul></description></item><item><title>在xxl-job中使用分片任务</title><link>https://wangy325.github.io/zh-cn/posts/2021/20210125_xxl-sharding-job/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2021/20210125_xxl-sharding-job/</guid><description>&lt;p>本文介绍在如何在
 &lt;a href="https://www.xuxueli.com/xxl-job/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0XXL-JOB%E3%80%8B">xxl-job&lt;/a>中使用创建并使用分片任务。&lt;/p>
&lt;p>&lt;code>xxl-job&lt;/code>是国内开源的一款轻量级分布式任务调度平台，开发者是大众点评的工程师，其目前维护一个
 &lt;a href="https://www.xuxueli.com/">开源社区&lt;/a>，里面还有很多已经发布或尚在孵化的开源项目。&lt;/p></description></item><item><title>使用printf格式化输出</title><link>https://wangy325.github.io/zh-cn/posts/2020/20201210_how2use-printf/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2020/20201210_how2use-printf/</guid><description>&lt;p>这篇文章介绍了几种常见的使用&lt;code>printf()&lt;/code>方法进行格式化输出的方法。&lt;/p>
&lt;p>&lt;code>printf()&lt;/code>方法隶属于&lt;code>java.io.PrintStream&lt;/code>类，提供了和C语言中相似的格式化字符串输出的方法。&lt;/p></description></item><item><title>背包问题2例</title><link>https://wangy325.github.io/zh-cn/posts/2020/20201204_01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%982%E4%BE%8B/</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2020/20201204_01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%982%E4%BE%8B/</guid><description>&lt;p>背包问题其实属于&lt;strong>动态规划&lt;/strong>（ &lt;em>Dynamic Programming&lt;/em> ）问题的一种。动态规划的手段是将大问题拆解为多个小问题，小问题解决之后，大问题也就随之而解。&lt;/p></description></item><item><title>事务隔离级别与MVCC</title><link>https://wangy325.github.io/zh-cn/posts/2020/20201127_MySQL%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link><pubDate>Fri, 27 Nov 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2020/20201127_MySQL%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid><description>&lt;!--
~~MySQL事务属于老生常谈的内容了，并不指望这一篇文章将其搞透，本篇文章只是将MySQL事务的外衣扒了，让其看起来不再那么神秘与华丽。有时候，新手总是对“事务”这两个字怀有莫名的恐惧感，因为其藏在MySQL内部，偷偷地工作着，就好像你没有凝视深渊，而深渊却在凝视你。~~
-->
&lt;p>开发过程中，或多或少会碰到需要使用数据库事务的业务场景，而Spring框架提供的能力使得开发者无需过多地关注事务本身，这带来诸多便利，但也带来弊端：开发者只知其貌，而不知其理，一旦Spring框架抛出异常，便往往手足无措。本文简单地介绍了MySQL事务相关的基本概念，使用例证阐述了不同事务隔离级别下MySQL的数据可见性，简单讨论了MySQL如何保证数据一致性。有了这些基本的概念，遇到事务与数据库锁相关的问题时，开发者能够多一点思考。&lt;/p></description></item><item><title>redis必知必会(转)</title><link>https://wangy325.github.io/zh-cn/posts/2020/20201124_redis-all/</link><pubDate>Tue, 24 Nov 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2020/20201124_redis-all/</guid><description>&lt;p>简单来说 &lt;strong>Redis 就是一个使用 C 语言开发的数据库&lt;/strong>，不过与传统数据库不同的是 &lt;strong>Redis 的数据是存在内存中的&lt;/strong> ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。&lt;/p></description></item><item><title>布隆过滤器(转)</title><link>https://wangy325.github.io/zh-cn/posts/2020/20201123_bloom-filter/</link><pubDate>Mon, 23 Nov 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2020/20201123_bloom-filter/</guid><description>&lt;p>海量数据处理以及缓存穿透这两个场景让我认识了 布隆过滤器 ，我查阅了一些资料来了解它，但是很多现成资料并不满足我的需求，所以就决定自己总结一篇关于布隆过滤器的文章。希望通过这篇文章让更多人了解布隆过滤器，并且会实际去使用它！&lt;/p>
&lt;p>下面我们将分为几个方面来介绍布隆过滤器：&lt;/p>
&lt;ol>
&lt;li>什么是布隆过滤器？&lt;/li>
&lt;li>布隆过滤器的原理介绍。&lt;/li>
&lt;li>布隆过滤器使用场景。&lt;/li>
&lt;li>通过 Java 编程手动实现布隆过滤器。&lt;/li>
&lt;li>利用Google开源的Guava中自带的布隆过滤器。&lt;/li>
&lt;li>Redis 中的布隆过滤器。&lt;/li>
&lt;/ol></description></item><item><title>SpringBoot使用AOP的简单示例</title><link>https://wangy325.github.io/zh-cn/posts/2020/20200314_SpringBoot-aop-demo/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2020/20200314_SpringBoot-aop-demo/</guid><description>&lt;p>有一个cd接口，其实体类用于播放歌曲，同时我们想在播放歌曲的时候记录每个曲目的播放次数。看起来，记录次数这个事和播放曲目是不相干的事情，当然，我们可以在每首歌曲播放完成之后记录，但是更好的办法是使用一个切面，切入到播放方法中，来完成这件事，这样可以减少无关逻辑对代码的侵入。&lt;/p></description></item><item><title>单机版fdfs服务遇到的问题</title><link>https://wangy325.github.io/zh-cn/posts/2019/20190831_%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BA%E7%89%88fdfs%E6%9C%8D%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 31 Aug 2019 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2019/20190831_%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BA%E7%89%88fdfs%E6%9C%8D%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;blockquote class="book-hint danger">
 
 &lt;a class="hint-start">“&lt;/a>
 &lt;p>此文章记录的内容已经过时，现在有更好的文件存储方案，如
 &lt;a href="https://min.io/docs/minio/linux/index.html">minIO&lt;/a>。&lt;/p>

&lt;/blockquote>
&lt;hr>
&lt;p>简单记录了2个在安装单机版fdfs服务遇到的问题，虽然报错信息不同，但是问题出在同一个地方：&lt;/p></description></item><item><title>关于forever启动node服务的问题</title><link>https://wangy325.github.io/zh-cn/posts/2019/20190828_%E5%85%B3%E4%BA%8Eforever%E5%90%AF%E5%8A%A8node%E6%9C%8D%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2019/20190828_%E5%85%B3%E4%BA%8Eforever%E5%90%AF%E5%8A%A8node%E6%9C%8D%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;p>在使用jenkins自动构建node.js项目的时候，由于对forever的不熟悉，构建脚本一直存在一点小问题。&lt;/p></description></item><item><title>比较器的「退化」</title><link>https://wangy325.github.io/zh-cn/posts/2019/20190827_%E6%AF%94%E8%BE%83%E5%99%A8%E7%9A%84%E9%80%80%E5%8C%96/</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2019/20190827_%E6%AF%94%E8%BE%83%E5%99%A8%E7%9A%84%E9%80%80%E5%8C%96/</guid><description>&lt;hr>
&lt;p>Java「语法糖」越来越牛逼了哈。&lt;/p>
&lt;p>在使用匿名内部类比较器的时候，idea提供了几个层次的比较器代码优化，给👴整懵逼了。&lt;/p></description></item><item><title>CentOS安装并配置MySQL</title><link>https://wangy325.github.io/zh-cn/posts/2019/20190816_%E5%9C%A8centOS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2019/20190816_%E5%9C%A8centOS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>&lt;p>文章介绍了在centOS7上安装mysql数据库服务的配置及简单优化过程。在服务器上安装mysql服务网络上能够找到的资源很多了，因此本文没有作详细介绍，本文的重点在于后续的优化配置方面。&lt;/p></description></item><item><title>Redis Sentinel高可用实现</title><link>https://wangy325.github.io/zh-cn/posts/2019/20190814_build-redis-sentinel/</link><pubDate>Wed, 14 Aug 2019 16:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2019/20190814_build-redis-sentinel/</guid><description>&lt;p>Redis 
 &lt;a href="https://raw.githubusercontent.com/antirez/redis/2.8/00-RELEASENOTES">v2.8&lt;/a> 之后提供了高可用实现&lt;code>Redis Sentinel&lt;/code>，实现了&lt;strong>主从复制&lt;/strong>以及&lt;del>被动&lt;/del>&lt;strong>主备切换&lt;/strong>。
 &lt;a href="https://raw.githubusercontent.com/antirez/redis/3.0/00-RELEASENOTES">v3.0&lt;/a> 之后提供了分布式实现&lt;code>Redis Cluster&lt;/code>。&lt;/p>
&lt;p>本文讨论的是使用Sentinel搭建Redis高可用服务。&lt;/p>
&lt;blockquote>
&lt;p>If all redis and sentinel instances were deployed in same host, you just build a fake redis-sentinel &lt;em>High-Availability&lt;/em> environment&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>&lt;/blockquote></description></item><item><title>Java Script中的构造函数</title><link>https://wangy325.github.io/zh-cn/posts/2019/20190725_Java-Script%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 25 Jul 2019 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2019/20190725_Java-Script%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</guid><description>&lt;p>函数作为JavaScript中的一个特殊数据类型（特殊对象的一种，另一种是数组），有一些特性值得思考与讨论。&lt;/p></description></item><item><title>cron表达式速查</title><link>https://wangy325.github.io/zh-cn/posts/2018/20181213_%E5%B8%B8%E8%A7%81cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%A4%BA%E4%BE%8B/</link><pubDate>Thu, 13 Dec 2018 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2018/20181213_%E5%B8%B8%E8%A7%81cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%A4%BA%E4%BE%8B/</guid><description>&lt;p>cron表达式常用于配置定时任务。cron表达式实际上是由七个子表达式组成。这些表达式之间用空格分隔：&lt;/p>
&lt;ol>
&lt;li>Seconds （秒）&lt;/li>
&lt;li>Minutes（分）&lt;/li>
&lt;li>Hours（小时）&lt;/li>
&lt;li>Day-of-Month （天）&lt;/li>
&lt;li>Month（月）&lt;/li>
&lt;li>Day-of-Week （周）&lt;/li>
&lt;li>Year（年）&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>例：表达式&lt;code>0 0 12 ? \* WED&lt;/code> 意思是：每个星期三的中午12点执行。&lt;/p>&lt;/blockquote></description></item><item><title>一个简单的sql优化示例</title><link>https://wangy325.github.io/zh-cn/posts/2018/20181114_%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84SQL%E4%BC%98%E5%8C%96%E7%9A%84%E4%BE%8B%E5%AD%90/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2018/20181114_%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84SQL%E4%BC%98%E5%8C%96%E7%9A%84%E4%BE%8B%E5%AD%90/</guid><description>&lt;p>例如，我在执行以下sql语句的时候&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">projectId&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lywl_equip_package&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">salesId&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="w">			&lt;/span>&lt;span class="n">cmp_datapackage_user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">LEFT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cmp_datapackage&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">datapackage_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="w">			&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sales_cycle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_valid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_share&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sales_price&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">9999&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sales_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">REGEXP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;移动.*/(季度|半年|年)&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_share&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">&lt;span class="w">		&lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">datapackage_cycle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">&lt;span class="w">	&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java接口回调</title><link>https://wangy325.github.io/zh-cn/posts/2018/20181016_Java%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2018/20181016_Java%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</guid><description>&lt;p>回调模式在web开发中用的较多，本文简单介绍了Java的回调机制，理解此文可以在生产中写出适应业务的回调模型。&lt;/p></description></item><item><title>MyBatis的trim标签</title><link>https://wangy325.github.io/zh-cn/posts/2018/20180921_mybatis%E4%B8%ADtrim%E6%A0%87%E7%AD%BE%E5%8A%A8%E6%80%81%E6%8B%BC%E6%8E%A5SQL/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2018/20180921_mybatis%E4%B8%ADtrim%E6%A0%87%E7%AD%BE%E5%8A%A8%E6%80%81%E6%8B%BC%E6%8E%A5SQL/</guid><description>&lt;p>&lt;code>trim&lt;/code>标记是一个格式化的标记，可以完成&lt;code>set&lt;/code>或者是&lt;code>where&lt;/code>标记的功能。&lt;/p></description></item><item><title>MySQL字符串处理函数</title><link>https://wangy325.github.io/zh-cn/posts/2018/20180921_MySQL%E7%9A%84%E5%87%A0%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2018/20180921_MySQL%E7%9A%84%E5%87%A0%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid><description>&lt;p>本文介绍了mysql的几个方便的字符串处理函数，通常用于简单的查询结果处理。适用在mapper.xml的语句标签中对数据库字段数据进行简单的处理。&lt;/p></description></item><item><title>Git合并与分支管理</title><link>https://wangy325.github.io/zh-cn/posts/2018/20180920_Git%E5%85%A5%E9%97%A82/</link><pubDate>Thu, 20 Sep 2018 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2018/20180920_Git%E5%85%A5%E9%97%A82/</guid><description>&lt;blockquote>
&lt;p>此文的操作背景在本次工作空间的master分支下, 并且追踪远程master分支
部分内容参考自
 &lt;a href="https://www.yiibai.com/git/git_pull.html">yibai.com&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>
 &lt;a href="https://wangy325.github.io/zh-cn/posts/2018/20180919_Git%E5%85%A5%E9%97%A81/">常用操作速查&lt;/a>说到, git版本控制的基本原型与操作逻辑. 如果出现两台机器(比如公司和家)上同时更改'本地仓库'内容并且&lt;code>push&lt;/code>到远程库中,那么必然会导致另一个版本库中的文件低于远程库,如果是有效的改动, 必然涉及到本地库和远程库同步的问题, 这涉及到3个关键词: &lt;code>fetch&lt;/code>, &lt;code>merge&lt;/code>, &lt;code>pull&lt;/code>&lt;/p></description></item><item><title>Git常用命令速查</title><link>https://wangy325.github.io/zh-cn/posts/2018/20180919_Git%E5%85%A5%E9%97%A81/</link><pubDate>Wed, 19 Sep 2018 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2018/20180919_Git%E5%85%A5%E9%97%A81/</guid><description>&lt;p>本文简单介绍了Git本地仓库的构建，与远程仓库的关联。&lt;/p>
&lt;h2 id="安装git">
 安装Git
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85git">#&lt;/a>
&lt;/h2>
&lt;p>ubuntu下安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="go">sudo apt install git
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>windows 下安装，需
 &lt;a href="https://git-scm.com/downloads">下载&lt;/a>安装包&lt;/p></description></item></channel></rss>