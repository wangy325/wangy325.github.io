<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on xf&amp;pl</title><link>https://wangy325.github.io/zh-cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on xf&amp;pl</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Tue, 01 Apr 2025 00:04:34 +0800</lastBuildDate><atom:link href="https://wangy325.github.io/zh-cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>命令模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/behaviour/20240329_command/</link><pubDate>Fri, 29 Mar 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/behaviour/20240329_command/</guid><description>&lt;p>命令模式将&amp;quot;请求&amp;quot;封装成（命令）对象，&lt;em>以便使用不同的请求、队列或者日志来参数化其他对象&lt;/em>。
命令模式也支持&lt;strong>撤销&lt;/strong>的操作。&lt;/p>
&lt;blockquote>
&lt;p>命令模式是一种行为设计模式，它可将请求转换为一个包含与请求相关的所有信息的独立对象。该转换让你能根据不同的请求将方法参数化、延迟请求执行或将其放入队列中，且能实现可撤销操作。&lt;/p>&lt;/blockquote>
&lt;h3 id="设计原则">
 设计原则
 &lt;a class="anchor" href="#%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>解耦：命令模式使&lt;em>发起者和接收者解耦&lt;/em>。发起者不关心具体的接收者，只需要根据已知的命令对象
执行&lt;code>execute()&lt;/code>方法即可。&lt;/li>
&lt;/ol>
&lt;h3 id="uml简图">
 UML简图
 &lt;a class="anchor" href="#uml%e7%ae%80%e5%9b%be">#&lt;/a>
&lt;/h3>


&lt;script src="https://wangy325.github.io/mermaid.min.js">&lt;/script>

 &lt;script>mermaid.initialize({
 "flowchart": {
 "useMaxWidth":true
 },
 "theme": "light"
 }
 )&lt;/script>




&lt;pre class="mermaid">
classDiagram
direction LR
class Invoker {
 +Command command
 +invoke()
}
Invoker *..> Command
class Command {
 &lt;&lt; interface >>
 +execute()
 +undo()
}
ConcreteCommand ..|> Command
class ConcreteCommand {
 Receiver receiver
 +execute()
 +undo()
}
Receiver &lt;--* ConcreteCommand
class Receiver {
 +someOperation()
}
&lt;/pre>

&lt;h3 id="要点">
 要点
 &lt;a class="anchor" href="#%e8%a6%81%e7%82%b9">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>命令模式将发出请求的对象（调用者）和接收请求的对象（接收者）解耦。&lt;/li>
&lt;li>被解耦的对象之间通过命令对象沟通，命令对象封装了接收者和一个或者一组动作。&lt;/li>
&lt;li>调用者通过执行命令对象的&lt;code>execute()&lt;/code>方法发出请求，这会使得接收者的动作被调用。&lt;/li>
&lt;li>调用者接收命令作为参数。甚至可以在运行时动态地进行。&lt;/li>
&lt;li>命令支持撤销。&lt;/li>
&lt;li>宏命令是命令的简单延伸，允许一次调用多个命令。宏命令也支持撤销。&lt;/li>
&lt;li>命令也可以用来实现日志和事务系统。&lt;sup>How to?&lt;/sup>&lt;/li>
&lt;/ol>
&lt;h3 id="示例代码">
 示例代码
 &lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81">#&lt;/a>
&lt;/h3>
&lt;p>在本次示例中，假如你有一个家庭影院，你想通过一个“开关”来一键开启家庭影院，按下这个开关后，系统会执行打开空调，调暗灯光，打开CD播放影片等等一系列操作，我们使用命令模式来完成对应的操作。&lt;/p></description></item><item><title>单例模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/creation/20240328_singleton/</link><pubDate>Thu, 28 Mar 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/creation/20240328_singleton/</guid><description>&lt;ul>
&lt;li>
&lt;p>by Head First 设计模式&lt;/p>
&lt;blockquote>
&lt;p>单例模式确保一个类只有一个实例，并且提供一个全局访问点。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>by Dive into Design Patterns&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Singleton&lt;/strong> is a &lt;em>creation(al)&lt;/em> design pattern that lets you ensure
that a class has only one instance, while providing a global
access point to this instance.&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>工厂方法模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/creation/20240326_factory/</link><pubDate>Tue, 26 Mar 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/creation/20240326_factory/</guid><description>&lt;ul>
&lt;li>
&lt;p>by Head First 设计模式&lt;/p>
&lt;blockquote>
&lt;p>工厂方法模式定义了一个创建对象的接口，但是由子类决定要创建的对象是哪一个。工厂方法把类的实例化推迟到
子类。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>by Dive into Design Patterns&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Factory Method&lt;/strong> is a &lt;em>creation(al)&lt;/em> design pattern that provides an interface for creating
objects in a superclass, but allows subclasses to alter the type of objects that will be
created.&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>工厂模式指定工厂仅仅能创建特定类型的产品。&lt;/p>&lt;/blockquote></description></item><item><title>装饰者模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/structure/20240321_decorator/</link><pubDate>Thu, 21 Mar 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/structure/20240321_decorator/</guid><description>&lt;ul>
&lt;li>
&lt;p>by Head First 设计模式:&lt;/p>
&lt;blockquote>
&lt;p>动态地将责任附加到对象上。若要拓展功能，装饰者模式提供了比继承更有弹性的替代方案。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>by Dive into Design Patterns:&lt;/p>
&lt;blockquote>
&lt;p>Also known as &lt;em>Wrapper&lt;/em>&lt;/p>
&lt;p>Decorator is a structural design pattern that lets you attach new behaviors
to objects by placing these objects inside special wrapper objects that
contain the behaviors.&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>观察者模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/behaviour/20240308_observer/</link><pubDate>Fri, 08 Mar 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/behaviour/20240308_observer/</guid><description>&lt;ul>
&lt;li>by Head First 设计模式
&lt;blockquote>
&lt;p>在对象之间建立一对多的依赖，这样一来，当一个对象的状态改变，依赖它的对象都会收到通知，并且自动更新。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>by Dive into Design Patterns:
&lt;blockquote>
&lt;p>&lt;em>Also Known as: Event-Subscriber, Listener&lt;/em>&lt;/p>
&lt;p>Observer is a behavioral design pattern that lets you define a &lt;em>subscription mechanism&lt;/em>
to notify multiple objects about any events that happen to the object they’re observing.&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>策略模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/behaviour/20240307_strategy/</link><pubDate>Thu, 07 Mar 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/behaviour/20240307_strategy/</guid><description>&lt;ul>
&lt;li>
&lt;p>by Head First 设计模式:&lt;/p>
&lt;blockquote>
&lt;p>策略模式定义了算法族，分别封装起来，让他们之间可以互相替换。此模式让算法的&lt;strong>变化&lt;/strong>独立于使用算法的&amp;quot;客户&amp;quot;。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>by Dive into Design Patterns:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Strategy&lt;/strong> is a behavioral design pattern that lets you define a family of algorithms,
put each of them into a separate class, and make their objects interchangeable.&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>适配器模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/structure/20240401_adaptor/</link><pubDate>Mon, 01 Apr 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/structure/20240401_adaptor/</guid><description>&lt;p>适配器模式将一个类的接口，转换成客户期望的另一个接口。
适配器模式可以让原本接口不兼容的类可以合作无间。&lt;/p>
&lt;h3 id="设计原则">
 设计原则
 &lt;a class="anchor" href="#%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>针对接口编程，而不是针对实现编程&lt;/li>
&lt;li>多用组合，少用继承&lt;/li>
&lt;li>为交互对象之间的松耦合而努力&lt;/li>
&lt;li>类应该对拓展开放，而对修改关闭 （开放-关闭原则）&lt;/li>
&lt;li>依赖抽象，而不依赖具体类 （依赖倒置原则）&lt;/li>
&lt;/ul>
&lt;h3 id="uml简图">
 UML简图
 &lt;a class="anchor" href="#uml%e7%ae%80%e5%9b%be">#&lt;/a>
&lt;/h3>


&lt;script src="https://wangy325.github.io/mermaid.min.js">&lt;/script>

 &lt;script>mermaid.initialize({
 "flowchart": {
 "useMaxWidth":true
 },
 "theme": "light"
 }
 )&lt;/script>




&lt;pre class="mermaid">
classDiagram
direction LR
class Client{
 +Adaptor adaptor
 +otherOperations()
}
class Target {
 &lt;&lt; Interface >>
 operationA()
}
Client *--> Adaptor
Adaptor ..|> Target
Adaptor *..> Adaptee
class Adaptor {
 +Adaptee adaptee
 operationA()
}
class Adaptee {
 &lt;&lt; Interface >>
 operationB()
}
&lt;/pre>

&lt;h3 id="要点">
 要点
 &lt;a class="anchor" href="#%e8%a6%81%e7%82%b9">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>适配器模式，通过创建&amp;quot;适配器&amp;quot;进行接口转换，可以让不兼容的接口变得兼容。&lt;/li>
&lt;li>适配器模式让客户从接口的实现解耦。&lt;/li>
&lt;li>注意适配器和装饰模式的区别，适配器改变接口以让其对不兼容的对象可用，
装饰模式是通过继承，赋予类新的行为和&amp;quot;职责&amp;quot;。&lt;/li>
&lt;li>当需要使用一个现有的类而可用的接口并不适配时，考虑使用适配器模式。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>对象适配器和类适配器&lt;/p></description></item><item><title>抽象工厂模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/creation/20240326_abstract_factory/</link><pubDate>Tue, 26 Mar 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/creation/20240326_abstract_factory/</guid><description>&lt;ul>
&lt;li>
&lt;p>by Head First 设计模式&lt;/p>
&lt;blockquote>
&lt;p>抽象工厂模式提供了一个接口，用于创建相关或依赖对象的家族，而不需要指定具体类。
简而言之，抽象工厂可以创建&lt;strong>一群对象&lt;/strong>，而不单单只创建一种对象。这是抽象工厂和工厂方法的区别。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>by Dive into Design Patterns&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Abstract Factory&lt;/strong> is a &lt;em>creation(al)&lt;/em> design pattern that lets you
produce families of related objects without specifying their
concrete classes.&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>模板方法模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/behaviour/20240402_template_method/</link><pubDate>Tue, 02 Apr 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/behaviour/20240402_template_method/</guid><description>&lt;p>模板方法模式在一个方法中定义一个算法的骨架，而将一些步骤
延迟到子类中。模板方法可以使得子类在不改变算法结构的前提
下，重新 定义算法的某些步骤。&lt;/p></description></item><item><title>外观模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/structure/20240401_facade/</link><pubDate>Mon, 01 Apr 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/structure/20240401_facade/</guid><description>&lt;p>外观模式提供了一个统一的（简单）接口，用来访问子
系统中的一群接口。外观定义了一个高层接口，让系统更
容易使用。&lt;/p>
&lt;h3 id="设计原则">
 设计原则
 &lt;a class="anchor" href="#%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>针对接口编程，而不是针对实现编程&lt;/li>
&lt;li>多用组合，少用继承&lt;/li>
&lt;li>为交互对象之间的松耦合而努力&lt;/li>
&lt;li>类应该对拓展开放，而对修改关闭 （开放-关闭原则）&lt;/li>
&lt;li>依赖抽象，而不依赖具体类 （依赖倒置原则）&lt;/li>
&lt;li>&amp;quot;最少知识原则&amp;quot;——只和你的朋友交谈，不要让太多的类耦合在一起。&lt;/li>
&lt;/ul>
&lt;h4 id="最少知识原则定义">
 最少知识原则：定义
 &lt;a class="anchor" href="#%e6%9c%80%e5%b0%91%e7%9f%a5%e8%af%86%e5%8e%9f%e5%88%99%e5%ae%9a%e4%b9%89">#&lt;/a>
&lt;/h4>
&lt;p>在设计系统中，不管是任何对象，都需要注意它所交互的类有哪些，并注意这些类是怎么交互的。&lt;/p>
&lt;p>最少知识原则希望，在设计系统的过程中，不要让太多的类交杂在一起，免得修改系统中的一部分，
需要修改其他的部分。如果许多部分相互耦合，系统将会变得复杂、脆弱且不易于维护。&lt;/p>
&lt;h4 id="最少知识原则如何遵循">
 最少知识原则：如何遵循？
 &lt;a class="anchor" href="#%e6%9c%80%e5%b0%91%e7%9f%a5%e8%af%86%e5%8e%9f%e5%88%99%e5%a6%82%e4%bd%95%e9%81%b5%e5%be%aa">#&lt;/a>
&lt;/h4>
&lt;p>设计系统的过程中，就任何对象而言，在对象的方法内，应该只调用属于一下范畴的方法：&lt;/p>
&lt;ol>
&lt;li>对象本身的方法&lt;/li>
&lt;li>被当作方法参数而传递进来的对象的方法&lt;/li>
&lt;li>方法内创建或实例化的对象的方法&lt;/li>
&lt;li>对象的任何组件（域、field）的方法&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>不要调用从上述方法中返回的对象支持的方法。&lt;/p>&lt;/blockquote>
&lt;p>请看如下例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getTemp&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Thermometer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thermometer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">station&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getThermometer&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thermometer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getTemperature&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应该优化为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getTemp&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">station&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getTemperature&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而&lt;code>getTemperature&lt;/code>方法由&lt;code>station&lt;/code>域提供。这样做的好处是，我们
不需要认识&lt;code>Thermometer&lt;/code>对象了。让我们始终保持最小的朋友圈！&lt;/p>
&lt;h4 id="最少知识原则缺点">
 最少知识原则：缺点
 &lt;a class="anchor" href="#%e6%9c%80%e5%b0%91%e7%9f%a5%e8%af%86%e5%8e%9f%e5%88%99%e7%bc%ba%e7%82%b9">#&lt;/a>
&lt;/h4>
&lt;p>是的，任何事情都是两面。最少知识原则使得系统耦合度降低，减轻了维护成本，
但同时禁止调用中间对象的方法，这不得不让我们制造更多的&amp;quot;包装&amp;quot;类来处理和
其他组件之间的沟通，这可能会导致开发难度增加。&lt;/p>
&lt;p>让我们接着回到『外观模式』吧。&lt;/p>
&lt;h3 id="uml简图">
 UML简图
 &lt;a class="anchor" href="#uml%e7%ae%80%e5%9b%be">#&lt;/a>
&lt;/h3>
&lt;img alt="外观模式" height="303" src="https://wangy325.github.io/img/dp/fecade.webp" width="512"/>
&lt;h3 id="要点">
 要点
 &lt;a class="anchor" href="#%e8%a6%81%e7%82%b9">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>外观模式中的&lt;code>Facade&lt;/code>就是那个&amp;quot;密友&amp;quot;，它封装了其他要用到的方法，满足了最少知识原则。&lt;/li>
&lt;li>当要简化并统一一堆接口时，可以使用外观模式。&lt;/li>
&lt;li>外观将客户从一个复杂的系统中解耦。&lt;/li>
&lt;li>实现外观，需要将子系统组合进外观中，然后将具体的工作委托给子系统执行。&lt;/li>
&lt;li>一个复杂的子系统，可以有多个外观。&lt;/li>
&lt;/ol>
&lt;h3 id="示例代码">
 示例代码
 &lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81">#&lt;/a>
&lt;/h3>
&lt;p>外观模式（Facade Pattern）是一种结构型设计模式，它提供了一个统一的接口来访问子系统中的一群接口。外观模式定义了一个高层接口，让子系统更容易使用。&lt;/p></description></item><item><title>建造模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/creation/20240313_builder/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/creation/20240313_builder/</guid><description>&lt;p>建造模式是一种创建型设计模式，它将一个复杂对象的构建与其表示分离。它允许你通过一步一步地构建对象来创建不同的表示。它通常用于创建复杂的对象。&lt;/p>
&lt;p>建造模式有如下优点：&lt;/p>
&lt;ul>
&lt;li>将复杂对象的构建与表示分离。&lt;/li>
&lt;li>可以更容易地创建不同的表示。&lt;/li>
&lt;li>可以方便地扩展新类型。&lt;/li>
&lt;/ul>
&lt;h3 id="结构">
 结构
 &lt;a class="anchor" href="#%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h3>
&lt;p>建造模式包含以下角色：&lt;/p>
&lt;ul>
&lt;li>抽象建造者（&lt;em>Builder&lt;/em>）: 定义一个接口，指定构建复杂对象各个部分的步骤。&lt;/li>
&lt;li>具体建造者（&lt;em>ConcreteBuilder&lt;/em>）: 实现抽象建造者接口，具体实现构建复杂对象的步骤。&lt;/li>
&lt;li>指挥者（&lt;em>Director&lt;/em>）: 负责调用具体建造者的方法，构建复杂对象。&lt;/li>
&lt;li>产品（&lt;em>Product&lt;/em>）: 最终构建出来的复杂对象。&lt;/li>
&lt;/ul>
&lt;h3 id="uml简图">
 UML简图
 &lt;a class="anchor" href="#uml%e7%ae%80%e5%9b%be">#&lt;/a>
&lt;/h3>


&lt;script src="https://wangy325.github.io/mermaid.min.js">&lt;/script>

 &lt;script>mermaid.initialize({
 "flowchart": {
 "useMaxWidth":true
 },
 "theme": "light"
 }
 )&lt;/script>




&lt;pre class="mermaid">
classDiagram
direction LR
 class Builder {
 &lt;&lt; interface >>
 +buildPartA()
 +buildPartB()
 +buildPartC()
 +getResult()
 }
 class ConcreteBuilder1 {
 +buildPartA()
 +buildPartB()
 +buildPartC()
 +getResult()
 }
 class ConcreteBuilder2 {
 +buildPartA()
 +buildPartB()
 +buildPartC()
 +getResult()
 }
 class Director {
 +construct()
 }
 class Product {
 +partA
 +partB
 +partC
 }

 Builder &lt;|.. ConcreteBuilder1
 Builder &lt;|.. ConcreteBuilder2
 Director --> Builder
 Director --> Product
 Product ..> ConcreteBuilder1
 Product ..> ConcreteBuilder2
&lt;/pre>

&lt;h3 id="示例代码">
 示例代码
 &lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81">#&lt;/a>
&lt;/h3>
&lt;p>本示例中我们使用建造模式来创建一部车，一部车显然是一个“复杂”的对象，可以将它的创建分成不同的部分，比如座椅，引擎，行车电脑等等不同的模块。我们使用建造模式来创建一个“车”对象。&lt;/p></description></item><item><title>代理模式</title><link>https://wangy325.github.io/zh-cn/docs/design_pattern/structure/20181205_proxy/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/design_pattern/structure/20181205_proxy/</guid><description>&lt;p>代理可以简单理解为，B类托管A类的功能，并根据需求，对A类的访问作&lt;font color=red>&lt;strong>控制&lt;/strong>&lt;/font>，这里的&lt;font color=red>&lt;strong>控制&lt;/strong>&lt;/font>可以理解为对A类方法执行的流程的影响，包括但不限于：&lt;/p></description></item></channel></rss>