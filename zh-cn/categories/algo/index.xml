<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algo on xf&amp;pl</title><link>https://wangy325.github.io/zh-cn/categories/algo/</link><description>Recent content in Algo on xf&amp;pl</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 28 Apr 2025 00:45:36 +0800</lastBuildDate><atom:link href="https://wangy325.github.io/zh-cn/categories/algo/index.xml" rel="self" type="application/rss+xml"/><item><title>二分查找树</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/search/BinarySearchTree/</link><pubDate>Wed, 07 Dec 2022 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/search/BinarySearchTree/</guid><description>&lt;hr></description></item><item><title>位运算的小技巧</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 16 Oct 2022 09:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid><description>&lt;p>在
 &lt;a href="https://wangy325.github.io/zh-cn/posts/2022/20221015_%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/">移位运算&lt;/a>和
 &lt;a href="https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/">异或运算&lt;/a>中讨论了这两种位运算。计算机中还有一些其他的位运算，它们比较简单，但也还有一些巧妙的作用，本文将逐一介绍它们。&lt;/p></description></item><item><title>移位运算</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221015_%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/</link><pubDate>Sat, 15 Oct 2022 09:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221015_%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/</guid><description>&lt;p>位运算是直接操作内存中的二进制数据。因此运算效率比常规的四则运算高出不少。&lt;/p></description></item><item><title>异或运算</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/</link><pubDate>Fri, 14 Oct 2022 12:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/</guid><description>&lt;p>异或运算(&lt;em>exclusive or&lt;/em>)又记作&lt;em>XOR&lt;/em>，一般用插入符号(&lt;em>caret&lt;/em>)&lt;code>^&lt;/code>表示，其可以看到是更加单纯的或运算(|)。我们知道，或运算的规则是：&lt;/p>
&lt;ul>
&lt;li>a=1，b=1，a|b=1 ①&lt;/li>
&lt;li>a，b任意一个为1，a|b=1 ②&lt;/li>
&lt;/ul>
&lt;p>异或运算则是去除了或运算中的规则①，即只有a、b相异时，结果才为真，其他情形都为假。因此异或运算的真值表为：&lt;/p>
&lt;pre tabindex="0">&lt;code>0^0 = 0
0^1 = 1
1^0 = 1
1^1 = 0
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>与0异或，其值不变；与1异或，相当于取反。&lt;/p>&lt;/blockquote>
&lt;p>异或运算有一些特殊的性质，利用这些性质，可以解决特定的问题。这也是本文所要讨论的重点。&lt;/p></description></item><item><title>同余定理与二进制补码</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/</link><pubDate>Fri, 14 Oct 2022 10:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/</guid><description>&lt;p>我们知道，计算机使用2的补码（&lt;em>Two's complements&lt;/em>）来表示负数。这样有一个好处：可以使用同一种运算规则来处理正负数的运算，否则，二进制的正数和负数相加，将会得到错误的结果。为了处理这个讹误，必须为负数设计一套“加法器”。关于这一部分的讨论，参照
 &lt;a href="https://ruanyifeng.com/blog/2009/08/twos_complement.html">关于2的补码&lt;/a>。&lt;/p>
&lt;p>而补码使正负数使用同一套“加法器/乘法器”规则，实际上利用了同余运算的性质。&lt;/p></description></item><item><title>归并排序</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/sort/MergeSort/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/sort/MergeSort/</guid><description>&lt;hr></description></item><item><title>插入排序</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/sort/InsertSort/</link><pubDate>Mon, 05 Jul 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/sort/InsertSort/</guid><description>&lt;hr></description></item><item><title>选择排序</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/sort/SelectSort/</link><pubDate>Mon, 05 Jul 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/sort/SelectSort/</guid><description>&lt;hr></description></item><item><title>递归问题：走台阶</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/Steps/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/Steps/</guid><description>&lt;hr>
&lt;blockquote>
&lt;p>所有的递归问题，其实都可以用非递归的方式实现。&lt;/p>&lt;/blockquote></description></item><item><title>冒泡排序</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/sort/BubbleSort/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/sort/BubbleSort/</guid><description>&lt;hr></description></item><item><title>循环数组的另一种实现</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/CircularBufferVariety/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/CircularBufferVariety/</guid><description>&lt;p>已经介绍过一个
 &lt;a href="https://wangy325.github.io/zh-cn/docs/snippets/algo/array/CircularBuffer/">循环数组&lt;/a>，这里介绍另一种实现方法。&lt;/p>
&lt;p>参考：
 &lt;a href="https://www.baeldung.com/java-ring-buffer">Implementing a Ring Buffer in Java&lt;/a>&lt;/p>
&lt;hr></description></item><item><title>有界循环队列</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/CircularBuffer/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/CircularBuffer/</guid><description>&lt;p>使用循环数组实现有界循环队列：&lt;/p>
&lt;p>参考：
 &lt;a href="http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/8-List/array-queue2.html">Implementing a Queue using a circular array&lt;/a>&lt;/p>
&lt;hr></description></item><item><title>使用数组实现顺序队列</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/ArrayQueue/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/ArrayQueue/</guid><description>&lt;hr></description></item><item><title>用链表实现无界队列</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/ListQueue/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/ListQueue/</guid><description>&lt;hr></description></item><item><title>用数组实现自动扩容的无界队列</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/ArrayQueueUnbounded/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/ArrayQueueUnbounded/</guid><description>&lt;hr></description></item><item><title>栈的简单应用-浏览器页面导航</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/SimpleBrowser/</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/SimpleBrowser/</guid><description>&lt;hr></description></item><item><title>栈的链表实现</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/StackByList/</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/StackByList/</guid><description>&lt;hr></description></item><item><title>栈的数组实现</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/StackByArray/</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/StackByArray/</guid><description>&lt;hr></description></item><item><title>使用单链表实现LRU缓存</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/ListLRU/</link><pubDate>Wed, 23 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/ListLRU/</guid><description>&lt;p>使用
 &lt;a href="https://wangy325.github.io/zh-cn/docs/snippets/algo/array/NodeList/">单链表&lt;/a>简单实现一个LRU缓存。&lt;/p>
&lt;hr></description></item><item><title>单链表的简单实现</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/NodeList/</link><pubDate>Mon, 21 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/NodeList/</guid><description>&lt;p>使用Java实现一个单链表，有如下功能：&lt;/p>
&lt;ol>
&lt;li>插入元素&lt;/li>
&lt;li>根据索引获取元素&lt;/li>
&lt;li>判断链表中是否存在元素&lt;/li>
&lt;li>获取元素索引&lt;/li>
&lt;li>删除元素&lt;/li>
&lt;li>反转链表&lt;/li>
&lt;li>判断回文字符串&lt;/li>
&lt;/ol>
&lt;hr></description></item><item><title>实现一个自定义数组</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/CustomArray/</link><pubDate>Mon, 21 Jun 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/array/CustomArray/</guid><description>&lt;hr></description></item><item><title>背包问题2例</title><link>https://wangy325.github.io/zh-cn/posts/2020/20201204_01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%982%E4%BE%8B/</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2020/20201204_01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%982%E4%BE%8B/</guid><description>&lt;p>背包问题其实属于
 &lt;a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划&lt;/a>（ &lt;em>Dynamic Programming&lt;/em> ）问题的一种。动态规划的手段是将大问题拆解为多个小问题，小问题解决之后，大问题也就随之而解。&lt;/p>
&lt;p>背包问题的典型描述是：&lt;/p>
&lt;blockquote>
&lt;p>给定&lt;code>n&lt;/code>种物品和一背包。物品&lt;code>i&lt;/code>的重量为&lt;code>wi&lt;/code>，其价值为&lt;code>vi&lt;/code>，背包的容量为&lt;code>c&lt;/code>。&lt;/p>
&lt;p>问应该如何选择装入背包中的物品，使得装入背包中物品的总价值最大？&lt;/p>&lt;/blockquote></description></item><item><title>二分查找</title><link>https://wangy325.github.io/zh-cn/docs/snippets/algo/search/BinSearch/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/snippets/algo/search/BinSearch/</guid><description>&lt;hr></description></item></channel></rss>