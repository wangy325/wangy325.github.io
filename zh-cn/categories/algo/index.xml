<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algo on xf&amp;pl</title><link>https://wangy325.github.io/zh-cn/categories/algo/</link><description>Recent content in Algo on xf&amp;pl</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 16 Oct 2022 09:01:23 +0800</lastBuildDate><atom:link href="https://wangy325.github.io/zh-cn/categories/algo/index.xml" rel="self" type="application/rss+xml"/><item><title>位运算的小技巧</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 16 Oct 2022 09:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid><description>&lt;p>在
 &lt;a href="%e7%a7%bb%e4%bd%8d%e8%bf%90%e7%ae%97.md">移位运算&lt;/a>和
 &lt;a href="%e5%bc%82%e6%88%96%e8%bf%90%e7%ae%97.md">异或运算&lt;/a>中讨论了这两种位运算。计算机中还有一些其他的位运算，它们比较简单，但也还有一些巧妙的作用，本文将逐一介绍它们。&lt;/p></description></item><item><title>移位运算</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221015_%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/</link><pubDate>Sat, 15 Oct 2022 09:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221015_%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/</guid><description>&lt;p>位运算是直接操作内存中的二进制数据。因此运算效率比常规的四则运算高出不少。&lt;/p></description></item><item><title>异或运算</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/</link><pubDate>Fri, 14 Oct 2022 12:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/</guid><description>&lt;p>异或运算(&lt;em>exclusive or&lt;/em>)又记作&lt;em>XOR&lt;/em>，一般用插入符号(&lt;em>caret&lt;/em>)&lt;code>^&lt;/code>表示，其可以看到是更加单纯的或运算(|)。我们知道，或运算的规则是：&lt;/p>
&lt;ul>
&lt;li>a=1，b=1，a|b=1 ①&lt;/li>
&lt;li>a，b任意一个为1，a|b=1 ②&lt;/li>
&lt;/ul>
&lt;p>异或运算则是去除了或运算中的规则①，即只有a、b相异时，结果才为真，其他情形都为假。因此异或运算的真值表为：&lt;/p>
&lt;pre tabindex="0">&lt;code>0^0 = 0
0^1 = 1
1^0 = 1
1^1 = 0
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>与0异或，其值不变；与1异或，相当于取反。&lt;/p>
&lt;/blockquote>
&lt;p>异或运算有一些特殊的性质，利用这些性质，可以解决特定的问题。这也是本文所要讨论的重点。&lt;/p></description></item><item><title>同余定理与二进制补码</title><link>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/</link><pubDate>Fri, 14 Oct 2022 10:01:23 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2022/20221014_%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/</guid><description>&lt;p>我们知道，计算机使用2的补码（&lt;em>Two's complements&lt;/em>）来表示负数。这样有一个好处：可以使用同一种运算规则来处理正负数的运算，否则，二进制的正数和负数相加，将会得到错误的结果。为了处理这个讹误，必须为负数设计一套“加法器”。关于这一部分的讨论，参照
 &lt;a href="https://ruanyifeng.com/blog/2009/08/twos_complement.html">关于2的补码&lt;/a>。&lt;/p>
&lt;p>而补码使正负数使用同一套“加法器/乘法器”规则，实际上利用了同余运算的性质。&lt;/p></description></item><item><title>背包问题2例</title><link>https://wangy325.github.io/zh-cn/posts/2020/20201204_01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%982%E4%BE%8B/</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/posts/2020/20201204_01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%982%E4%BE%8B/</guid><description>&lt;p>背包问题其实属于&lt;strong>动态规划&lt;/strong>（ &lt;em>Dynamic Programming&lt;/em> ）问题的一种。动态规划的手段是将大问题拆解为多个小问题，小问题解决之后，大问题也就随之而解。&lt;/p></description></item></channel></rss>