<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySQL on Endless River</title><link>https://wangy325.github.io/zh-cn/docs/craft/db/sql/</link><description>Recent content in MySQL on Endless River</description><generator>Hugo</generator><language>zh-CN</language><atom:link href="https://wangy325.github.io/zh-cn/docs/craft/db/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>CentOS安装并配置MySQL</title><link>https://wangy325.github.io/zh-cn/docs/craft/db/sql/1_%E5%9C%A8centOS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/craft/db/sql/1_%E5%9C%A8centOS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>&lt;p>文章介绍了在centOS7上安装mysql数据库服务的配置及简单优化过程。在服务器上安装mysql服务网络上能够找到的资源很多了，因此本文没有作详细介绍，本文的重点在于后续的优化配置方面。&lt;/p></description></item><item><title>MySQL字符串处理函数</title><link>https://wangy325.github.io/zh-cn/docs/craft/db/sql/2_MySQL%E7%9A%84%E5%87%A0%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/craft/db/sql/2_MySQL%E7%9A%84%E5%87%A0%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid><description>&lt;p>本文介绍了mysql的几个方便的字符串处理函数，通常用于简单的查询结果处理。适用在mapper.xml的语句标签中对数据库字段数据进行简单的处理。&lt;/p></description></item><item><title>事务隔离级别与MVCC</title><link>https://wangy325.github.io/zh-cn/docs/craft/db/sql/4_MySQL%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link><pubDate>Fri, 27 Nov 2020 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/craft/db/sql/4_MySQL%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid><description>&lt;!--
~~MySQL事务属于老生常谈的内容了，并不指望这一篇文章将其搞透，本篇文章只是将MySQL事务的外衣扒了，让其看起来不再那么神秘与华丽。有时候，新手总是对“事务”这两个字怀有莫名的恐惧感，因为其藏在MySQL内部，偷偷地工作着，就好像你没有凝视深渊，而深渊却在凝视你。~~
-->
&lt;p>开发过程中，或多或少会碰到需要使用数据库事务的业务场景，而Spring框架提供的能力使得开发者无需过多地关注事务本身，这带来诸多便利，但也带来弊端：开发者只知其貌，而不知其理，一旦Spring框架抛出异常，便往往手足无措。本文简单地介绍了MySQL事务相关的基本概念，使用例证阐述了不同事务隔离级别下MySQL的数据可见性，简单讨论了MySQL如何保证数据一致性。有了这些基本的概念，遇到事务与数据库锁相关的问题时，开发者能够多一点思考。&lt;/p></description></item><item><title>MySQL显式锁简单介绍</title><link>https://wangy325.github.io/zh-cn/docs/craft/db/sql/5_%E4%BD%BF%E7%94%A8mysql%E7%9A%84%E8%A1%8C%E9%94%81/</link><pubDate>Wed, 24 Mar 2021 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/craft/db/sql/5_%E4%BD%BF%E7%94%A8mysql%E7%9A%84%E8%A1%8C%E9%94%81/</guid><description>&lt;p>对于MySQL数据库而言，
 &lt;a href="https://wangy325.github.io/zh-cn/docs/craft/db/sql/4_MySQL%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/">事务的隔离级别&lt;/a>在不同程度上保证了数据一致性。&lt;/p>
&lt;p>我们知道，&lt;strong>事务&lt;/strong>的四大特性：原子性、一致性、隔离性、持久性，其中&lt;strong>隔离性&lt;/strong>就是通过&lt;strong>锁机制&lt;/strong>来保证的。&lt;/p>
&lt;blockquote>
&lt;p>另外3个性质，通过MySQL的&lt;code>redo log&lt;/code> 和&lt;code>undo log&lt;/code>来保证。&lt;/p>
&lt;/blockquote>
&lt;p>MySQL对每条SQL语句的执行，都添加了一个隐式事务，言外之意，就是添加了隐式锁。&lt;/p>
&lt;p>除了隐式锁之外，MySQL还可以使用显式锁。&lt;/p>
&lt;p>这是从锁的可见性（或者使用方式）上来区分锁。本文不讨论MySQL的粒度锁（表锁，行锁，页锁）。&lt;/p>
&lt;!-- ~~我们知道，事务能读取到事务开始前就存在的数据，如果事务A需要对某条数据data1进行修改，在事务A还没有提交之前，事务B虽然不能读取到事务A对data1的修改（read committed隔离级别以上），但是能够读取data1原始的数据快照，并且能够再读取到的数据基础上对其进行修改（在事务A提交之后）。~~ --></description></item><item><title>MySQL死锁</title><link>https://wangy325.github.io/zh-cn/docs/craft/db/sql/6_mysql%E6%AD%BB%E9%94%81/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate><guid>https://wangy325.github.io/zh-cn/docs/craft/db/sql/6_mysql%E6%AD%BB%E9%94%81/</guid><description>&lt;p>MySQL死锁是指多个事务之间，由于每个事务持有另一个事务所需的锁而无法继续执行的情况。因所有事务都在等待相同的资源变得可用，而没有一个事务释放它所持有的锁。&lt;/p>
&lt;p>多个事务以相反的顺序锁定多个表中的行（通过诸如UPDATE或SELECT ... FOR UPDATE之类的语句），就可能发生死锁。&lt;/p>
&lt;p>死锁也可能发生在这些语句锁定索引记录和间隙范围时，每个事务获取一些锁但由于时间问题而没有获取其他锁。&lt;/p></description></item></channel></rss>