<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Creation on Endless River</title><link>https://wangy325.github.io/zh-cn/docs/craft/design_pattern/creation/</link><description>Recent content in Creation on Endless River</description><generator>Hugo</generator><language>zh-CN</language><atom:link href="https://wangy325.github.io/zh-cn/docs/craft/design_pattern/creation/index.xml" rel="self" type="application/rss+xml"/><item><title>单例模式</title><link>https://wangy325.github.io/zh-cn/docs/craft/design_pattern/creation/1_singleton/</link><pubDate>Thu, 28 Mar 2024 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh-cn/docs/craft/design_pattern/creation/1_singleton/</guid><description>&lt;h2 id="单例模式">
 单例模式
 &lt;a class="anchor" href="#%e5%8d%95%e4%be%8b%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>by Head First 设计模式&lt;/p>
&lt;blockquote>
&lt;p>单例模式确保一个类只有一个实例，并且提供一个全局访问点。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>by Dive into Design Patterns&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Singleton&lt;/strong> is a &lt;em>creational design pattern&lt;/em> that lets you ensure
that a class has only one instance, while providing a global
access point to this instance.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>工厂模式</title><link>https://wangy325.github.io/zh-cn/docs/craft/design_pattern/creation/2_factory/</link><pubDate>Tue, 26 Mar 2024 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh-cn/docs/craft/design_pattern/creation/2_factory/</guid><description>&lt;h3 id="工厂模式">
 工厂模式
 &lt;a class="anchor" href="#%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>by Head First 设计模式&lt;/p>
&lt;blockquote>
&lt;p>工厂方法模式定义了一个创建对象的接口，但是由子类决定要创建的对象是哪一个。工厂方法把类的实例化推迟到
子类。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>by Dive into Design Patterns&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Factory Method&lt;/strong> is a creational design pattern that provides an interface for creating
objects in a superclass, but allows subclasses to alter the type of objects that will be
created.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>工厂模式指定工厂仅仅能创建特定类型的产品。&lt;/p>
&lt;/blockquote></description></item><item><title>抽象工厂模式</title><link>https://wangy325.github.io/zh-cn/docs/craft/design_pattern/creation/3_abstract_factory/</link><pubDate>Tue, 26 Mar 2024 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh-cn/docs/craft/design_pattern/creation/3_abstract_factory/</guid><description>&lt;h2 id="抽象工厂模式">
 抽象工厂模式
 &lt;a class="anchor" href="#%e6%8a%bd%e8%b1%a1%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>by Head First 设计模式&lt;/p>
&lt;blockquote>
&lt;p>抽象工厂模式提供了一个接口，用于创建相关或依赖对象的家族，而不需要指定具体类。
简而言之，抽象工厂可以创建一群对象，而不单单只创建一种对象。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>by Dive into Design Patterns&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Abstract Factory&lt;/strong> is a creational design pattern that lets you
produce families of related objects without specifying their
concrete classes.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>建造者模式</title><link>https://wangy325.github.io/zh-cn/docs/craft/design_pattern/creation/4_builder/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh-cn/docs/craft/design_pattern/creation/4_builder/</guid><description>&lt;blockquote>
&lt;p>本文由Gemini AI生成。&lt;/p>
&lt;/blockquote>
&lt;h2 id="建造模式">
 建造模式
 &lt;a class="anchor" href="#%e5%bb%ba%e9%80%a0%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;p>建造模式是一种创建型设计模式，它将一个复杂对象的构建与其表示分离。它允许你通过一步一步地构建对象来创建不同的表示。&lt;/p></description></item></channel></rss>