<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Translations on Endless River</title><link>https://wangy325.github.io/zh-cn/docs/note/translations/</link><description>Recent content in Translations on Endless River</description><generator>Hugo</generator><language>zh-CN</language><atom:link href="https://wangy325.github.io/zh-cn/docs/note/translations/index.xml" rel="self" type="application/rss+xml"/><item><title>在SpringBoot中使用MessageSource</title><link>https://wangy325.github.io/zh-cn/docs/note/translations/use-springboot-messagesource/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh-cn/docs/note/translations/use-springboot-messagesource/</guid><description>&lt;blockquote>
&lt;p>&lt;span id="hook">几个说明&lt;/span>：&lt;/p>
&lt;ol>
&lt;li>&lt;del>properties配置文件中，&lt;code>spring.messages.basename&lt;/code>&lt;strong>必须&lt;/strong>要加classpath前缀。如 &lt;code>spring.messages.basename=classpath:i18n/messages&lt;/code>&lt;/del>；&lt;/li>
&lt;li>&lt;del>必须要手动配置&lt;code>MessageSource&lt;/code>，springboot不会自动配置之&lt;/del>；&lt;/li>
&lt;li>如果使用&lt;code>MessageSource.getMessage()&lt;/code>方法，第一个参数的引用形式为&lt;code>&amp;quot;code&amp;quot;&lt;/code>，而不是&lt;code>&amp;quot;{code}&amp;quot;&lt;/code>或者&lt;code>&amp;quot;${code}&amp;quot;&lt;/code>。如messageSource.getMessage(&amp;quot;test.msg&amp;quot;, null, &lt;del>Locale.getDefault()&lt;/del>)；&lt;/li>
&lt;li>在配置&lt;code>LocalValidatorFactoryBean&lt;/code>之后，才可以在&lt;code>javax.validation.constraints&lt;/code>包下的注解（&lt;code>@Size&lt;/code>，&lt;code>@NotNull&lt;/code>...）下的&lt;em>&lt;strong>message&lt;/strong>&lt;/em>属性中使用&lt;code>&amp;quot;{code}&amp;quot;&lt;/code>的形式声明校验提示信息。如
&lt;code>@NotNull(message = &amp;quot;{leftTime.not.null}&amp;quot;)&lt;/code>；&lt;/li>
&lt;li>springMVC的locale配置和JVM的locale配置不一样，在application.properties中配置的&lt;code>spring.mvc.locale=zh_CN&lt;/code>实际上配置的是&lt;code>WebMvcProperties&lt;/code>，在获取消息时，locale信息应该使用&lt;code>webMvcProperties.getLocale()&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>获取&lt;strong>而不是&lt;/strong>使用&lt;code>Locale.getDefault()&lt;/code>获取。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;hr>
&lt;p>MessageSource is a powerful feature available in Spring applications. This helps application developers handle various complex scenarios with writing much extra code, such as environment-specific configuration, internationalization or configurable values.&lt;/p>
&lt;p>One more scenario could be modifying the default validation messages to more user-friendly/custom messages.&lt;/p>
&lt;p>In this tutorial, we'll see how to configure and manage custom validation MessageSource in the application using Spring Boot.&lt;/p></description></item><item><title>使用Logback记录日志</title><link>https://wangy325.github.io/zh-cn/docs/note/translations/guide-to-logback-cn/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh-cn/docs/note/translations/guide-to-logback-cn/</guid><description>&lt;p>
 &lt;a href="https://logback.qos.ch/">Logback&lt;/a>是Java应用中使用最广的日志框架之一，它是
 &lt;a href="https://logback.qos.ch/reasonsToSwitch.html">其前辈框架Log4j的替代者&lt;/a>。相比Log4j，Logback在日志处理速度、配置多样性、对旧日志文件的处理灵活性上均要优于Log4j。&lt;/p>
&lt;p>这篇文章将介绍Logback的主要组成结构并指导你使用Logback构建更好的程序。&lt;/p></description></item><item><title>使用printf格式化输出</title><link>https://wangy325.github.io/zh-cn/docs/note/translations/how2use-printf/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh-cn/docs/note/translations/how2use-printf/</guid><description>&lt;p>这篇文章介绍了几种常见的使用&lt;code>printf()&lt;/code>方法进行格式化输出的方法。&lt;/p>
&lt;p>&lt;code>printf()&lt;/code>方法隶属于&lt;code>java.io.PrintStream&lt;/code>类，提供了和C语言中相似的格式化字符串输出的方法。&lt;/p></description></item></channel></rss>