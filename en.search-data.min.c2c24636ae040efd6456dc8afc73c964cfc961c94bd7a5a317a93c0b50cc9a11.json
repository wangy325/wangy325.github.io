[{"id":0,"href":"/en/posts/2025/20250115_basical_usage_of_fabric8io_docker_maven_plugin/","title":"Use fabric8io/docker-maven-plugin to build image on Windows","section":"Blog","content":"The spotify docker maven plugin (Archived since Mar, 2022) can only build image with local docker client installed. This plugin works fine on my Mac.\nBut when I switched to Windows(with docker installed in ubuntu-WSL), problem occurred:\n1 Caused by: com.spotify.docker.client.exceptions.DockerException: java.util.concurrent.ExecutionException: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingException: java.io.FileNotFoundException: \\.\\pipe\\docker_engine (系统找不到指定的文件。) Which means plugin can not find docker engine running on my machine. That's not the thing! The real reason is that spotify maven plugin can not build image through WSL docker.\nAn alternative was found after searching google. that's fabric8io/docker-maven-plugin.\nThis page only shows basic usage of this plugin.\nThe fabric8io docker maven plugin can set remote docker host, which works on Windows with docker installed within WSL.\nBelow shows the simplest configuration:\n1\u0026lt;plugin\u0026gt; 2\u0026lt;groupId\u0026gt;io.fabric8\u0026lt;/groupId\u0026gt; 3\u0026lt;artifactId\u0026gt;docker-maven-plugin\u0026lt;/artifactId\u0026gt; 4\u0026lt;version\u0026gt;0.45.1\u0026lt;/version\u0026gt; 5\u0026lt;configuration\u0026gt; 6 \u0026lt;dockerHost\u0026gt;tcp://localhost:2375\u0026lt;/dockerHost\u0026gt; 7 \u0026lt;images\u0026gt; 8 \u0026lt;image\u0026gt; 9 \u0026lt;name\u0026gt;${docker.image.prefix}/${project.artifactId}:%v\u0026lt;/name\u0026gt; 10 \u0026lt;build\u0026gt; 11 \u0026lt;dockerFile\u0026gt;${project.basedir}/Dockerfile\u0026lt;/dockerFile\u0026gt; 12 \u0026lt;/build\u0026gt; 13 \u0026lt;/image\u0026gt; 14 \u0026lt;/images\u0026gt; 15 \u0026lt;buildArgs\u0026gt; 16 \u0026lt;JAR_FILE\u0026gt;target/${project.build.finalName}.jar\u0026lt;/JAR_FILE\u0026gt; 17 \u0026lt;/buildArgs\u0026gt; 18\u0026lt;/configuration\u0026gt; 19\u0026lt;/plugin\u0026gt; dockerHost is the WSL host and post WSL docker daemon runs on.\n%v is the same as ${project.version}.\nImage name and tag are configured in image\u0026gt;name tag.\nDockerfile (same as spotify docker maven plugin) is configured in image\u0026gt;build\u0026gt;dockerFile tag.\nBuild source(java web application Jar) is configured in configuration\u0026gt;buildArgs tag.\nYou need make some change to make WSL docker daemon listen on 2375 port:\nopen docker.service config file:\nvim /usr/lib/systemd/system/docker.service\nmodify docker.service setting:\n1# default setting 2# ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock 3# new setting 4ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock restart docker daemon:\n1systemctl daemon-reload 2systemctl restart docker After that, you can run mvn clean package docker:build -DskipTests to build docker image.\nTo run docker image with docker-compose, use wsl docker compose up on Windows.\nReferences # java.io.FileNotFoundException: .\\pipe\\docker_engine io.fabric8.docker-maven-plugin插件使用 fabric8 documents "},{"id":1,"href":"/en/posts/2025/20250110_CSRF_in_spring_security_applications/","title":"How does Spring Security prevent application from CSRF?","section":"Blog","content":" Question # When I wrote a Spring Security \u0026amp; Oauth2 web application according to this official guide with Spring Boot 3.0.6 and Spring Security 6.0.3, I encountered a problem when I configured Spring Security CSRF:\n1@Override 2protected void configure(HttpSecurity http) throws Exception { 3\t// @formatter:off 4 http 5 // ... existing code here 6 .csrf(c -\u0026gt; c 7 .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) 8 ) 9 // ... existing code here 10 // @formatter:on 11} Logs below shows the error info:\n1o.s.security.web.csrf.CsrfFilter: Invalid CSRF token found for http://localhost:8080/logout 2o.s.s.w.access.AccessDeniedHandlerImpl: Responding with 403 status code “ CookieCsrfRepository is a implementation of CsrfTokenRepository, Which persists the CSRF token in a cookie named \u0026quot;XSRF-TOKEN\u0026quot; and reads from the header \u0026quot;X-XSRF-TOKEN\u0026quot; following the conventions of AngularJS. When using with AngularJS be sure to use withHttpOnlyFalse().\nSo what does attribute HttpOnly mean? This is an attribute of Cookie, once HttpOnly is set to true(default value), the cookie will be hidden from scripts on the client side.\nSo, we need to set HttpOnly to false on behalf of JS's Cookie visibility.\nDebug # I debugged and found that Spring Security 6 uses XorCsrfTokenRequestAttributeHandler to provides BREACH protection of the CsrfToken by default.\n1// XorCsrfTokenRequestAttributeHandler.getTokenValue 2private static String getTokenValue(String actualToken, String token) { 3 byte[] actualBytes; 4 try { 5 actualBytes = Base64.getUrlDecoder().decode(actualToken); 6 } 7 catch (Exception ex) { 8 return null; 9 } 10 11 byte[] tokenBytes = Utf8.encode(token); 12 int tokenSize = tokenBytes.length; 13 if (actualBytes.length \u0026lt; tokenSize) { 14 // return null here 15 return null; 16 } 17 // .... existing code here 18} And then the CsrfFilter throws a error:\n1// CsrfFilter.doFilterInternal 2protected void doFilterInternal 3 (HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) 4\tthrows ServletException, IOException { 5 6 // ...existing code here 7 CsrfToken csrfToken = deferredCsrfToken.get(); 8 String actualToken = this.requestHandler.resolveCsrfTokenValue(request, csrfToken); 9 if (!equalsConstantTime(csrfToken.getToken(), actualToken)) { 10 boolean missingToken = deferredCsrfToken.isGenerated(); 11 this.logger.debug( 12 LogMessage.of(() -\u0026gt; \u0026#34;Invalid CSRF token found for \u0026#34; 13 + UrlUtils.buildFullRequestUrl(request))); 14 // ... existing code here 15 16 } 17 filterChain.doFilter(request, response); 18} The XorCsrfTokenRequestAttributeHandler expects a XOR'ed CSRF token, but the CookieCsrfTokenRepository provided a normal one. That's the reason.\nSolution # After googled, I found this problem was fully discussed on this stack overflow question.\nAs described before, I realized that tutorial was based on Spring Boot 2. So this may be some 'new feature' problem.-:) Spring Security replaces XorCsrfTokenRequestAttributeHandler with CsrfTokenRequestAttributeHandler, which cause the problem, based on this issue.\nSome one said that you could customize csrfTokenRequestHandler in HttpSecurity like this:\n1@Override 2protected void configure(HttpSecurity http) throws Exception { 3\t// @formatter:off 4 http 5 // ... existing code here 6 .csrf(c -\u0026gt; { 7 c.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) 8 c.csrfTokenRequestHandler(new CsrfTokenRequestHandler()); 9 }) 10 // ... existing code here 11 // @formatter:on 12} Code above uses CsrfTokenRequestHandler to handle XSRF-TOKEN. But this solution fails on the first request and succeeds thereafter, and also, this means your app likely vulnerable against the BREACH attack.\nThere are special considerations for integrating a single-page application (SPA) with Spring Security’s CSRF protection.\nRecall that Spring Security provides BREACH protection of the CsrfToken by default. When storing the expected CSRF token in a cookie, JavaScript applications will only have access to the plain token value and will not have access to the encoded value. A customized request handler for resolving the actual token value will need to be provided.\nIn addition, the cookie storing the CSRF token will be cleared upon authentication success and logout success. Spring Security defers loading a new CSRF token by default, and additional work is required to return a fresh cookie.\nSo, how to customize csrfTokenRequestHandler to prevent app from both CSRF and BREACH? The following configuration can be used:\n1@Configuration 2@EnableWebSecurity 3public class SecurityConfig { 4 5 @Bean 6 public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { 7 http 8 // ... 9 .csrf((csrf) -\u0026gt; csrf 10 .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) 11 .csrfTokenRequestHandler(new SpaCsrfTokenRequestHandler()) 12 ); 13 return http.build(); 14 } 15} 16 17final class SpaCsrfTokenRequestHandler implements CsrfTokenRequestHandler { 18 private final CsrfTokenRequestHandler plain = new CsrfTokenRequestAttributeHandler(); 19 private final CsrfTokenRequestHandler xor = new XorCsrfTokenRequestAttributeHandler(); 20 21 @Override 22 public void handle 23 (HttpServletRequest request, HttpServletResponse response, Supplier\u0026lt;CsrfToken\u0026gt; csrfToken) { 24 /* 25 * Always use XorCsrfTokenRequestAttributeHandler to provide BREACH protection of 26 * the CsrfToken when it is rendered in the response body. 27 */ 28 this.xor.handle(request, response, csrfToken); 29 /* 30 * Render the token value to a cookie by causing the deferred token to be loaded. 31 */ 32 csrfToken.get(); 33 } 34 35 @Override 36 public String resolveCsrfTokenValue(HttpServletRequest request, CsrfToken csrfToken) { 37 String headerValue = request.getHeader(csrfToken.getHeaderName()); 38 /* 39 * If the request contains a request header, use CsrfTokenRequestAttributeHandler 40 * to resolve the CsrfToken. This applies when a single-page application includes 41 * the header value automatically, which was obtained via a cookie containing the 42 * raw CsrfToken. 43 * 44 * In all other cases (e.g. if the request contains a request parameter), use 45 * XorCsrfTokenRequestAttributeHandler to resolve the CsrfToken. This applies 46 * when a server-side rendered form includes the _csrf request parameter as a 47 * hidden input. 48 */ 49 return (StringUtils.hasText(headerValue) ? this.plain : this.xor) 50 .resolveCsrfTokenValue(request, csrfToken); 51 } 52} Configure CookieCsrfTokenRepository with HttpOnly set to false so the cookie can be read by the JavaScript application. Configure a custom CsrfTokenRequestHandler that resolves the CSRF token based on whether it is an HTTP request header (X-XSRF-TOKEN) or request parameter (_csrf). This implementation also causes the deferred CsrfToken to be loaded on every request, which will return a new cookie if needed. XorCsrfTokenRequestAttributeHandler resolves the CSRF TOKEN from request parameter _csrf.\nConclusion # Spring Security 6 uses XorCsrfTokenRequestAttributeHandler to prevent CSRF and BREACH attacks. Single page application which wants to prevent CSRF need to customize csrfTokenRequestHandler You can use CookieCsrfTokenRepository to hold CSRF TOKEN, with HttpOnly set to false, the token can be read by Javascript. References # Spring Boot and OAuth2 tutorial-spring-boot-oauth2 CSRF protection not working with Spring Security 6 SPA CSRF integration Javascript BREACH attack CSRF token request handler BREACH "},{"id":2,"href":"/en/posts/2024/20241205_microservice_in_action_quick_notes/","title":"Quick notes of microservice in action","section":"Blog","content":"This is quick notes of learning Spring microservice in action(2nd edition). To be clarified, Spring-Boot and Spring-Cloud version are little different from book.\nHere are versions used:\nSpring-Boot version 2.6.13 Spring-Cloud version 2021.0.5 Whereas the guide book Spring Microservice In Action(2nd edition) uses 2.2.3.RELEASE for spring-boot and Hoxton.SR1 for spring-cloud. Which introduces some version 'traps'.\n1) No spring.config.import property has been defined # While configuring licensing-service as Spring Cloud Config Client, I encountered this error. After googled, I found that was a new version of spring with old configuration style.\nYou're getting this error because you're using a new version of Spring Boot and Spring Cloud, but you're trying to configure it in the old way.\nHere is the full answer link: https://stackoverflow.com/questions/67507452/no-spring-config-import-property-has-been-defined\nSpring Boot 2.4(later) introduced a new way to import config data.\nHere is official doc: https://docs.spring.io/spring-cloud-config/docs/current/reference/html/#_spring_cloud_config_client\n2 solutions were provided to solve problem.\n2) Spring cloud config Git backend with ssh authentication # Use command\nssh-keygen -m PEM -t rsa -b 4096 -f config_server_deploy_key.rsa to gen rsa key pair.\nThen config spring cloud config server like this:\n1 spring: 2 cloud: 3 config: 4 server: 5 git: 6 uri: git@gitserver.com:team/repo1.git 7 ignoreLocalSshSettings: true 8# hostKey: someHostKey 9# hostKeyAlgorithm: ssh-rsa 10 privateKey: | 11 -----BEGIN RSA PRIVATE KEY----- 12 MIIEpgIBAAKCAQEAx4UbaDzY5xjW6hc9jwN0mX33XpTDVW9WqHp5AKaRbtAC3DqX 13 IXFMPgw3K45jxRb93f8tv9vL3rD9CUG1Gv4FM+o7ds7FRES5RTjv2RT/JVNJCoqF 14 ol8+ngLqRZCyBtQN7zYByWMRirPGoDUqdPYrj2yq+ObBBNhg5N+hOwKjjpzdj2Ud 15 1l7R+wxIqmJo1IYyy16xS8WsjyQuyC0lL456qkd5BDZ0Ag8j2X9H9D5220Ln7s9i 16 oezTipXipS7p7Jekf3Ywx6abJwOmB0rX79dV4qiNcGgzATnG1PkXxqt76VhcGa0W 17 DDVHEEYGbSQ6hIGSh0I7BQun0aLRZojfE3gqHQIDAQABAoIBAQCZmGrk8BK6tXCd 18 fY6yTiKxFzwb38IQP0ojIUWNrq0+9Xt+NsypviLHkXfXXCKKU4zUHeIGVRq5MN9b 19 BO56/RrcQHHOoJdUWuOV2qMqJvPUtC0CpGkD+valhfD75MxoXU7s3FK7yjxy3rsG 20 EmfA6tHV8/4a5umo5TqSd2YTm5B19AhRqiuUVI1wTB41DjULUGiMYrnYrhzQlVvj 21 5MjnKTlYu3V8PoYDfv1GmxPPh6vlpafXEeEYN8VB97e5x3DGHjZ5UrurAmTLTdO8 22 +AahyoKsIY612TkkQthJlt7FJAwnCGMgY6podzzvzICLFmmTXYiZ/28I4BX/mOSe 23 pZVnfRixAoGBAO6Uiwt40/PKs53mCEWngslSCsh9oGAaLTf/XdvMns5VmuyyAyKG 24 ti8Ol5wqBMi4GIUzjbgUvSUt+IowIrG3f5tN85wpjQ1UGVcpTnl5Qo9xaS1PFScQ 25 xrtWZ9eNj2TsIAMp/svJsyGG3OibxfnuAIpSXNQiJPwRlW3irzpGgVx/AoGBANYW 26 dnhshUcEHMJi3aXwR12OTDnaLoanVGLwLnkqLSYUZA7ZegpKq90UAuBdcEfgdpyi 27 PhKpeaeIiAaNnFo8m9aoTKr+7I6/uMTlwrVnfrsVTZv3orxjwQV20YIBCVRKD1uX 28 VhE0ozPZxwwKSPAFocpyWpGHGreGF1AIYBE9UBtjAoGBAI8bfPgJpyFyMiGBjO6z 29 FwlJc/xlFqDusrcHL7abW5qq0L4v3R+FrJw3ZYufzLTVcKfdj6GelwJJO+8wBm+R 30 gTKYJItEhT48duLIfTDyIpHGVm9+I1MGhh5zKuCqIhxIYr9jHloBB7kRm0rPvYY4 31 VAykcNgyDvtAVODP+4m6JvhjAoGBALbtTqErKN47V0+JJpapLnF0KxGrqeGIjIRV 32 cYA6V4WYGr7NeIfesecfOC356PyhgPfpcVyEztwlvwTKb3RzIT1TZN8fH4YBr6Ee 33 KTbTjefRFhVUjQqnucAvfGi29f+9oE3Ei9f7wA+H35ocF6JvTYUsHNMIO/3gZ38N 34 CPjyCMa9AoGBAMhsITNe3QcbsXAbdUR00dDsIFVROzyFJ2m40i4KCRM35bC/BIBs 35 q0TY3we+ERB40U8Z2BvU61QuwaunJ2+uGadHo58VSVdggqAo0BSkH58innKKt96J 36 69pcVH/4rmLbXdcmNYGm6iu+MlPQk4BUZknHSmVHIFdJ0EPupVaQ8RHT 37 -----END RSA PRIVATE KEY----- Note: hostKey and hostkeyAlgorithm are no necessary configuration items.\nDo Not forget to add public key to your gitHub settings.\nBy the way, if you already have an ssh key-pair in your local machine, just use it!\nReferring official guide to learn more about git backend: https://docs.spring.io/spring-cloud-config/docs/current/reference/html/#_spring_cloud_config_server\n3) Config sensitive info as env variables in Docker Compose # Use System Environment Variable.\n1docker compose run -e KEY_OF_ENV=value web python app.py 4) Debug Micro Service locally with docker and IDEA # Docker services:\nconfig server eureka server database IDEA services:\nlicensing service organization service IDEA services need some extra configurations(program arguments) to override config server's backend configuration.\nUse --key=value to do that.\n1--eureka.client.serviceUrl.defaultZone=http://localhost:8070/eureka 2--spring.datasource.url=jdbc:postgresql://localhost:5432/ostock_dev 3--spring.config.import=optional:configserver:http://localhost:8071 5) Spring-Cloud discovery client and loadbalancer # After introducing eureka client to licensing service, we also introduced spring-cloud-starter-loadbalancer and spring-cloud-starter-openfeign, which provide load-balance and microservice remote invoking ability to licensing service.\nThere 3 ways to achieve remote call, introduced by the book(microservice in action).\nDiscoveryClient (Without load balance) RestTemplate OpenFeign 5.1 DiscoveryClient (Not recommended) # To Use DiscoveryClient in Spring Cloud, just inject DiscoveryClient bean into services.\n1@Component 2public class OrganizationDiscoveryClient { 3 @Autowired 4 private DiscoveryClient discoveryClient; 5 6 /** 7 * No LoadBalanced 8 */ 9 public Organization getOrganization(String organizationId) { 10 RestTemplate restTemplate = new RestTemplate(); 11 List\u0026lt;ServiceInstance\u0026gt; instances = discoveryClient.getInstances(\u0026#34;organization-service\u0026#34;); 12 13 if (instances.isEmpty()) return null; 14 String serviceUri = String.format(\u0026#34;%s/v1/organization/%s\u0026#34;,instances.get(0).getUri().toString(), organizationId); 15 16 ResponseEntity\u0026lt; Organization \u0026gt; restExchange = 17 restTemplate.exchange( 18 serviceUri, 19 HttpMethod.GET, 20 null, Organization.class, organizationId); 21 22 return restExchange.getBody(); 23 } 24} DiscoveryClient actually get all service instances by service name you set in eureka client. The service name was set by spring.application,name property.\nAnd you could find out that DiscoveryClient was used to get remote service's url, and service was invoked by RestTemplate.\nAs you can see, there are still some 'hard code' in there, and DiscoveryClient always get the first service's url, which means Spring Cloud load-balance did not work in this scenario.\n5.2 RestTemplate with @LoadBalanced # If you want your RestTemplate run as load-balanced client, you need to config it with @LoadBalanced.\n1@LoadBalanced 2@Bean 3public RestTemplate getRestTemplate(){ 4 return new RestTemplate(); 5} Then you can use RestTemplate like this:\n1@Component 2public class OrganizationRestTemplateClient { 3 4 @Autowired 5 RestTemplate restTemplate; 6 7 public Organization getOrganization(String organizationId){ 8 ResponseEntity\u0026lt;Organization\u0026gt; restExchange = 9 restTemplate.exchange( 10 \u0026#34;http://organization-service/v1/organization/{organizationId}\u0026#34;, 11 HttpMethod.GET, 12 null, Organization.class, organizationId); 13 14 return restExchange.getBody(); 15 } 16} If you have more than 1 instances of organization service, the RestTemplate will query each instances Round-Robbin.\n5.3 OpenFeign # Spring Cloud integrates Eureka, Spring Cloud CircuitBreaker, as well as Spring Cloud LoadBalancer to provide a load-balanced http client when using Feign.\nBy using OpenFeign integrated with Spring Cloud, it already supported a load-balanced http-client.\nThe way to use OpenFeign is simple:\n1@FeignClient(\u0026#34;organization-service\u0026#34;) 2public interface OrganizationFeignClient { 3 4 @RequestMapping( 5 method= RequestMethod.GET, 6 value=\u0026#34;/v1/organization/{organizationId}\u0026#34;, 7 consumes=\u0026#34;application/json\u0026#34;) 8 Organization getOrganization(@PathVariable(\u0026#34;organizationId\u0026#34;) String organizationId); 9} Do not forget to annotate Main-class with @EnableFeignClients.\n5.4 Other approaches # Except ways mentioned above, there are other approaches to achieve RPC in Spring of course.\nSpring WebFlux is a alternative:\nWebClient WebFlux WebClient More information, read:\nhttps://docs.spring.io/spring-cloud-commons/docs/3.1.8/reference/html/#spring-cloud-loadbalancer https://docs.spring.io/spring-cloud-openfeign/docs/3.1.9/reference/html/ Using a ReactiveLoadBalanced WebClients # Filter UserContextFunctionFilter uses to transmit correlationId and other HTTP Headers like JWT while micro service invoking.\n1@Autowired 2ReactorLoadBalancerExchangeFilterFunction lbFunction; 3/** 4 * {@link WebClient} load balancer HTTP client 5 */ 6@Bean 7@LoadBalanced 8public WebClient.Builder getWebclient() { 9 return WebClient.builder().filters(f -\u0026gt; { 10 f.add(new UserContextFunctionFilter()); 11 f.add(lbFunction); 12 }); 13} And the UserContextFunctionFilter looks like:\n1public class UserContextFunctionFilter implements ExchangeFilterFunction { 2 @Override 3 public Mono\u0026lt;ClientResponse\u0026gt; filter(ClientRequest request, ExchangeFunction next) { 4 ClientRequest buildRequest = ClientRequest.from(request).headers(h -\u0026gt; { 5 h.add(UserContext.CORRELATION_ID, UserContextHolder.getContext().getCorrelationId()); 6 h.add(UserContext.AUTH_TOKEN, UserContextHolder.getContext().getAuthToken()); 7 }).build(); 8 return next.exchange(buildRequest); 9 } 10 11} There is a warning info by spring BeanPostProcessorAutoConfiguration:\n12024-12-17 08:29:57.580 INFO 1 --- [ main] trationDelegate$BeanPostProcessorChecker :Bean \u0026#39;org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration\u0026#39; of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 22024-12-17 08:29:57.594 INFO 1 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean \u0026#39;org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactorDeferringLoadBalancerFilterConfig\u0026#39; of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactorDeferringLoadBalancerFilterConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 32024-12-17 08:29:57.605 INFO 1 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean \u0026#39;reactorDeferringLoadBalancerExchangeFilterFunction\u0026#39; of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) This ...is not eligible for getting processed by all BeanPostProcessors info always causes by circle dependency.\nThis info Spring Cloud did not fix it officially yet.\nhttps://stackoverflow.com/questions/73782826/loadbalancerbeanpostprocessorautoconfiguration-is-not-eligible-for-getting-pro https://github.com/spring-cloud/spring-cloud-commons/pull/1361 "},{"id":3,"href":"/en/posts/2024/20240906_usage_of_hugo_shortcodes/","title":"Usage of Hugo Short Codes","section":"Blog","content":"Despiting all hugo internal shortcodes, I'v wrote or modified some shortcodes.\nThis page shows the usage of those shortcodes, especially customized shortcodes.\nHint # A customized shortcode based on hugo book theme.\nThere are 3 levels of hint: info warning and danger. And could be used like this:\n{{\u0026lt; hint info \u0026gt;}} This is customized shortcode `hint`, based on theme [Hugo Book](#hint). {{\u0026lt; /hint \u0026gt;}} Rendered as this:\n“ This is customized shortcode hint, based on theme Hugo Book.\n“ This is warning.\nmarkdown is still working\n“ Danger Zone. Link\nQuote # quote is real quotation. With new font style and text format. quote can be used when you quoting some classical literatures. Like:\n{{\u0026lt; quote \u0026gt;}} 相见欢·林花谢了春红 南唐·李煜 林花谢了春红，太匆匆。无奈朝来寒雨晚来风。 胭脂泪，相留醉，自是人生长恨水长东。 {{\u0026lt; /quote \u0026gt;}} Gives this:\n“ 相见欢·林花谢了春红 〔南唐〕 李煜 林花谢了春红，太匆匆。无奈朝来寒雨晚来风。\n胭脂泪，相留醉，自是人生长恨水长东。\nIf you want to make title and author placed in middle, use a boolean parameter true.\nSome ancient China Ci has a preface, you can make it font-size smaller than main text, use a \u0026lt;small\u0026gt; tag.\n{{\u0026lt; quote true \u0026gt;}} 摸鱼儿 金·元好问 \u0026lt;small\u0026gt;乙丑岁赴试并州...\u0026lt;p\u0026gt;\u0026lt;/small\u0026gt; // ... {{\u0026lt; /quote \u0026gt;}} “ 摸鱼儿 〔金〕 元好问 乙丑岁赴试并州，道逢捕雁者云：“今旦获一雁，杀之矣。其脱网者悲鸣不能去，竟自投于地而死。”予因买得之，葬之汾水之上，垒石为识，号曰“雁丘”。时同行者多为赋诗，予亦有《雁丘词》。旧所作无宫商，今改定之。\n问世间，情是何物，直教生死相许？天南地北双飞客，老翅几回寒暑。欢乐趣，离别苦，就中更有痴儿女。君应有语：渺万里层云，千山暮雪，只影向谁去？\n横汾路，寂寞当年箫鼓，荒烟依旧平楚。招魂楚些何\njiē 嗟 及，山鬼暗啼风雨。天也妒，未信与，莺儿燕子俱黄土。千秋万古，为留待骚人，狂歌痛饮，来访雁丘处。\nAdditionally, you can place all contents in middle.\nJust one more boolean parameter. (:-\n{{\u0026lt; quote true true \u0026gt;}} Sonnet 8 William Shakespeare Music to hear, why hear\u0026#39;st thou music sadly? Sweets with sweets war not, joy delights in joy. 长相思，摧心肝。 // ... {{\u0026lt; /quote \u0026gt;}} “ 长相思（其一） 〔唐〕 李白 长相思，在长安。\n络纬秋啼金井阑，微霜凄凄\ndiàn 簟 色寒。\n孤灯不明思欲绝，卷帷望月空长叹。\n美人如花隔云端。\n上有青冥之长天，下有渌水之波澜。\n天长路远魂飞苦，梦魂不到关山难。\n长相思，摧心肝。\nUpdated 2024-10-31 The PinYin Note were handled by quote shortcodes and displayed by css style.\n“ Sonnet 8 〔William Shakespeare〕 Music to hear, why hear'st thou music sadly?\nSweets with sweets war not, joy delights in joy.\nWhy lovest thou that which thou receivest not gladly,\nOr else receivest with pleasure thine annoy?\nIf the true concord of well-tuned sounds,\nBy unions married, do offend thine ear,\nThey do but sweetly chide thee, who confounds\nIn singleness the parts that thou shouldst bear.\nMark how one string, sweet husband to another,\nStrikes each in each by mutual ordering,\nResembling sire and child and happy mother\nWho all in one, one pleasing note do sing:\nWhose speechless song, being many, seeming one,\nSings this to thee: 'thou single wilt prove none.'\nHighlight Code # It's not the syntax highlighting, It's code line highlighting.\n“ The code syntax highlight should be preset, and enabled by default.\nBesides, you can customized them by using hugo to generate a code syntax style sheet:\nhugo gen chromastyles --style=themename \u0026gt; syntax.css Hugo supports chroma style code fence themes.\nHere is the discussion about syntax highlight: https://discourse.gohugo.io/t/unable-to-customize-the-syntax-highlight-colors/22140/4\n2 ways to achieve that.\nFirst approach is to setting highlight format in code fence, not recommended:\n``` python {linenos=inline,hl_lines=[3, \u0026#34;7-10\u0026#34;],linenostart=1} # ... Gives this:\n1def incr_with_x_threads(x, func, n): 2 # 列表推导式 3 threads = [Thread(target=func, args=(n,)) for i in range(x)] 4 start = time.time() 5 global shared_int 6 shared_int = 0 7 for t in threads: 8 t.start() 9 for t in threads: 10 t.join() 11 print(f\u0026#34;finished in {time.time() - start}\\n\u0026#34; 12 f\u0026#34;shared expected: {n * x}\\n\u0026#34; 13 f\u0026#34;shared actual: {shared_int}\\n\u0026#34; 14 f\u0026#34;difference: {n * x - shared_int}({100 - shared_int / n / x * 100}%)\u0026#34;) The way it configs the highlight line numbers is strange1. Isn't it?\nSecond way is recommended: using shortcode highlight.\nThis shortcode accepts 2 params:\nthe 1st one specifies the coding language, the 2nd param specifies line numbers to be highlighted. {{\u0026lt; highlight python \u0026#34;1 5-7\u0026#34; \u0026gt;}} def copy_file(target, dest): if os.path.exists(target) and os.path.isfile(target): if not os.path.exists(dest) or not os.path.isfile(dest): df = open(dest, \u0026#39;+xb\u0026#39;) with open(target, \u0026#39;rb\u0026#39;) as tf: while len((buffer := tf.read(1024))) \u0026gt; 0: df.write(buffer) df.close() else: print(\u0026#34;dest file exists.\u0026#34;) else: raise FileNotFoundError(\u0026#34;target file not found.\u0026#34;) {{\u0026lt; /highlight \u0026gt;}} Gives this:\n1def copy_file(target, dest): 2 if os.path.exists(target) and os.path.isfile(target): 3 if not os.path.exists(dest) or not os.path.isfile(dest): 4 df = open(dest, \u0026#39;+xb\u0026#39;) 5 with open(target, \u0026#39;rb\u0026#39;) as tf: 6 while len((buffer := tf.read(1024))) \u0026gt; 0: 7 df.write(buffer) 8 df.close() 9 else: 10 print(\u0026#34;dest file exists.\u0026#34;) 11 else: 12 raise FileNotFoundError(\u0026#34;target file not found.\u0026#34;) The code comments can also be highlighted.\n1/* 2It\u0026#39;s been a long day 3Without you my friend 4And I will tell you all about it when I see you again 5We\u0026#39;ve come a lone way 6From where we began 7And I will tell you all about it when I see you again 8*/ 9public static void main(String[] args){ 10 // ... 11 System.out.printf(\u0026#34;the cost of %s is %.2f\u0026#34;, \u0026#34;cola\u0026#34;, 1.99f); 12} Highlight Line # Customized a new shortcode named highline, which is used to highlight current paragraph.\nIt's simple to use:\n{{\u0026lt; highline \u0026gt;}} This line is **highlight**. {{\u0026lt; /highline \u0026gt;}} Gives this:\nThis line is highlight.\nAnd this line is normal.\nUpdate Info # A customized shortcode to add update tags to page. Simple to use:\n{{\u0026lt; update 2024-09-19 \u0026gt;}} This is page update info. {{\u0026lt; /update \u0026gt;}} Updated 2024-09-19 This is page update info.\nAudio # There are many ways to play audio on HTML. Here are 2 simple solution(3rd open-source api used).\nA simple audio player implemented by plyr:\n{{\u0026lt; audio \u0026#34;/audio/宋冬野-安和桥.mp3\u0026#34; \u0026#34;安和桥-宋冬野\u0026#34; \u0026gt;}} 安和桥-宋冬野 Another simple music player implemented by APlayer:\naplayer shortcode was used as hugo module, and it's quite easy to use, just import the module.\n“ The aplayer shortcode need a / before ending, else you need to add another close tag, do not know why.\n{{\u0026lt; aplayer name=\u0026#34;安和桥\u0026#34; artist=\u0026#34;宋冬野\u0026#34; url=\u0026#34;/audio/宋冬野-安和桥.mp3\u0026#34; cover=\u0026#34;/audio/anheqiao.jpg\u0026#34; /\u0026gt;}} Code # This shortcode aims to insert source code file into markdown pages. With this shortcode, there's no need to copy/paste any code by using ```java``` code fence.\nUsage:\n1{{\u0026lt; code \u0026#39;Foo.java\u0026#39; \u0026gt;}} will give this (code of foo.java):\n1public class Foo { 2 // 3} hl_lines=[3, \u0026quot;4-6\u0026quot;]？Why number ahead and string behind(double quoted)?\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":4,"href":"/en/posts/2024/20240905_customized_blog/","title":"What I'v done to customize this  blog","section":"Blog","content":"I'v done little work to make this blog a little more 'personalized'.\nHere I marked them down, in case of forgotten.\nFront-matters # Item Type Default Value Explanation BookToC Boolean true true to enable TOC manually. BookComments Boolean true trueto enable page comments. copyright Boolean true true to show page copyright info. In case some pages do not need to show that. snippets Boolean false true indicates this page is generated by another versioned code snippets. showTitle Boolean true true to show page title, but not all page needs to show that title. BookIndex Boolean false true indicates the page is a _index.md page. A _index.md generally shows the abstraction about contents in folder. Index page does not have to show next/prev navigation and related page links. BookFooter(deprecated) Boolean true true to enable book footer. Now integrated with front-matters. type String - setting type: memos to avoid page be archived. Settings # 1params: 2 notArchivedTypes: [intro, about, memos] #not archive page types 3 archiveGroupByDate: Jan 2006 #archive date format 4# 分页参数 5 archivePaginate: 20 # default page size Shortcodes # hint: based on theme, used to show info clearly. quote: literature quotation. highlight: highlight code lines. Extra system config needed.\nhighline: highlight line. update: content update note. audio: audio player powered by pylr. aplayer: music player powered by Aplayer. See usage of hugo shortcodes\nPartials # back-to-top button comments: powered by giscus. post-meta: display necessary post-meta of page. new navi-bar: whole new website display, takes lot of time because my poor learning of js :-). new toc: re-designed table of contents. next-previous page index: index of next/previous page of same categories. related pages: recommended pages, easy to see. Extra system config needed.\nmultilingual: multi-language switch. copyright: yes, copyright info at page bottom. Others # archive page: yes, archive page. Extra system config needed.\nmemo page: memorandums. snippets: directly embed code snippet(from vc) to post, quite cool staff. "},{"id":5,"href":"/en/about/","title":"About","section":"Home","content":" The name # A studio album released by Pink Floyed in November 2014 was named The Endless River. Known as the last album by the famous England rock band. Also the band I love the most personally. So, I use 'endlessriver' as my personal blog name, showing respect to their great contribution to the modern music era.\nBy the way, High Hopes is my beloved through all rocks I ever listened. ^=^\nThe blog # The blog was built around late 2019, driven by a Golang static blog generator named Hugo. And Zoo was the theme at the very begining. Almost 4 years later, I chose Book theme as substitute to make it simple. The thing I want to do was focus on content itself but not the conten style. Though it really took my time to customize some tiny features like front-mata, copyright, back-to-top etcetra.\nAnd yet, the srollspy TOC was still in the air. :-)\nThe content # Most contents were like Learning Notes, especially those contents about Java/Python. Contents were written after reading Books like TIJ, TIP, or offical docs about all programming languages, or referring to excellent blogs writtern by others.\nAll code snipptes showed in contents can be find in this Repo.\nDue to this, this blog looks more like a doc page, which theme Book is desgined for docs.\nAlso, there are some 'practical guides' type contents, but not that much. I should write more blogs like that, I think. /*\\\nBesides, I was thought to translate some English posts. Now I perfer to quote them or write some.\nThe author # Learning coding all by self, by passion, by love. But obstacles everywhere. Don't know how long can I persist in doing this. Sounds sad, but it's truth. (-:\n"}]