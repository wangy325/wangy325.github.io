<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>线程池 on EndlessRiver</title><link>https://wangy325.github.io/zh/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><description>Recent content in 线程池 on EndlessRiver</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>wangy325@qq.com (wangy325)</managingEditor><webMaster>wangy325@qq.com (wangy325)</webMaster><copyright>&amp;copy;2019-{year}, All Rights Reserved</copyright><lastBuildDate>Tue, 10 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://wangy325.github.io/zh/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>Java并发系列之8——计划执行任务</title><link>https://wangy325.github.io/zh/posts/java/concurrency/8%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Sun, 19 Jun 2022 06:05:34 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/concurrency/8%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</guid><description>&lt;p>除了ThreadPoolExecutor之外，Java执行器（Executor）框架还提供了可以在指定延迟之后执行一次或周期执行任务的接口&lt;code>ScheduledExecutorService&lt;/code>，较&lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Timer.html">java.util.Timer&lt;/a>而言，它是更好的选择&lt;/p>
&lt;p>与&lt;a href="../%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#3-%E7%BA%BF%E7%A8%8B%E6%B1%A0">线程池&lt;/a>不同的是，用于计划执行的&lt;code>ScheduledThreadPoolExecutor&lt;/code>使用&lt;code>ScheduledFutureTask&lt;/code>作为任务，使用&lt;code>DelayedWorkQueue&lt;/code>作为任务队列，以实现计划（周期）执行的目的&lt;/p>
&lt;p>&lt;img src="https://wangy325.github.io/img/scheduledFutureTask.png" alt="xx" />&lt;/p>
&lt;p style="text-align:center; font-size:.9rem; font-style:italic">ScheduledThreadPoolExecutor继承关系图&lt;/p>
&lt;p>从&lt;code>ScheduledThreadPoolExecutor&lt;/code>的继承关系图可以看到，其是&lt;code>ThreadPoolExecutor&lt;/code>的导出类，其提交任务和执行任务以及关闭线程池的逻辑应和线程池相差无几，其重点差别在于&lt;strong>任务对象以及任务队列&lt;/strong>的封装上，后文将会详述&lt;code>ScheduledThreadPoolExecutor&lt;/code>的任务计划执行以及周期执行机制&lt;/p></description><dc:creator>wangy325</dc:creator><category>线程池</category><category>执行器</category><category>并发</category></item><item><title>Java并发系列之7——执行器与线程池</title><link>https://wangy325.github.io/zh/posts/java/concurrency/7%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Sun, 19 Jun 2022 06:05:34 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/concurrency/7%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid><description>&lt;p>Java并发系列的文章到目前为止，虽然没有特别说明，但是使用执行器(Executor(s))的次数已经难以计数了，&lt;code>Executors&lt;/code>提供了一些非常方便的静态方法，可以根据需要创建不同的&lt;code>ExecutorService&lt;/code>，然后调用其&lt;code>execute(Runnable)&lt;/code>或&lt;code>submit(Callable&amp;lt;T&amp;gt;)&lt;/code>方法。在多线程的条件下，执行器还有一个非常明显的优势，它使用线程池管理线程，避免了系统创建和销毁线程的开销。在一般的Java并发过程中，也建议使用执行器完成任务而非显式地创建线程。&lt;/p>
&lt;p>本文将从执行器开始，阐述Java中的线程池。&lt;/p>
&lt;h1 id="1-executors">1 Executors&lt;/h1>
&lt;p>&lt;code>java.util.concurrent.Executors&lt;/code>类提供了许多静态方法来获取不同类型的 &lt;strong>线程池&lt;/strong>，下表列出其常用方法&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">方法&lt;/th>
&lt;th align="left">概要&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">newFixedThreadPool&lt;/td>
&lt;td align="left">创建固定大小的线程池，线程会一直保留&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">newCachedThreadPool&lt;/td>
&lt;td align="left">创建线程池，该线程池在必要时创建新线程，旧线程也会被重用，线程空闲60s被销毁&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">newSingleThreadExecutor&lt;/td>
&lt;td align="left">相当于newFixedThreadPool(1)，其能保证任务顺序执行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">newScheduledThreadPool&lt;/td>
&lt;td align="left">用于预定执行一次或周期执行的线程池&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">newSingleThreadScheduledExecutor&lt;/td>
&lt;td align="left">用于预定执行一次或周期执行的单线程池&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p style="text-align:center; font-size:.9rem; font-style:italic">Executors用于构造线程池的部分方法&lt;/p>
&lt;p>上表中的前3个方法返回&lt;code>ThreadPoolExecutor&lt;/code>实例，后面2个方法返回&lt;code>ScheduledExecutorService&lt;/code>接口的实例，不管是ThreadPoolExecutor或是ScheduledExecutorService，都是&lt;code>ExecutorService&lt;/code>的实现，&lt;code>ExecutorService&lt;/code>接口是设计用来处理任务的接口，其顶层接口是&lt;code>java.util.concurrent.Executor&lt;/code>，该接口简单地定义了一个执行任务的方法：&lt;/p></description><dc:creator>wangy325</dc:creator><category>执行器</category><category>线程池</category><category>并发</category></item></channel></rss>