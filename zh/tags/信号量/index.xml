<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>信号量 on EndlessRiver</title><link>https://wangy325.github.io/zh/tags/%E4%BF%A1%E5%8F%B7%E9%87%8F/</link><description>Recent content in 信号量 on EndlessRiver</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>wangy325@qq.com (wangy325)</managingEditor><webMaster>wangy325@qq.com (wangy325)</webMaster><copyright>&amp;copy;2019-{year}, All Rights Reserved</copyright><lastBuildDate>Mon, 16 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://wangy325.github.io/zh/tags/%E4%BF%A1%E5%8F%B7%E9%87%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>Java并发系列之9——倒计时门闩、信号量、交换器及其他</title><link>https://wangy325.github.io/zh/posts/java/concurrency/9%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BB%84%E4%BB%B6/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Sun, 19 Jun 2022 06:05:34 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/concurrency/9%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BB%84%E4%BB%B6/</guid><description>&lt;p>Java 1.5以后的并发类库新加入了一些用于解决并发问题的新构件，合理地使用这些构件能够帮助我们写出更加简单且健壮的并发程序。本节内容介绍&lt;code>java.util.concurrent&lt;/code>包中一些具有代表性的构件，包括&lt;/p>
&lt;ul>
&lt;li>CountDownLatch&lt;/li>
&lt;li>CyclicBarrier&lt;/li>
&lt;li>Semaphore&lt;/li>
&lt;li>Exchanger&lt;/li>
&lt;li>DelayQueue&lt;/li>
&lt;li>PriorityBlockingQueue&lt;/li>
&lt;/ul>
&lt;h1 id="1-countdownlatch">1 CountDownLatch&lt;/h1>
&lt;p>在讨论线程的基本概念时，我们说过&lt;code>join()&lt;/code>方法可使当前线程等待调用join方法的线程执行完，可以实现简单的&lt;a href="../%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%B8%80/#9-%E5%8A%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8Bjoin">无锁同步&lt;/a>，使用CountDownLatch可以更加简单的实现这一目的。毕竟，&lt;code>join()&lt;/code>方法的语义“加入一个线程”不是很容易就能让人理解。相较于&lt;code>join()&lt;/code>方法，CountDownLatch的语义就明确多了。&lt;/p>
&lt;p>在有些文档上，将CountDownLatch译为&amp;quot;倒计时门闩【shuān】&amp;quot;，其维护一个计数器，这个计数器在CountDownLatch初始化之后便&lt;strong>不能重置&lt;/strong>。在CountDownLatch上调用&lt;code>countDown()&lt;/code>方法来将计数值减1，调用这个方法并不会引起阻塞。不过，在这个计数器为0之前，任何调用CountDownLatch的&lt;code>await()&lt;/code>方法的任务都将阻塞。&lt;/p>
&lt;p>CountDownLatch的典型用法是将一个任务分割为n个可以独立解决的部分，并创建一个计数器值为n的CountDownLatch，在每个任务完成时，调用&lt;code>countDown()&lt;/code>方法将计数器减1，在等待所有任务完成的线程上调用&lt;code>await()&lt;/code>方法，将任务阻塞，知道计数器为0之后再继续运行。&lt;/p></description><dc:creator>wangy325</dc:creator><category>信号量</category><category>交换器</category><category>并发</category></item></channel></rss>