<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>synchronized on EndlessRiver</title>
    <link>/zh/tags/synchronized/</link>
    <description>Recent content in synchronized on EndlessRiver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>wangy325@qq.com (wangy325)</managingEditor>
    <webMaster>wangy325@qq.com (wangy325)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Wed, 20 May 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/zh/tags/synchronized/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Java并发系列之2——资源访问受限</title>
        <link>/zh/posts/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90/</link>
        <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Fri, 17 Jun 2022 14:24:34 +0800</atom:modified>
        <guid>/zh/posts/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90/</guid>
        <description>&lt;p&gt;在&lt;a href=&#34;../1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1&#34;&gt;上一篇文章&lt;/a&gt;中，虽然创建了多线程，并且线程之间出现了一些&lt;strong&gt;不可预测&lt;/strong&gt;的CPU调度，但是由于线程之间是&lt;strong&gt;相互隔离&lt;/strong&gt;的——&lt;strong&gt;线程没有访问共同的资源&lt;/strong&gt;，尽管在执行任务的过程可能被CPU剥夺运行权，但是当它们再次获得运行权时对运行结果并没有影响，它们是安全的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上，上篇文章通过&lt;code&gt;join()&lt;/code&gt;方法演示了一种安全访问共享资源的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;考虑一种情况，如果&lt;strong&gt;多个线程访问同一资源&lt;/strong&gt;，并对资源内容进行修改，会发生什么情况？&lt;/p&gt;
&lt;p&gt;对于&lt;strong&gt;非原子性&lt;/strong&gt;操作，多线程下会出现&lt;strong&gt;竞争条件&lt;/strong&gt;。例如，对于操作&lt;code&gt;accounts[to] += amount&lt;/code&gt;，可以被拆分为多个CPU指令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加载accounts[to]到寄存器&lt;/li&gt;
&lt;li&gt;增加amount&lt;/li&gt;
&lt;li&gt;将结果写回acounts[to]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述3个步骤中，线程执行到&lt;strong&gt;任一步骤&lt;/strong&gt;时都可能被剥夺运行权。&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>锁</category>
            
          
            
              <category>synchronized</category>
            
          
            
              <category>volatile</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>