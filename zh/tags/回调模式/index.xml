<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>回调模式 on EndlessRiver</title><link>https://wangy325.github.io/zh/tags/%E5%9B%9E%E8%B0%83%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 回调模式 on EndlessRiver</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>wangy325@qq.com (wangy325)</managingEditor><webMaster>wangy325@qq.com (wangy325)</webMaster><copyright>&amp;copy;2019-{year}, All Rights Reserved</copyright><lastBuildDate>Tue, 16 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://wangy325.github.io/zh/tags/%E5%9B%9E%E8%B0%83%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>Java接口回调</title><link>https://wangy325.github.io/zh/posts/java/design_pattern/java%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Fri, 26 Aug 2022 06:22:06 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/design_pattern/java%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</guid><description>&lt;p>回调模式在web开发中用的较多，本文简单介绍了Java的回调机制，理解此文可以在生产中写出适应业务的回调模型。&lt;/p>
&lt;h2 id="模块之间的调用">模块之间的调用&lt;/h2>
&lt;p>在一个应用系统中，必然存在模块之间的调用，调用的方式有几种:&lt;/p>
&lt;h3 id="1-同步调用">1. 同步调用&lt;/h3>
&lt;p>&lt;a href="https:/imgchr.com/i/iZXPMQ">&lt;img src="https://s1.ax1x.com/2018/09/18/iZXPMQ.md.png" alt="iZXPMQ.md.png" />&lt;/a>&lt;/p>
&lt;p>​ &lt;em>方法A()调用方法B(),并且等待方法B()的返回,然后A()再执行下一步操作&lt;/em>&lt;/p>
&lt;p>此方法适用于B()方法&lt;strong>执行的时间不长&lt;/strong>，如若不然，那么A()方法会长时间等待B()方法执行完成而处于&lt;strong>阻塞&lt;/strong>状态，如此，可能会导致整个流程的阻塞。&lt;/p></description><dc:creator>wangy325</dc:creator><category>回调模式</category><category>java</category></item></channel></rss>