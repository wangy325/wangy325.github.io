<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Endless River</title><link>https://wangy325.github.io/zh/categories/java/</link><description>Recent content in Java on Endless River</description><generator>Hugo</generator><language>zh</language><lastBuildDate>Wed, 07 Aug 2024 16:20:46 +0800</lastBuildDate><atom:link href="https://wangy325.github.io/zh/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>线程与任务(一)</title><link>https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1_1/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1_1/</guid><description>&lt;p>&lt;strong>并发&lt;/strong>的本质是多个线程同时处理某个任务&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，&lt;del>不同于进程&lt;/del>，线程可以访问同一共享资源（临界资源），当程序不够健壮时，使用多线程就可能带来问题，这是要反复讨论并发的原因之一。&lt;/p>
&lt;p>在Java中，必须明白一点：线程由Thread类启动，但Thread类并不执行任何操作，&lt;strong>它只是驱动赋予它的任务&lt;/strong>。因此将&lt;strong>线程与任务&lt;/strong>的概念区分开，有利于理解并发。&lt;/p>
&lt;p>实际上，开发过程中线程与任务（的联系）被隔离的更加明显，往往不需要显式地声明(创建)线程，然后将任务（声明任务是必须的）分配给线程，并由线程负责驱动（ &lt;em>allocate task to thread to execute&lt;/em> ），这一过程通常由&lt;strong>线程池&lt;/strong>完成 。&lt;/p></description></item><item><title>ArrayList</title><link>https://wangy325.github.io/zh/docs/java/collections/1_List_arraylist/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/1_List_arraylist/</guid><description>&lt;p>&lt;code>ArrayList&lt;/code>是Java集合框架中使用最为频繁的实现，其本质是一个&lt;strong>有序的&lt;/strong>可自由扩容的&lt;strong>对象数组&lt;/strong>。它实现了&lt;code>RandomAccess&lt;/code>这个&lt;strong>标记接口&lt;/strong>，意味着其在随机访问性能上有一定优势。&lt;/p></description></item><item><title>访问权限修饰符</title><link>https://wangy325.github.io/zh/docs/java/basic/1_%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/1_%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid><description>&lt;h1 id="访问权限修饰符">
 访问权限修饰符
 &lt;a class="anchor" href="#%e8%ae%bf%e9%97%ae%e6%9d%83%e9%99%90%e4%bf%ae%e9%a5%b0%e7%ac%a6">#&lt;/a>
&lt;/h1>
&lt;blockquote>
&lt;p>本系列内容主要来自TIJ，Java核心技术卷以及Java SE 8 API&lt;/p>
&lt;/blockquote>
&lt;p>介绍了Java的public、default、protected、private四种访问权限修饰符。&lt;/p></description></item><item><title>SpringBoot使用AOP的简单示例</title><link>https://wangy325.github.io/zh/docs/java/spring/SpringBoot-aop-demo/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/spring/SpringBoot-aop-demo/</guid><description>&lt;p>有一个cd接口，其实体类用于播放歌曲，同时我们想在播放歌曲的时候记录每个曲目的播放次数。看起来，记录次数这个事和播放曲目是不相干的事情，当然，我们可以在每首歌曲播放完成之后记录，但是更好的办法是使用一个切面，切入到播放方法中，来完成这件事，这样可以减少无关逻辑对代码的侵入。&lt;/p></description></item><item><title>在SpringBoot中使用MessageSource</title><link>https://wangy325.github.io/zh/docs/note/translations/use-springboot-messagesource/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/note/translations/use-springboot-messagesource/</guid><description>&lt;blockquote>
&lt;p>&lt;span id="hook">几个说明&lt;/span>：&lt;/p>
&lt;ol>
&lt;li>&lt;del>properties配置文件中，&lt;code>spring.messages.basename&lt;/code>&lt;strong>必须&lt;/strong>要加classpath前缀。如 &lt;code>spring.messages.basename=classpath:i18n/messages&lt;/code>&lt;/del>；&lt;/li>
&lt;li>&lt;del>必须要手动配置&lt;code>MessageSource&lt;/code>，springboot不会自动配置之&lt;/del>；&lt;/li>
&lt;li>如果使用&lt;code>MessageSource.getMessage()&lt;/code>方法，第一个参数的引用形式为&lt;code>&amp;quot;code&amp;quot;&lt;/code>，而不是&lt;code>&amp;quot;{code}&amp;quot;&lt;/code>或者&lt;code>&amp;quot;${code}&amp;quot;&lt;/code>。如messageSource.getMessage(&amp;ldquo;test.msg&amp;rdquo;, null, &lt;del>Locale.getDefault()&lt;/del>)；&lt;/li>
&lt;li>在配置&lt;code>LocalValidatorFactoryBean&lt;/code>之后，才可以在&lt;code>javax.validation.constraints&lt;/code>包下的注解（&lt;code>@Size&lt;/code>，&lt;code>@NotNull&lt;/code>&amp;hellip;）下的&lt;em>&lt;strong>message&lt;/strong>&lt;/em>属性中使用&lt;code>&amp;quot;{code}&amp;quot;&lt;/code>的形式声明校验提示信息。如
&lt;code>@NotNull(message = &amp;quot;{leftTime.not.null}&amp;quot;)&lt;/code>；&lt;/li>
&lt;li>springMVC的locale配置和JVM的locale配置不一样，在application.properties中配置的&lt;code>spring.mvc.locale=zh_CN&lt;/code>实际上配置的是&lt;code>WebMvcProperties&lt;/code>，在获取消息时，locale信息应该使用&lt;code>webMvcProperties.getLocale()&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>获取&lt;strong>而不是&lt;/strong>使用&lt;code>Locale.getDefault()&lt;/code>获取。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;hr>
&lt;p>MessageSource is a powerful feature available in Spring applications. This helps application developers handle various complex scenarios with writing much extra code, such as environment-specific configuration, internationalization or configurable values.&lt;/p>
&lt;p>One more scenario could be modifying the default validation messages to more user-friendly/custom messages.&lt;/p>
&lt;p>In this tutorial, we&amp;rsquo;ll see how to configure and manage custom validation MessageSource in the application using Spring Boot.&lt;/p></description></item><item><title>线程与任务(二)</title><link>https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1_2/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1_2/</guid><description>&lt;p>
 &lt;a href="https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1_1/">第一篇文章&lt;/a>中，讨论了线程与任务的概念，以及利用任务（&lt;em>Runnable接口&lt;/em>）来创建线程。&lt;/p>
&lt;p>同时，讨论了线程的生命周期。此外，介绍了线程的优先级以及守护线程这两个实用性不高的概念。&lt;/p>
&lt;p>最后，讨论了线程的中断状态这个概念。线程的中断状态以及如何响应中断，对于理解线程的运行机制很重要。&lt;/p>
&lt;p>这一篇，继续讨论几个线程相关的概念，包括：&lt;/p>
&lt;ul>
&lt;li>线程的让步&lt;/li>
&lt;li>等待线程加入&lt;/li>
&lt;li>自管理线程&lt;/li>
&lt;li>处理线程的异常&lt;/li>
&lt;/ul></description></item><item><title>LinkedList</title><link>https://wangy325.github.io/zh/docs/java/collections/1_List_linkedlist/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/1_List_linkedlist/</guid><description>&lt;p>&lt;code>LinkedList&lt;/code>是基于&lt;strong>双向链表&lt;/strong>实现的有序集合，&lt;del>其不能像ArrayList一样通过索引(&lt;em>index&lt;/em>)访问元素&lt;/del>，同时&lt;code>LinkedList&lt;/code>还实现了&lt;code>Deque&lt;/code>接口，意味着&lt;code>LinkedList&lt;/code>可以&lt;strong>实现双端队列的操作&lt;/strong>。&lt;/p></description></item><item><title>static关键字</title><link>https://wangy325.github.io/zh/docs/java/basic/2_static%E5%85%B3%E9%94%AE%E5%AD%97/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/2_static%E5%85%B3%E9%94%AE%E5%AD%97/</guid><description>&lt;h1 id="static关键字">
 static关键字
 &lt;a class="anchor" href="#static%e5%85%b3%e9%94%ae%e5%ad%97">#&lt;/a>
&lt;/h1>
&lt;p>static关键字意为“静态的”，其语义可以理解为“类的对象”(不要理解为Class对象)，即不需要对象实例，可以直接通过&lt;code>类名.字段名&lt;/code>的形式直接访问。&lt;/p></description></item><item><title>在SpringBoot项目中使用MockMvc进行接口测试</title><link>https://wangy325.github.io/zh/docs/java/spring/%E5%9C%A8SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MockMvc%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/spring/%E5%9C%A8SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MockMvc%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>现在流行在项目中使用
 &lt;a href="https://swagger.io">swagger&lt;/a>对接口进行测试，这确实很方便、直观。&lt;/p>
&lt;p>但是MockMvc作为spring-test包中指定的测试框架，在没有使用swagger的项目中，使用其进行测试是很好的选择。&lt;/p></description></item><item><title>资源访问受限--引论</title><link>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90_1/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90_1/</guid><description>&lt;p>在
 &lt;a href="https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1_1/">线程与任务&lt;/a>文中，虽然创建了多线程，并且线程之间出现了一些&lt;strong>不可预测&lt;/strong>的CPU调度，但是由于线程之间是&lt;strong>相互隔离&lt;/strong>的——&lt;strong>线程没有访问共同的资源&lt;/strong>，尽管在执行任务的过程可能被CPU剥夺运行权，但是当它们再次获得运行权时对运行结果并没有影响，它们是安全的。&lt;/p>
&lt;blockquote>
&lt;p>实际上，上篇文章通过&lt;code>join()&lt;/code>方法演示了
 &lt;a href="https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1_2/#%e7%ae%80%e5%8d%95%e7%9a%84%e6%97%a0%e9%94%81%e5%90%8c%e6%ad%a5">一种安全访问共享资源的方法&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>考虑一种情况，如果&lt;strong>多个线程访问同一资源&lt;/strong>，并对资源内容进行修改，会发生什么情况？&lt;/p>
&lt;p>对于&lt;strong>非原子性&lt;/strong>操作，多线程下会出现&lt;strong>竞争条件&lt;/strong>。例如，对于操作&lt;code>accounts[to] += amount&lt;/code>，可以被拆分为多个CPU指令：&lt;/p>
&lt;ol>
&lt;li>加载accounts[to]到寄存器&lt;/li>
&lt;li>增加amount&lt;/li>
&lt;li>将结果写回acounts[to]&lt;/li>
&lt;/ol>
&lt;p>上述3个步骤中，线程执行到&lt;strong>任一步骤&lt;/strong>时都可能被剥夺运行权。&lt;/p>
&lt;p>如此一来，最后的结果就变得不可预测。&lt;/p></description></item><item><title>Queue</title><link>https://wangy325.github.io/zh/docs/java/collections/2_Queue/</link><pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/2_Queue/</guid><description>&lt;p>Queue（队列），实际开发过程中，&lt;del>在单线程环境下&lt;/del>使用的并不多，Queue作为集合框架中重要组成似乎习惯性被忽略。队列总是先持有元素，再处理元素&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>
 &lt;img src="https://wangy325.github.io/img//collections/Queue.png" alt="J7NBrQ.png" />&lt;/p>
&lt;p style="color:grey;text-align:center;font-size:.8rem;font-style:italic">Queue继承关系简图&lt;/p></description></item><item><title>传值还是传引用</title><link>https://wangy325.github.io/zh/docs/java/basic/3_%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/3_%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/</guid><description>&lt;h1 id="传值还是传引用">
 传值还是传引用
 &lt;a class="anchor" href="#%e4%bc%a0%e5%80%bc%e8%bf%98%e6%98%af%e4%bc%a0%e5%bc%95%e7%94%a8">#&lt;/a>
&lt;/h1>
&lt;p>Java语言设计总是&lt;strong>按值调用&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>按值调用：方法接收的是调用者提供的值&lt;/p>
&lt;p>按引用调用：方法接收的是调用者提供的变量地址&lt;/p>
&lt;/blockquote>
&lt;p>一个方法可以修改传递引用所对应的变量值，但是不能修改传递值所对应的变量值。&lt;/p></description></item><item><title>spring声明式事务的使用</title><link>https://wangy325.github.io/zh/docs/java/spring/spring-transaction-propagation/</link><pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/spring/spring-transaction-propagation/</guid><description>&lt;h2 id="1-从transactional注解开始">
 1 从&lt;code>@Transactional&lt;/code>注解开始
 &lt;a class="anchor" href="#1-%e4%bb%8etransactional%e6%b3%a8%e8%a7%a3%e5%bc%80%e5%a7%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>@Transactional&lt;/code>注解是使用spring-transaction的最便捷方式。也是使用Spring框架开发最先接触的内容。&lt;/p>
&lt;p>当你在一个服务的方法上使用&lt;code>@Transactional&lt;/code>注解时，意味着你希望为此方法开启事务支持。如果你的项目成功配置了&lt;strong>数据源&lt;/strong>和&lt;strong>事务管理器&lt;/strong>，Spring会为此方法使用如下默认设置开启事务：&lt;/p></description></item><item><title>锁和条件</title><link>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90_2_%E9%94%81%E5%92%8C%E6%9D%A1%E4%BB%B6/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90_2_%E9%94%81%E5%92%8C%E6%9D%A1%E4%BB%B6/</guid><description>&lt;h2 id="可重入锁">
 可重入锁
 &lt;a class="anchor" href="#%e5%8f%af%e9%87%8d%e5%85%a5%e9%94%81">#&lt;/a>
&lt;/h2>
&lt;p>Java SE 5之后提供了位于&lt;code>java.util.concurrent.locks&lt;/code>包下的显式&lt;strong>互斥机制&lt;/strong>——Lock对象（显式锁），Lock对象必须被&lt;strong>显式的创建，锁定和释放&lt;/strong>。&lt;/p>
&lt;p>一般情况下 ，ReentrantLock保护代码块的基本结构是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>myLock.&lt;span style="color:#a6e22e">lock&lt;/span>(); &lt;span style="color:#75715e">// 可重入锁&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 临界区代码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;span style="color:#66d9ef">finally&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> myLock.&lt;span style="color:#a6e22e">unlock&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个结构可以确保同一时间只有&lt;strong>一个线程&lt;/strong>进入临界区( &lt;em>critical section&lt;/em> )，其他线程调用&lt;code>lock()&lt;/code>时会被阻塞，直到第一个线程释放锁。&lt;/p></description></item><item><title>Set</title><link>https://wangy325.github.io/zh/docs/java/collections/3_Set/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/3_Set/</guid><description>&lt;p>&lt;code>Set&lt;/code>是&lt;strong>不含重复元素的集&lt;/strong>，严格来讲，&lt;code>Set&lt;/code>不允许当&lt;code>e1.equals(e2)&lt;/code>为真时， &lt;em>e1&lt;/em> 和 &lt;em>e2&lt;/em> 同时出现在集合中。&lt;code>Set&lt;/code>最多允许一个&lt;code>null&lt;/code>元素。&lt;/p>
&lt;p>将&lt;strong>可变对象&lt;/strong>置入&lt;code>Set&lt;/code>时需要特别小心，当对象的改动影响到了元素之间的&lt;code>equals()&lt;/code>比较的结果，那么&lt;code>Set&lt;/code>的行为就变得不确定了。因此，&lt;strong>不能将Set本身作为Set的元素&lt;/strong>。&lt;/p></description></item><item><title>final关键字</title><link>https://wangy325.github.io/zh/docs/java/basic/4_final%E5%85%B3%E9%94%AE%E5%AD%97/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/4_final%E5%85%B3%E9%94%AE%E5%AD%97/</guid><description>&lt;h1 id="final关键字">
 final关键字
 &lt;a class="anchor" href="#final%e5%85%b3%e9%94%ae%e5%ad%97">#&lt;/a>
&lt;/h1>
&lt;p>不同的使用环境下，&lt;code>final&lt;/code>关键字的含义有细微差别，但通常它指“这是无法改变的”。&lt;/p></description></item><item><title>synchronized关键字</title><link>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90_3_synchronized/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90_3_synchronized/</guid><description>&lt;p>自Java 1.0开始，每一个对象都有一个隐式&lt;strong>内部锁&lt;/strong>（ &lt;em>intrinsic lock&lt;/em> ），在Java API Specification中通常被称为&lt;strong>监视器&lt;/strong>（ &lt;em>monitor&lt;/em> ）。这个内部锁由&lt;code>synchronized&lt;/code>关键字提供支持。&lt;code>synchronized&lt;/code>关键字的语义就是“同步的”，这意味着使用这个关键字可以处理共享资源的冲突。&lt;/p>
&lt;p>当访问被&lt;code>synchronized&lt;/code>关键字保护的方法或代码块时，它将检查锁能否获得——&lt;strong>这个锁可以是当前类对象的锁，也可以是一个临时锁&lt;/strong>( &lt;em>ad-hoc lock&lt;/em> )，取决你如何使用，任务执行完成之后会释放锁。&lt;/p>
&lt;p>和&lt;code>ReentrantLock&lt;/code>一样，&lt;code>synchronized&lt;/code>关键字获取的锁也是&lt;strong>独占锁&lt;/strong>，并且也是“可重入”的，某个任务可以多次获得对象的锁，并由计数器维护获得锁的次数，当退出一个方法时，计数器-1，完全退出时，才释放锁，这和可重入锁的机制是一样的。&lt;/p></description></item><item><title>HashMap和TreeMap</title><link>https://wangy325.github.io/zh/docs/java/collections/4_Map_hash_tree_map/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/4_Map_hash_tree_map/</guid><description>&lt;p>由于&lt;code>Map&lt;/code>的键是&lt;code>Set&lt;/code>，因此使用可变对象作为&lt;code>Map&lt;/code>的key时，&lt;strong>需要覆盖 &lt;em>equals&lt;/em> 和 &lt;em>hashCode&lt;/em> 方法&lt;/strong>，&lt;strong>Map不能使用自身作为key&lt;/strong>。&lt;/p>
&lt;p>Java 8对&lt;code>Map&lt;/code>接口进行了优化，新增了主要是针对&lt;strong>函数式接口&lt;/strong>的 &lt;em>默认&lt;/em> 方法（方法体被省略）：&lt;/p>
&lt;pre>&lt;code>default V merge (K key, V value,
 BiFunction&amp;lt;? super V, ? super V, ? extends V&amp;gt; remappingFunction) {...}
default V compute (K key,
 BiFunction&amp;lt;? super K, ? super V, ? extends V&amp;gt; remappingFunction) {...}
default V computeIfPresent (K key,
 BiFunction&amp;lt;? super K, ? super V, ? extends V&amp;gt; remappingFunction) {...}
default V computeIfAbsent (K key,
 Function&amp;lt;? super K, ? extends V&amp;gt; mappingFunction) {...}
default V replace (K key, V value) {...}
default boolean replace(K key, V oldValue, V newValue) {...}
default boolean remove (Object key, Object value) {...}
default V putIfAbsent (K key, V value) {...}
default void replaceAll (
 BiFunction&amp;lt;? super K, ? super V, ? extends V&amp;gt; function) {...}
default V getOrDefault (Object key, V defaultValue) {...}
&lt;/code>&lt;/pre>
&lt;p>上述方法使用的不多，主要用来对Map键值进行更新，按需查阅API文档。&lt;/p></description></item><item><title>Object超类</title><link>https://wangy325.github.io/zh/docs/java/basic/5_Object%E8%B6%85%E7%B1%BB/</link><pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/5_Object%E8%B6%85%E7%B1%BB/</guid><description>&lt;h1 id="object超类">
 Object超类
 &lt;a class="anchor" href="#object%e8%b6%85%e7%b1%bb">#&lt;/a>
&lt;/h1>
&lt;p>在Java中，如果一个类没有明确地指出超类，那么Object就是这个类的超类。实际上，Object类是所有类超类，这个类定义了一些重要的方法。&lt;/p></description></item><item><title>动态绑定与静态绑定</title><link>https://wangy325.github.io/zh/docs/java/basic/5_%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/5_%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/</guid><description>&lt;h1 id="动态绑定与静态绑定">
 动态绑定与静态绑定
 &lt;a class="anchor" href="#%e5%8a%a8%e6%80%81%e7%bb%91%e5%ae%9a%e4%b8%8e%e9%9d%99%e6%80%81%e7%bb%91%e5%ae%9a">#&lt;/a>
&lt;/h1>
&lt;p>这是Java方法调用的2个术语，用来描述Java虚拟机方法调用的2种机制。&lt;/p></description></item><item><title>原子性和可见性</title><link>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90_4_%E5%8E%9F%E5%AD%90%E6%80%A7%E4%B8%8E%E5%8E%9F%E5%AD%90%E7%B1%BB/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90_4_%E5%8E%9F%E5%AD%90%E6%80%A7%E4%B8%8E%E5%8E%9F%E5%AD%90%E7%B1%BB/</guid><description>&lt;p>原子性一般指&lt;strong>原子操作&lt;/strong>，原子操作不能&lt;strong>被线程调度机制中断&lt;/strong>，一旦操作开始，那么它一定可以在可能发生的上下文切换之前完成。Java语言规范规定了对基本对象(long和double除外)的读写操作是原子的。&lt;/p>
&lt;p>&lt;strong>不能将原子性和同步划等号&lt;/strong>！更不能使用原子性来代替同步，当你想使用原子性代替同步写出无锁代码时，思考 
 &lt;a href="https://inside.java/u/BrianGoetz/">&lt;em>Brain Goetz&lt;/em>&lt;/a> 的建议：&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>&lt;strong>If you can write a high-performance JVM for a modern microprocessor, then you are qualified to think about whether you can avoid synchronizing.&lt;/strong>&lt;/em>&lt;/p>
&lt;/blockquote></description></item><item><title>LinkedHashMap</title><link>https://wangy325.github.io/zh/docs/java/collections/4_Map_linkedhashmap/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/4_Map_linkedhashmap/</guid><description>&lt;p>&lt;code>LinkedHashMap&lt;/code>(链表散列映射)是&lt;code>HashMap&lt;/code>的导出类，像&lt;code>LinkedHashSet&lt;/code>与&lt;code>HashSet&lt;/code>的关系一样。&lt;/p>
&lt;p>其与&lt;code>HashMap&lt;/code>的差别在于其使用&lt;code>LinkedList&lt;/code>来维护键值对插入的顺序，其插入机制和&lt;code>HashMap&lt;/code>是一致的。&lt;/p>
&lt;p>&lt;code>LinkedHashMap&lt;/code>和&lt;code>HashMap&lt;/code>的性能相差不大，与&lt;code>HashSet&lt;/code>和&lt;code>LinkedHashSet&lt;/code>
 &lt;a href="https://wangy325.github.io/zh/docs/java/collections/3_Set/#linkedhashset">一致&lt;/a>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">集合&lt;/th>
&lt;th style="text-align:center">特征&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>HashMap&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>HashMap&lt;/code>基于散列表，插入和查询键值对的开销是固定的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>LinkedHashMap&lt;/code>&lt;/td>
&lt;td style="text-align:center">和&lt;code>HashMap&lt;/code>类似，不过其使用&lt;code>LinkedList&lt;/code>维护内部次序，因此其迭代顺序是插入顺序或者LRU（最近最少使用）次序，性能稍差于&lt;code>HashMap&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>抽象类与接口</title><link>https://wangy325.github.io/zh/docs/java/basic/6_%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/6_%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</guid><description>&lt;h1 id="抽象类与接口">
 抽象类与接口
 &lt;a class="anchor" href="#%e6%8a%bd%e8%b1%a1%e7%b1%bb%e4%b8%8e%e6%8e%a5%e5%8f%a3">#&lt;/a>
&lt;/h1>
&lt;p>抽象类是由&lt;code>abstract&lt;/code>关键字修饰的类。将一个普通类用&lt;code>abstract&lt;/code>修饰，它就是抽象类。&lt;/p>
&lt;p>若使用&lt;code>abstract&lt;/code>修饰方法，那么称该方法为&lt;strong>抽象方法&lt;/strong>，抽象方法没有方法体。&lt;/p></description></item><item><title>HashMap的源码分析</title><link>https://wangy325.github.io/zh/docs/java/collections/5_HashMap%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link><pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/5_HashMap%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid><description>&lt;p>&lt;code>HashMap&lt;/code>基于散列表，散列表中每一个Node节点（桶）是链表，当两个条目（entry）的key的hash值对桶数（capacity）取模的值相等时，这两个entry会存储在同一个链表中。但当链表中元素达到一定数目时，链表结构会转变为&lt;strong>树结构&lt;/strong>。&lt;/p>
&lt;p>本文从初始化，扩容，插入，获取，删除这几个方面深入讨论了&lt;code>HashMap&lt;/code>的实现细节。&lt;/p>
&lt;blockquote>
&lt;p>此文中没有讨论&lt;code>HashMap&lt;/code>中涉及到树结构的源码。&lt;/p>
&lt;/blockquote></description></item><item><title>线程本地存储</title><link>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90_5_%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90_5_%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</guid><description>&lt;p>使用&lt;code>synchronized&lt;/code>关键字对整个方法加锁（防止其他线程访问整个方法）往往会带来更大的性能开销，如果你只想保护某些代码块，可以使用&lt;strong>同步代码块&lt;/strong>，这一段被锁保护的代码块就称为&lt;strong>临界区&lt;/strong>（ &lt;em>critical section&lt;/em> ），前面的&lt;strong>显式锁&lt;/strong>所保护的区域以及使用&lt;strong>synchronized&lt;/strong>保护的代码块都是临界区。&lt;/p></description></item><item><title>Lambda与函数式接口</title><link>https://wangy325.github.io/zh/docs/java/basic/7_lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/7_lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid><description>&lt;blockquote>
&lt;p>Java 函数式接口和Lambda表达式是 Java 8 中引入的一个重要概念，它允许你将行为作为参数传递给方法，从而实现更简洁、更灵活的代码。&lt;/p>
&lt;/blockquote>
&lt;h2 id="lambda表达式">
 Lambda表达式
 &lt;a class="anchor" href="#lambda%e8%a1%a8%e8%be%be%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;p>Lambda表达式是一个&lt;strong>可传递的代码块&lt;/strong>，可以在以后执行&lt;strong>一次或多次&lt;/strong>。&lt;/p></description></item><item><title>获取任务的返回值</title><link>https://wangy325.github.io/zh/docs/java/concurrency/3%E8%8E%B7%E5%8F%96%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/3%E8%8E%B7%E5%8F%96%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</guid><description>&lt;h1 id="获取任务的返回值">
 获取任务的返回值
 &lt;a class="anchor" href="#%e8%8e%b7%e5%8f%96%e4%bb%bb%e5%8a%a1%e7%9a%84%e8%bf%94%e5%9b%9e%e5%80%bc">#&lt;/a>
&lt;/h1>
&lt;p>要创建一个任务，通常实现&lt;code>Runnable&lt;/code>接口。不幸的是，&lt;code>Runnable&lt;/code>接口的&lt;code>run()&lt;/code>方法返回&lt;code>void&lt;/code>，因此，其并不适合处理计算任务。&lt;/p>
&lt;p>考虑一个经典的问题：用多线程分段计算0-100的加和，我们需要把每个线程计算的值汇总，然后再求和，那么应该怎样获取每个任务返回值呢？&lt;/p>
&lt;p>Java提供了&lt;code>Callable&lt;/code>和&lt;code>Future&lt;/code>接口，使任务有提供返回值的能力。&lt;/p></description></item><item><title>Collections工具类</title><link>https://wangy325.github.io/zh/docs/java/collections/6_Collections/</link><pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/6_Collections/</guid><description>&lt;p>集合框架中一个重要的类，其实是Collection接口的&lt;strong>伴随类&lt;/strong>，其中定义了许多实用方法，用来获取&lt;strong>集合视图&lt;/strong>，或提供一些方便的操作集合元素的&lt;strong>算法&lt;/strong>。&lt;/p>
&lt;p>由于视图是直接封装的Collection接口，&lt;strong>因此其方法有些局限&lt;/strong>，并且由于特殊的设计，部分操作是不允许的（会抛出 &lt;em>UnsupportedOperationExceptin&lt;/em> ）。&lt;/p></description></item><item><title>内部类</title><link>https://wangy325.github.io/zh/docs/java/basic/8_%E5%86%85%E9%83%A8%E7%B1%BB/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/8_%E5%86%85%E9%83%A8%E7%B1%BB/</guid><description>&lt;h1 id="内部类">
 内部类
 &lt;a class="anchor" href="#%e5%86%85%e9%83%a8%e7%b1%bb">#&lt;/a>
&lt;/h1>
&lt;p>将一个类定义在另一个类的内部，这就是内部类。&lt;/p>
&lt;blockquote>
&lt;p>定义言简意赅 ，内涵丰富多彩。&lt;/p>
&lt;/blockquote></description></item><item><title>死锁问题2例</title><link>https://wangy325.github.io/zh/docs/java/concurrency/4%E6%AD%BB%E9%94%81/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/4%E6%AD%BB%E9%94%81/</guid><description>&lt;p>Java有能力使任务为等待某些条件成立而进入阻塞状态，所以就有可能出现这样一种情况：某个任务在等待另一个任务，而后者又在等待其他的任务，这样一直等待下去，直到等待链上的最后一个任务又在等待第一个任务释放锁，这样就出现了任务之间相互等待的连续循环现象，这种情况出现之后，没有哪个任务能够执行，于是 &lt;strong>死锁&lt;/strong> 出现。&lt;/p>
&lt;p>死锁之所以难以规避，其重要的原因就在于其不确定性，可能程序运行良好，但是有潜在的死锁风险，这个风险在&lt;strong>某些域的初始条件&lt;/strong>变化时，变得特别大，导致程序很快死锁。同时，死锁难以复现，当程序出现死锁时，往往只能通过jvm的堆栈日志来探究原因。&lt;/p></description></item><item><title>终结任务</title><link>https://wangy325.github.io/zh/docs/java/concurrency/5%E7%BB%88%E7%BB%93%E4%BB%BB%E5%8A%A1/</link><pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/5%E7%BB%88%E7%BB%93%E4%BB%BB%E5%8A%A1/</guid><description>&lt;h2 id="终结任务">
 终结任务
 &lt;a class="anchor" href="#%e7%bb%88%e7%bb%93%e4%bb%bb%e5%8a%a1">#&lt;/a>
&lt;/h2>
&lt;p>一般地，如果程序运行良好，任务执行完所需操作后自然结束，任务终结。&lt;/p>
&lt;p>如果任务执行时出现异常，任务也会终结。&lt;/p>
&lt;p>在设计多个线程协同工作的任务时，需要判断&lt;strong>任务终结的条件&lt;/strong>，以便合适地终结任务，这点尤为重要。&lt;/p>
&lt;p>在本节中主要讨论在多线程协同工作的情况下，如何合适的终结任务。&lt;/p></description></item><item><title>Java8日期和时间API</title><link>https://wangy325.github.io/zh/docs/java/basic/11_java-new-time-api/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/11_java-new-time-api/</guid><description>&lt;h1 id="java8日期和时间api">
 Java8日期和时间API
 &lt;a class="anchor" href="#java8%e6%97%a5%e6%9c%9f%e5%92%8c%e6%97%b6%e9%97%b4api">#&lt;/a>
&lt;/h1>
&lt;blockquote>
&lt;p>mybatis自 3.4.5 开始，已经支持使用&lt;code>LocaldateTime&lt;/code>作为时间查询入参，映射类型为&lt;code>TimeStamp&lt;/code>，参考地址: 
 &lt;a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="1-前言">
 1 前言
 &lt;a class="anchor" href="#1-%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h1>
&lt;p>在介绍Java SE 8中新的日期时间库前，先了解下Java 8之前的日期时间工具的诟病。&lt;/p>
&lt;p>在Java SE 8前，日期时间工具库在&lt;code>java.util&lt;/code>包中，包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>java.util.Date&lt;/code>：表示日期和时间&lt;/li>
&lt;li>&lt;code>java.util.Calendar&lt;/code>以及其实现子类：表示各种日历系统，常用的是格林威治日历&lt;code>java.util.GregorianCalendar&lt;/code>&lt;/li>
&lt;li>&lt;code>java.util.TimeZone&lt;/code>以及其实现子类：表示时区偏移量和夏令时&lt;/li>
&lt;/ul>
&lt;p>以及辅助其进行格式化和解析的工具库在java.text包中，包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>java.text.DateFormat&lt;/code>：格式化日期时间和解析日期时间的工具抽象类&lt;/li>
&lt;li>&lt;code>java.text.SimpleDateFormat&lt;/code>：DateDateFormat的实现&lt;/li>
&lt;/ul></description></item><item><title>生产者-消费者与阻塞队列</title><link>https://wangy325.github.io/zh/docs/java/concurrency/6%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/6%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</guid><description>&lt;p>在讨论线程协作的时候，已经讨论了生产者与消费者雏形，比如录音是生产者，而播放则是消费者；同样的，在汽车打蜡的模型中，打蜡可看作生产者，抛光可看作消费者；只是它们的关系是简单的生产-消费关系。&lt;/p>
&lt;p>除了简单的线程协同之外，Java提供了&lt;strong>同步队列&lt;/strong>来解决线程的协同问题，本节重点讨论这部分的内容。&lt;/p></description></item><item><title>阻塞队列的使用2例</title><link>https://wangy325.github.io/zh/docs/java/concurrency/6%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E4%BD%BF%E7%94%A82%E4%BE%8B/</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/6%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E4%BD%BF%E7%94%A82%E4%BE%8B/</guid><description>&lt;p>
 &lt;a href="https://wangy325.github.io/zh/docs/java/concurrency/6%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/">上一篇文章&lt;/a>介绍了juc的几种主要阻塞队列。&lt;/p>
&lt;p>本文使用2个例子，演示了阻塞队列在Java中的应用。&lt;/p></description></item><item><title>Executors与Executor框架</title><link>https://wangy325.github.io/zh/docs/java/concurrency/7_1_Executors_and_ExecutorService/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/7_1_Executors_and_ExecutorService/</guid><description>&lt;p>&lt;code>Executors&lt;/code>可以称作执行器。Java并发系列的文章到目前为止，虽然没有特别说明，但是使用执行器(Executor(s))的次数已经难以计数了，&lt;code>Executors&lt;/code>提供了一些非常方便的静态方法，可以根据需要创建不同的&lt;code>ExecutorService&lt;/code>，然后调用其&lt;code>execute(Runnable)&lt;/code>或&lt;code>submit(Callable&amp;lt;T&amp;gt;)&lt;/code>方法。&lt;/p>
&lt;p>在并发条件下，执行器还有一个非常明显的优势，它使用&lt;strong>线程池&lt;/strong>管理线程，减少了系统创建和销毁线程的开销。在一般的Java并发过程中，也建议使用执行器完成任务而非显式地创建线程。&lt;/p>
&lt;p>本文将从执行器开始，阐述Java中的线程池。&lt;/p></description></item><item><title>ThreadPoolExecutor-1</title><link>https://wangy325.github.io/zh/docs/java/concurrency/7_2_ThreadPoolExecutor1/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/7_2_ThreadPoolExecutor1/</guid><description>&lt;p>
 &lt;a href="https://wangy325.github.io/zh/docs/java/concurrency/7_1_Executors_and_ExecutorService/">前文&lt;/a>就已经提过，&lt;code>Executors&lt;/code>执行器创建的线程池包括不同实现，可以应对不同的场景，那么Java中包含哪些实现呢？&lt;/p>
&lt;p>本问就来讨论这些实现。&lt;/p></description></item><item><title>ThreadPoolExecutor-2</title><link>https://wangy325.github.io/zh/docs/java/concurrency/7_3_ThreadPoolExecutor2/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/7_3_ThreadPoolExecutor2/</guid><description>&lt;p>
 &lt;a href="https://wangy325.github.io/zh/docs/java/concurrency/7_2_ThreadPoolExecutor1/#threadpoolexecutor">前文&lt;/a>说过，&lt;code>ThreadPoolExecutor&lt;/code>实例代表了Java线程池，前面我们介绍了&lt;code>ThreadPoolExecutor&lt;/code>的构造器和几个核心概念，在本节中，我们着重介绍线程池的执行过程以及线程池的关闭。&lt;/p></description></item><item><title>CompletionService</title><link>https://wangy325.github.io/zh/docs/java/concurrency/7_4_CompletionService/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/7_4_CompletionService/</guid><description>在提交单个任务时，使用submit()或者execute()方法或许能够满足要求，但如果需要控制多个任务时，依次提交的操作看起来“有些繁琐”，此时我们可以使用ExecutorService提供的invokeAny/invokeAll方法，在介绍CompletionService接口时，我们不妨先看看这两个方法。
之前介绍AbstractExecutorService时提到，这两个方法是在这个抽象类中实现的，其中前者在获取到一个任务的返回值时便取消其他（未执行或正在执行的任务）任务，而后者需要等待所有的任务执行完成之后才能对任务的返回进行处理，接下来我们分别来看：
invokeAll会阻塞等待所有的任务执行完成。
public &amp;lt;T&amp;gt; List&amp;lt;Future&amp;lt;T&amp;gt;&amp;gt; invokeAll(Collection&amp;lt;? extends Callable&amp;lt;T&amp;gt;&amp;gt; tasks) throws InterruptedException { if (tasks == null) throw new NullPointerException(); ArrayList&amp;lt;Future&amp;lt;T&amp;gt;&amp;gt; futures = new ArrayList&amp;lt;Future&amp;lt;T&amp;gt;&amp;gt;(tasks.size()); boolean done = false; try { for (Callable&amp;lt;T&amp;gt; t : tasks) { RunnableFuture&amp;lt;T&amp;gt; f = newTaskFor(t); futures.add(f); execute(f); } // 有序迭代 for (int i = 0, size = futures.size(); i &amp;lt; size; i++) { Future&amp;lt;T&amp;gt; f = futures.get(i); if (!f.isDone()) { try { // 阻塞等待任务执行完成 f.</description></item><item><title>ScheduledExecutorService-1</title><link>https://wangy325.github.io/zh/docs/java/concurrency/8_1_ScheduledExecutorService1/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/8_1_ScheduledExecutorService1/</guid><description>&lt;p>除了&lt;code>ThreadPoolExecutor&lt;/code>之外，Java执行器（Executor）框架还提供了可以在指定延迟之后执行一次或周期执行任务的接口&lt;code>ScheduledExecutorService&lt;/code>，较
 &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Timer.html">java.util.Timer&lt;/a>而言，它是更好的选择。&lt;/p>
&lt;p>与
 &lt;a href="https://wangy325.github.io/zh/docs/java/concurrency/7_2_ThreadPoolExecutor1/#threadpoolexecutor">线程池&lt;/a>不同的是，用于计划执行的&lt;code>ScheduledThreadPoolExecutor&lt;/code>使用&lt;code>ScheduledFutureTask&lt;/code>作为任务，使用&lt;code>DelayedWorkQueue&lt;/code>作为任务队列，以实现计划（周期）执行的目的。&lt;/p></description></item><item><title>ScheduledExecutorService-2</title><link>https://wangy325.github.io/zh/docs/java/concurrency/8_2_ScheduledExecutorService2/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/8_2_ScheduledExecutorService2/</guid><description>&lt;h2 id="引例">
 引例
 &lt;a class="anchor" href="#%e5%bc%95%e4%be%8b">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://wangy325.github.io/zh/docs/java/concurrency/8_1_ScheduledExecutorService1/#scheduledfuturetask">前文&lt;/a>介绍了&lt;code>ScheduledFutureTask&lt;/code>和&lt;code>DeleyedWorkQueue&lt;/code>这么多，都是为了更好地理解任务执行的流程，在这之前，我们不妨先看如下示例：&lt;/p></description></item><item><title>并发组件-CountDownLatch</title><link>https://wangy325.github.io/zh/docs/java/concurrency/9_1_countdownlatch/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/9_1_countdownlatch/</guid><description>&lt;h2 id="countdownlatch">
 CountDownLatch
 &lt;a class="anchor" href="#countdownlatch">#&lt;/a>
&lt;/h2>
&lt;p>在讨论线程的基本概念时，我们说过&lt;code>join()&lt;/code>方法可使当前线程等待调用join方法的线程执行完，可以实现简单的
 &lt;a href="https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1_2/#%e5%8a%a0%e5%85%a5%e7%ba%bf%e7%a8%8bjoin">无锁同步&lt;/a>，使用&lt;code>CountDownLatch&lt;/code>可以更加简单的实现这一目的。毕竟，&lt;code>join()&lt;/code>方法的语义“加入一个线程”不是很容易就能让人理解。相较于&lt;code>join()&lt;/code>方法，&lt;code>CountDownLatch&lt;/code>的语义就明确多了。&lt;/p></description></item><item><title>并发组件-CyclicBarrier</title><link>https://wangy325.github.io/zh/docs/java/concurrency/9_2_cyclicbarrier/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/9_2_cyclicbarrier/</guid><description>&lt;h2 id="cyclicbarrier">
 CyclicBarrier
 &lt;a class="anchor" href="#cyclicbarrier">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>CyclicBarrier&lt;/code>被称为“同步屏障”，事实上就可以把它理解为一个屏障，多个任务调用屏障的&lt;code>await()&lt;/code>方法将被阻塞，直到所有的任务都进入阻塞，那么屏障开启，所有任务继续执行。这看起来和&lt;code>CountDownLatch&lt;/code>非常像，不过&lt;code>CountDownLatch&lt;/code>只能触发一次，而&lt;code>CyclicBarrier&lt;/code>可以多次重用，这是它们的主要区别之一。&lt;/p>
&lt;p>和&lt;code>CountDownLatch&lt;/code>一样，&lt;code>CyclicBarrier&lt;/code>接受一个整型参数，表示可限制的线程数。除此之外，&lt;code>CyclicBarrier&lt;/code>还可以接受一个&lt;code>Runnable&lt;/code>作为参数，这个参数称作&lt;code>barrierAction&lt;/code>，&lt;code>barrierAction&lt;/code>在所有线程到达屏障之后即开始执行，其他任务&lt;strong>只能等待&lt;/strong>&lt;code>barrierAction&lt;/code>执行完毕之后才能继续执行，这是&lt;code>CyclicBarrier&lt;/code>和&lt;code>CountDownLatch&lt;/code>的区别之二。&lt;/p></description></item><item><title>并发组件-Semaphore</title><link>https://wangy325.github.io/zh/docs/java/concurrency/9_3_semaphore/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/9_3_semaphore/</guid><description>Semaphore # 无论是显式锁还是通过synchronized关键字获取的隐式锁，其在任一时刻都只能让一个任务访问资源，而Semaphore（计数信号量）允许多个任务同时访问资源。可以把Semaphore看作是持有对象访问许可（permits）的“security”。访问对象时，须先通过acquire()获取许可，若此时没有许可可用，那么acquire()将阻塞，否则获取许可，可用许可数-1；使用完资源后，通过release()方法返还许可。事实上，并没有实际上的许可证对象，Semaphore通过协同各个线程工作，来达到目的。
Semaphore的构造器接受一个“公平性参数”。不传入此参数或传入false时，线程获取许可的顺序无法保证，即使线程阻塞了很久，其仍然可能被刚调用acquire()方法的线程“抢走”许可，这可能会导致线程“饿死”。当传入true时，Semaphore保证线程获取许可的顺序和其调用acquire()方法之后被执行的顺序一致1，也就是先执行的任务先获取许可（FIFO）。需要说明的是，tryAcquire()方法不遵循公平性原则，如果有许可可用，它直接获取之。在使用Semaphore时，一般将其设置为公平的
Semaphore通常用于限制访问资源的线程数量，典型的例子就是控制“池”的并发访问量。下例中使用Semaphore控制池中的对象方法，当需要使用时，可以将它们“签出”（checkout），使用完毕之后再将其“签入”（checkin），使用泛型类封装功能2。
class Pool&amp;lt;T&amp;gt; { private final int size; final List&amp;lt;T&amp;gt; items = new ArrayList&amp;lt;&amp;gt;(); private final boolean[] checkedOut; private final Semaphore available; public Pool(Class&amp;lt;T&amp;gt; classObject, int size) { this.size = size; checkedOut = new boolean[size]; available = new Semaphore(size, true); // Load pool with objects that can be checked out: for (int i = 0; i &amp;lt; size; ++i) { try { // Assumes a default constructor: items.</description></item><item><title>并发组件-Exchanger</title><link>https://wangy325.github.io/zh/docs/java/concurrency/9_4_exchanger/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/9_4_exchanger/</guid><description>&lt;h2 id="exchanger">
 Exchanger
 &lt;a class="anchor" href="#exchanger">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>Exchanger&lt;/code>是在两个任务之间交换对象的栅栏。当这些任务进入栅栏时，各自拥有一个对象，离开时交换它们拥有的对象。栅栏可以用来设计缓存对象，2个任务分别来使用和清空缓存，当缓存空间满时，则在Exchanger上交换缓存，缓存得以重复使用&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p></description></item><item><title>并发组件-PBQ/DQ</title><link>https://wangy325.github.io/zh/docs/java/concurrency/9_5_priorityblockqueue_delayqueue/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/9_5_priorityblockqueue_delayqueue/</guid><description>PriorityBlockingQueue # PriorityBlockingQueue就是一个基础的可阻塞的 优先级队列，当队列为空时，从队列中获取元素时被阻塞。其余特性和优先级队列是一致的。
下例展示了如何构建一个可以放入优先级队列的任务：
public class PrioritizedTask implements Runnable, Comparable&amp;lt;PrioritizedTask&amp;gt; { protected static List&amp;lt;PrioritizedTask&amp;gt; sequence = new ArrayList&amp;lt;&amp;gt;(); private Random rand = new Random(47); private static int counter = 0; private final int id = counter++; private final int priority; public PrioritizedTask(int priority) { this.priority = priority; sequence.add(this); } @Override public int compareTo(PrioritizedTask arg) { return priority &amp;lt; arg.priority ? 1 : (priority &amp;gt; arg.priority ? -1 : 0); } @Override public void run() { try { TimeUnit.</description></item><item><title>JMM与volatile关键字(转)</title><link>https://wangy325.github.io/zh/docs/java/concurrency/10_Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8Evolatile%E5%85%B3%E9%94%AE%E5%AD%97/</link><pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/10_Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8Evolatile%E5%85%B3%E9%94%AE%E5%AD%97/</guid><description>&lt;h1 id="java内存模型与volatile关键字">
 Java内存模型与volatile关键字
 &lt;a class="anchor" href="#java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e4%b8%8evolatile%e5%85%b3%e9%94%ae%e5%ad%97">#&lt;/a>
&lt;/h1>
&lt;p>本文转自
 &lt;a href="http://www.cnblogs.com/dolphin0520/p/3920373.html">Matrix海子&lt;/a>，是描述&lt;code>volatile&lt;/code>关键字非常好的一篇文章，从Java的内存模型开始，归本溯源的阐述了&lt;code>volatile&lt;/code>关键字在并发中的作用与局限&lt;/p>
&lt;p>此文部分内容参照了《深入理解Java虚拟机》&lt;/p></description></item><item><title>使用Logback记录日志</title><link>https://wangy325.github.io/zh/docs/note/translations/guide-to-logback-cn/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/note/translations/guide-to-logback-cn/</guid><description>&lt;p>
 &lt;a href="https://logback.qos.ch/">Logback&lt;/a>是Java应用中使用最广的日志框架之一，它是
 &lt;a href="https://logback.qos.ch/reasonsToSwitch.html">其前辈框架Log4j的替代者&lt;/a>。相比Log4j，Logback在日志处理速度、配置多样性、对旧日志文件的处理灵活性上均要优于Log4j。&lt;/p>
&lt;p>这篇文章将介绍Logback的主要组成结构并指导你使用Logback构建更好的程序。&lt;/p></description></item><item><title>在xxl-job中使用分片任务</title><link>https://wangy325.github.io/zh/posts/17_xxl-sharding-job/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/posts/17_xxl-sharding-job/</guid><description>&lt;p>本文介绍在如何在
 &lt;a href="https://www.xuxueli.com/xxl-job/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0XXL-JOB%E3%80%8B">xxl-job&lt;/a>中使用创建并使用分片任务。&lt;/p>
&lt;p>&lt;code>xxl-job&lt;/code>是国内开源的一款轻量级分布式任务调度平台，开发者是大众点评的工程师，其目前维护一个
 &lt;a href="https://www.xuxueli.com/">开源社区&lt;/a>，里面还有很多已经发布或尚在孵化的开源项目。&lt;/p></description></item><item><title>使用printf格式化输出</title><link>https://wangy325.github.io/zh/docs/note/translations/how2use-printf/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/note/translations/how2use-printf/</guid><description>&lt;p>这篇文章介绍了几种常见的使用&lt;code>printf()&lt;/code>方法进行格式化输出的方法。&lt;/p>
&lt;p>&lt;code>printf()&lt;/code>方法隶属于&lt;code>java.io.PrintStream&lt;/code>类，提供了和C语言中相似的格式化字符串输出的方法。&lt;/p></description></item><item><title>比较器的「退化」</title><link>https://wangy325.github.io/zh/posts/5_%E6%AF%94%E8%BE%83%E5%99%A8%E7%9A%84%E9%80%80%E5%8C%96/</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/posts/5_%E6%AF%94%E8%BE%83%E5%99%A8%E7%9A%84%E9%80%80%E5%8C%96/</guid><description>&lt;hr>
&lt;p>Java「语法糖」越来越牛逼了哈。&lt;/p>
&lt;p>在使用匿名内部类比较器的时候，idea提供了几个层次的比较器代码优化，给👴整懵逼了。&lt;/p></description></item><item><title>Java接口回调</title><link>https://wangy325.github.io/zh/posts/Java%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/posts/Java%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</guid><description>&lt;p>回调模式在web开发中用的较多，本文简单介绍了Java的回调机制，理解此文可以在生产中写出适应业务的回调模型。&lt;/p></description></item><item><title>MyBatis的trim标签</title><link>https://wangy325.github.io/zh/posts/1_mybatis%E4%B8%ADtrim%E6%A0%87%E7%AD%BE%E5%8A%A8%E6%80%81%E6%8B%BC%E6%8E%A5SQL/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/posts/1_mybatis%E4%B8%ADtrim%E6%A0%87%E7%AD%BE%E5%8A%A8%E6%80%81%E6%8B%BC%E6%8E%A5SQL/</guid><description>&lt;p>&lt;code>trim&lt;/code>标记是一个格式化的标记，可以完成&lt;code>set&lt;/code>或者是&lt;code>where&lt;/code>标记的功能。&lt;/p></description></item></channel></rss>