<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>java on EndlessRiver</title><link>https://wangy325.github.io/zh/categories/java/</link><description>Recent content in java on EndlessRiver</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>wangy325@qq.com (wangy325)</managingEditor><webMaster>wangy325@qq.com (wangy325)</webMaster><copyright>&amp;copy;2019-{year}, All Rights Reserved</copyright><lastBuildDate>Thu, 10 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://wangy325.github.io/zh/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>使用printf格式化输出</title><link>https://wangy325.github.io/zh/posts/java/trans/how2use-printf/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Wed, 21 Apr 2021 23:37:34 +0800</atom:modified><guid>https://wangy325.github.io/zh/posts/java/trans/how2use-printf/</guid><description>&lt;p>这篇文章介绍了几种常见的使用&lt;code>printf()&lt;/code>方法进行格式化输出的方法。&lt;/p>
&lt;p>&lt;code>printf()&lt;/code>方法隶属于&lt;code>java.io.PrintStream&lt;/code>类，提供了和C语言中相似的格式化字符串输出的方法。&lt;/p></description><dc:creator>wangy325</dc:creator><category>java</category><category>翻译计划</category></item><item><title>HashMap的源码分析（一）</title><link>https://wangy325.github.io/zh/posts/java/collections/hashmap%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/</link><pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/collections/hashmap%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/</guid><description>&lt;p>HashMap基于散列表，散列表中每一个Node节点（桶）是链表，当两个条目（entry）的key的hash值对桶数（capacity）取模的值相等时，这两个entry会存储在同一个链表中。但当链表中元素达到一定数目时，链表结构会转变为&lt;strong>树结构&lt;/strong>。&lt;/p>
&lt;p>此文中没有讨论HashMap中涉及到树结构的源码。&lt;/p></description><dc:creator>wangy325</dc:creator><category>集合框架</category><category>HashMap</category><category>java</category></item><item><title>Collections工具类</title><link>https://wangy325.github.io/zh/posts/java/collections/collections/</link><pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Thu, 08 Apr 2021 22:37:47 +0800</atom:modified><guid>https://wangy325.github.io/zh/posts/java/collections/collections/</guid><description>&lt;p>集合框架中一个重要的类，其实是Collection接口的&lt;strong>伴随类&lt;/strong>，其中定义了许多实用方法，用来获取&lt;strong>集合视图&lt;/strong>，或提供一些方便的操作集合元素的&lt;strong>算法&lt;/strong>。&lt;/p>
&lt;p>由于视图是直接封装的Collection接口，&lt;strong>因此其方法有些局限&lt;/strong>，并且由于特殊的设计，部分操作是不允许的（会抛出 &lt;em>UnsupportedOperationExceptin&lt;/em> ）。&lt;/p></description><dc:creator>wangy325</dc:creator><category>集合框架</category><category>Collections工具类</category><category>java</category></item><item><title>Java集合框架之Map</title><link>https://wangy325.github.io/zh/posts/java/collections/map/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 11 Jul 2022 19:04:29 +0800</atom:modified><guid>https://wangy325.github.io/zh/posts/java/collections/map/</guid><description>&lt;p>Map即映射，即键-值对，键不允许重复，并且一个键最多映射一个值。Map不在Java集合框架的范畴，但是其由集合框架的内容实现。自然也在集合框架的讨论之内。&lt;/p>
&lt;p>映射提供3种&lt;strong>集合视图&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>键集 （Set实现）&lt;/li>
&lt;li>值集 （Collection实现）&lt;/li>
&lt;li>Map.Entry集（Set实现）&lt;/li>
&lt;/ul></description><dc:creator>wangy325</dc:creator><category>集合框架</category><category>java</category></item><item><title>Set</title><link>https://wangy325.github.io/zh/posts/java/collections/set/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Thu, 08 Apr 2021 22:37:47 +0800</atom:modified><guid>https://wangy325.github.io/zh/posts/java/collections/set/</guid><description>&lt;p>Set是&lt;strong>不含重复元素的集&lt;/strong>，严格来讲，Set不允许当&lt;code>e1.equals(e2)&lt;/code>为真时， &lt;em>e1&lt;/em> 和 &lt;em>e2&lt;/em> 同时出现在集合中。Set最多允许一个&lt;code>null&lt;/code>元素。&lt;/p>
&lt;p>将&lt;strong>可变对象&lt;/strong>置入Set时需要特别小心，当对象的改动影响到了元素之间的&lt;code>equals()&lt;/code>比较的结果，那么Set的行为就变得不确定了。因此，&lt;strong>不能将Set本身作为Set的元素&lt;/strong>。&lt;/p></description><dc:creator>wangy325</dc:creator><category>集合框架</category><category>Set</category><category>java</category></item><item><title>Queue</title><link>https://wangy325.github.io/zh/posts/java/collections/queue/</link><pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Thu, 01 Jul 2021 17:27:52 +0800</atom:modified><guid>https://wangy325.github.io/zh/posts/java/collections/queue/</guid><description>&lt;p>Queue（队列），实际开发过程中，在单线程环境下使用的情况下不多，Queue作为集合框架中重要组成似乎习惯性被忽略，队列总是先持有元素，再处理元素&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>&lt;img src="https://wangy325.github.io/img/Queue.png" alt="J7NBrQ.png" />&lt;/p>
&lt;p style="text-align:center;font-size:.9rem;font-style:italic">Queue继承关系简图&lt;/p>
&lt;p>除了Collection定义的操作之外，Queue定义了额外的插入/删除/检查元素的操作，这些操作有2种形式：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="center">&lt;/th>
&lt;th align="center">&lt;em>Throws Exception&lt;/em>&lt;/th>
&lt;th align="center">&lt;em>Returns special value&lt;/em>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="center">&lt;strong>Insert&lt;/strong>&lt;/td>
&lt;td align="center">add(e)&lt;/td>
&lt;td align="center">offer(e)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">&lt;strong>Remove&lt;/strong>&lt;/td>
&lt;td align="center">remove()&lt;/td>
&lt;td align="center">poll()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">&lt;strong>Examine&lt;/strong>&lt;/td>
&lt;td align="center">element()&lt;/td>
&lt;td align="center">peek()&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如表所示，add/remove/element方法失败后抛出异常。offer/poll/peek方法失败后返回一个特殊值（null或false，视具体操作不同），需要说明的是，&lt;del>&lt;code>offer()&lt;/code>方法主要是为有容量限制的队列设计的&lt;/del> 对于有限队列而言，&lt;code>offer()&lt;/code>方法比&lt;code>add()&lt;/code>方法更可取。&lt;/p></description><dc:creator>wangy325</dc:creator><category>集合框架</category><category>Queue</category><category>java</category></item><item><title>List</title><link>https://wangy325.github.io/zh/posts/java/collections/list/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 28 Jun 2021 15:08:23 +0800</atom:modified><guid>https://wangy325.github.io/zh/posts/java/collections/list/</guid><description/><dc:creator>wangy325</dc:creator><category>集合框架</category><category>List</category><category>java</category></item><item><title>内部类</title><link>https://wangy325.github.io/zh/posts/java/basic/%E5%86%85%E9%83%A8%E7%B1%BB/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/basic/%E5%86%85%E9%83%A8%E7%B1%BB/</guid><description>&lt;p>将一个类定义在另一个类的内部，这就是内部类。&lt;/p>
&lt;blockquote>
&lt;p>定义言简意赅 ，内涵丰富多彩。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Flight2&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// inner class
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Comp&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Dest&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Dest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">to&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">showDest&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// use method to get inner class instance
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Comp&lt;/span> &lt;span class="nf">comp&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Comp&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// use method to get inner class instance
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Dest&lt;/span> &lt;span class="nf">dest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Dest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">ship&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">Comp&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">comp&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;South Air&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">Dest&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;HK&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;the flight is &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; to &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">showDest&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Flight2&lt;/span> &lt;span class="n">f2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Flight2&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">f2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ship&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// OuterClassName.InnerClassName to refer inner class
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Flight2&lt;/span> &lt;span class="n">f2s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Flight2&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Flight2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Comp&lt;/span> &lt;span class="n">comp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f2s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">comp&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Flight2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Dest&lt;/span> &lt;span class="n">d2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f2s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;New York&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过&lt;code>new&lt;/code>关键字实例化内部类和使用普通类并没有什么区别。&lt;/p>
&lt;p>需要说明的是：当创建一个内部类的引用时，需要使用&lt;code>OuterClassName.InnerClassName&lt;/code>这样的格式指明内部类的类型。&lt;/p></description><dc:creator>wangy325</dc:creator><category>内部类</category><category>工厂方法</category><category>lambda</category><category>java</category></item><item><title>抽象类与接口</title><link>https://wangy325.github.io/zh/posts/java/basic/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/basic/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</guid><description>&lt;p>抽象类是由&lt;code>abstract&lt;/code>关键字修饰的类。将一个普通类用&lt;code>abstract&lt;/code>修饰，它就是抽象类。&lt;/p>
&lt;p>若使用&lt;code>abstract&lt;/code>修饰方法，那么称该方法为&lt;strong>抽象方法&lt;/strong>，抽象方法没有方法体。&lt;/p>
&lt;h2 id="81-抽象类">8.1 抽象类&lt;/h2>
&lt;p>但是抽象类有一些特征：&lt;/p>
&lt;ul>
&lt;li>抽象类不能被实例化（虽然抽象类可以声明域和构造器）&lt;/li>
&lt;li>抽象方法必须置于抽象类中&lt;/li>
&lt;/ul>
&lt;p>如果你继承某抽象类，但是却不想实现某个抽象方法，可以继续让方法保持抽象，如此做&lt;strong>导出类也要被声明为抽象类&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AbsTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">S&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">f&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">g&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">F&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">F&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;F constructor&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">abstract&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">g&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;F.g()&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">S&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">F&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">S&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;S constructor&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;S.f()&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/* output
&lt;/span>&lt;span class="cm">F constructor
&lt;/span>&lt;span class="cm">S constructor
&lt;/span>&lt;span class="cm">S.f()
&lt;/span>&lt;span class="cm">F.g()
&lt;/span>&lt;span class="cm">*/&lt;/span>&lt;span class="c1">//:~
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><dc:creator>wangy325</dc:creator><category>工厂方法</category><category>java</category></item><item><title>Object超类（一）</title><link>https://wangy325.github.io/zh/posts/java/basic/object%E8%B6%85%E7%B1%BB/</link><pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/basic/object%E8%B6%85%E7%B1%BB/</guid><description>&lt;p>在Java中，如果一个类没有明确地指出超类，那么Object就是这个类的超类。实际上，Object类是所有类超类，这个类定义了一些重要的方法。&lt;/p></description><dc:creator>wangy325</dc:creator><category>Object</category><category>java</category></item><item><title>动态绑定与静态绑定</title><link>https://wangy325.github.io/zh/posts/java/basic/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/basic/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/</guid><description>&lt;p>这是Java方法调用的2个术语，用来描述Java虚拟机方法调用的2种机制。&lt;/p></description><dc:creator>wangy325</dc:creator><category>java</category></item><item><title>final关键字</title><link>https://wangy325.github.io/zh/posts/java/basic/final%E5%85%B3%E9%94%AE%E5%AD%97/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/basic/final%E5%85%B3%E9%94%AE%E5%AD%97/</guid><description>&lt;p>不同的使用环境下，&lt;code>final&lt;/code>关键字的含义有细微差别，但通常它指“这是无法改变的”。&lt;/p></description><dc:creator>wangy325</dc:creator><category>final</category><category>java</category></item><item><title>传值还是传引用</title><link>https://wangy325.github.io/zh/posts/java/basic/%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/basic/%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/</guid><description>&lt;p>Java语言设计总是&lt;strong>按值调用&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>按值调用：方法接收的是调用者提供的值&lt;/p>
&lt;p>按引用调用：方法接收的是调用者提供的变量地址&lt;/p>
&lt;/blockquote>
&lt;p>一个方法可以修改传递引用所对应的变量值，但是不能修改传递值所对应的变量值。&lt;/p>
&lt;h2 id="31-span-id--m11基本数据类型参数span">3.1 &lt;span id = "m11">基本数据类型参数&lt;/span>&lt;/h2>
&lt;blockquote>
&lt;p>一个方法不能修改一个基本数据类型的参数（数值类型或布尔值）。&lt;/p>
&lt;/blockquote>
&lt;p>参考如下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">// doesn&amp;#39;t work
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ByValue&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">tripleValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">3&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;x = &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">tripleValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;y = &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/* output:
&lt;/span>&lt;span class="cm">x = 30
&lt;/span>&lt;span class="cm">y = 10
&lt;/span>&lt;span class="cm">*/&lt;/span>&lt;span class="c1">//:~
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方法执行时，&lt;code>x&lt;/code>被初始化为&lt;code>y&lt;/code>&lt;strong>值的一个拷贝&lt;/strong>，方法执行后 ，&lt;code>x&lt;/code>值变为30，&lt;code>y&lt;/code>仍为10，之后&lt;code>x&lt;/code>不再使用。&lt;/p></description><dc:creator>wangy325</dc:creator><category>java</category></item><item><title>static关键字</title><link>https://wangy325.github.io/zh/posts/java/basic/static%E5%85%B3%E9%94%AE%E5%AD%97/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/basic/static%E5%85%B3%E9%94%AE%E5%AD%97/</guid><description>&lt;p>static关键字意为“静态的”，其语义可以理解为“类的对象”(不要理解为Class对象)，即不需要对象实例，可以直接通过&lt;code>类名.字段名&lt;/code>的形式直接访问。&lt;/p></description><dc:creator>wangy325</dc:creator><category>static</category><category>java</category></item><item><title>访问权限修饰符</title><link>https://wangy325.github.io/zh/posts/java/basic/%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/basic/%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid><description>&lt;blockquote>
&lt;p>本系列内容主要来自TIJ，Java核心技术卷以及Java SE 8 API&lt;/p>
&lt;/blockquote>
&lt;h2 id="11-包访问权限">1.1 包访问权限&lt;/h2>
&lt;ul>
&lt;li>当前包中的所有其他类对该包内的某个类的成员具有访问权限，但这并不意味着&lt;strong>能够访问到&lt;/strong>。是否访问到还要取决于类的成员的修饰符。若类的成员也是包访问权限或者public，那才能够访问到；&lt;/li>
&lt;li>当前包中的所有类对这个包之外的所有&lt;strong>非public权限的类&lt;/strong>没有访问权限；&lt;/li>
&lt;li>类控制着哪些代码能够访问自己的成员，具体能否访问还需要看成员的权限。&lt;/li>
&lt;/ul>
&lt;h2 id="12-接口访问权限---public">1.2 接口访问权限 &amp;ndash;public&lt;/h2>
&lt;ul>
&lt;li>使用public，意味着public之后声明的成员对每个人都是可用的。&lt;/li>
&lt;/ul>
&lt;h2 id="13-你无法访问---private">1.3 你无法访问 &amp;ndash;private&lt;/h2>
&lt;ul>
&lt;li>使用private，意味着除了包含该成员的类之外，其他任何类都无法访问这个成员；&lt;/li>
&lt;li>私有构造器可以&lt;strong>阻止继承&lt;/strong>。&lt;/li>
&lt;/ul></description><dc:creator>wangy325</dc:creator><category>java</category></item><item><title>比较器的「退化」</title><link>https://wangy325.github.io/zh/posts/java/basic/%E6%AF%94%E8%BE%83%E5%99%A8%E7%9A%84%E9%80%80%E5%8C%96/</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/basic/%E6%AF%94%E8%BE%83%E5%99%A8%E7%9A%84%E9%80%80%E5%8C%96/</guid><description>&lt;p>在使用匿名内部类比较器的时候，idea提供了几个层次的比较器代码优化，给👴整懵逼了。&lt;/p></description><dc:creator>wangy325</dc:creator><category>lambda</category><category>java</category></item><item><title>Java接口回调</title><link>https://wangy325.github.io/zh/posts/java/design_pattern/java%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><author>wangy325@qq.com (wangy325)</author><atom:modified>Mon, 05 Dec 2022 07:11:15 +0000</atom:modified><guid>https://wangy325.github.io/zh/posts/java/design_pattern/java%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</guid><description>&lt;p>回调模式在web开发中用的较多，本文简单介绍了Java的回调机制，理解此文可以在生产中写出适应业务的回调模型。&lt;/p>
&lt;h2 id="模块之间的调用">模块之间的调用&lt;/h2>
&lt;p>在一个应用系统中，必然存在模块之间的调用，调用的方式有几种:&lt;/p>
&lt;h3 id="1-同步调用">1. 同步调用&lt;/h3>
&lt;p>&lt;a href="https:/imgchr.com/i/iZXPMQ">&lt;img src="https://s1.ax1x.com/2018/09/18/iZXPMQ.md.png" alt="iZXPMQ.md.png" />&lt;/a>&lt;/p>
&lt;p>​ &lt;em>方法A()调用方法B(),并且等待方法B()的返回,然后A()再执行下一步操作&lt;/em>&lt;/p>
&lt;p>此方法适用于B()方法&lt;strong>执行的时间不长&lt;/strong>，如若不然，那么A()方法会长时间等待B()方法执行完成而处于&lt;strong>阻塞&lt;/strong>状态，如此，可能会导致整个流程的阻塞。&lt;/p></description><dc:creator>wangy325</dc:creator><category>回调模式</category><category>java</category></item></channel></rss>