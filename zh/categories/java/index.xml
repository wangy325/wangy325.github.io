<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Endless River</title><link>https://wangy325.github.io/zh/categories/java/</link><description>Recent content in Java on Endless River</description><generator>Hugo</generator><language>zh</language><lastBuildDate>Wed, 19 Jun 2024 21:14:32 +0800</lastBuildDate><atom:link href="https://wangy325.github.io/zh/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>线程与任务</title><link>https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1/</guid><description>&lt;h1 id="线程与任务">
 线程与任务
 &lt;a class="anchor" href="#%e7%ba%bf%e7%a8%8b%e4%b8%8e%e4%bb%bb%e5%8a%a1">#&lt;/a>
&lt;/h1>
&lt;hr>
&lt;p>并发的本质是多个线程同时处理任务&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，不同于进程，线程可以访问同一个资源（临界资源），当程序不够健壮时，使用多线程就可能带来问题，这是要反复讨论并发的原因之一。&lt;/p>
&lt;p>在Java中，必须明白一点：线程由Thread类启动，但Thread类并不执行任何操作，&lt;strong>它只是驱动赋予它的任务&lt;/strong>。因此将&lt;strong>线程与任务&lt;/strong>的概念区分开，有利于理解并发。&lt;/p>
&lt;p>实际上，开发过程中线程与任务（的联系）被隔离的更加明显，往往不需要显式地声明线程，然后将任务（声明任务是必须的）分配给线程，并由线程负责驱动（ &lt;em>allocate task to thread to execute&lt;/em> ），这一过程通常由&lt;strong>线程池&lt;/strong>完成 。&lt;/p></description></item><item><title>List列表</title><link>https://wangy325.github.io/zh/docs/java/collections/1_List/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/1_List/</guid><description>&lt;h1 id="list列表">
 List列表
 &lt;a class="anchor" href="#list%e5%88%97%e8%a1%a8">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://wangy325.github.io/img/Collection.png" alt="JXUL1s.png" />&lt;/p>
&lt;p style="text-align:center;font-style:italic;font-size:.9rem">Java集合框架简图&lt;/p>
&lt;!-- > 1. 未列出枚举集（EnumSet/EnumMap）
> 2. 未列出IdentityHashMap
> 3. 未列出java.util.concurrent包下的实现 -->
&lt;p>上图列出了集合框架的常见实现，Java集合框架系列文章介绍了图中列出的大部分内容&lt;/p></description></item><item><title>访问权限修饰符</title><link>https://wangy325.github.io/zh/docs/java/basic/1_%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/1_%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid><description>&lt;h1 id="访问权限修饰符">
 访问权限修饰符
 &lt;a class="anchor" href="#%e8%ae%bf%e9%97%ae%e6%9d%83%e9%99%90%e4%bf%ae%e9%a5%b0%e7%ac%a6">#&lt;/a>
&lt;/h1>
&lt;blockquote>
&lt;p>本系列内容主要来自TIJ，Java核心技术卷以及Java SE 8 API&lt;/p>
&lt;/blockquote>
&lt;p>介绍了Java的public、default、protected、private四种访问权限修饰符。&lt;/p></description></item><item><title>SpringBoot使用AOP的简单示例</title><link>https://wangy325.github.io/zh/docs/utility/spring/SpringBoot-aop-demo/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/utility/spring/SpringBoot-aop-demo/</guid><description>&lt;p>有一个cd接口，其实体类用于播放歌曲，同时我们想在播放歌曲的时候记录每个曲目的播放次数。看起来，记录次数这个事和播放曲目是不相干的事情，当然，我们可以在每首歌曲播放完成之后记录，但是更好的办法是使用一个切面，切入到播放方法中，来完成这件事，这样可以减少无关逻辑对代码的侵入。&lt;/p></description></item><item><title>在SpringBoot中使用MessageSource</title><link>https://wangy325.github.io/zh/docs/misc/translations/use-springboot-messagesource/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/misc/translations/use-springboot-messagesource/</guid><description>&lt;blockquote>
&lt;p>&lt;span id="hook">几个说明&lt;/span>：&lt;/p>
&lt;ol>
&lt;li>&lt;del>properties配置文件中，&lt;code>spring.messages.basename&lt;/code>&lt;strong>必须&lt;/strong>要加classpath前缀。如 &lt;code>spring.messages.basename=classpath:i18n/messages&lt;/code>&lt;/del>；&lt;/li>
&lt;li>&lt;del>必须要手动配置&lt;code>MessageSource&lt;/code>，springboot不会自动配置之&lt;/del>；&lt;/li>
&lt;li>如果使用&lt;code>MessageSource.getMessage()&lt;/code>方法，第一个参数的引用形式为&lt;code>&amp;quot;code&amp;quot;&lt;/code>，而不是&lt;code>&amp;quot;{code}&amp;quot;&lt;/code>或者&lt;code>&amp;quot;${code}&amp;quot;&lt;/code>。如messageSource.getMessage(&amp;ldquo;test.msg&amp;rdquo;, null, &lt;del>Locale.getDefault()&lt;/del>)；&lt;/li>
&lt;li>在配置&lt;code>LocalValidatorFactoryBean&lt;/code>之后，才可以在&lt;code>javax.validation.constraints&lt;/code>包下的注解（&lt;code>@Size&lt;/code>，&lt;code>@NotNull&lt;/code>&amp;hellip;）下的&lt;em>&lt;strong>message&lt;/strong>&lt;/em>属性中使用&lt;code>&amp;quot;{code}&amp;quot;&lt;/code>的形式声明校验提示信息。如
&lt;code>@NotNull(message = &amp;quot;{leftTime.not.null}&amp;quot;)&lt;/code>；&lt;/li>
&lt;li>springMVC的locale配置和JVM的locale配置不一样，在application.properties中配置的&lt;code>spring.mvc.locale=zh_CN&lt;/code>实际上配置的是&lt;code>WebMvcProperties&lt;/code>，在获取消息时，locale信息应该使用&lt;code>webMvcProperties.getLocale()&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>获取&lt;strong>而不是&lt;/strong>使用&lt;code>Locale.getDefault()&lt;/code>获取。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;hr>
&lt;p>MessageSource is a powerful feature available in Spring applications. This helps application developers handle various complex scenarios with writing much extra code, such as environment-specific configuration, internationalization or configurable values.&lt;/p>
&lt;p>One more scenario could be modifying the default validation messages to more user-friendly/custom messages.&lt;/p>
&lt;p>In this tutorial, we&amp;rsquo;ll see how to configure and manage custom validation MessageSource in the application using Spring Boot.&lt;/p></description></item><item><title>资源访问受限</title><link>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90/</guid><description>&lt;h1 id="资源访问受限">
 资源访问受限
 &lt;a class="anchor" href="#%e8%b5%84%e6%ba%90%e8%ae%bf%e9%97%ae%e5%8f%97%e9%99%90">#&lt;/a>
&lt;/h1>
&lt;hr>
&lt;p>在
 &lt;a href="https://wangy325.github.io/zh/docs/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1/">线程与任务&lt;/a>文中，虽然创建了多线程，并且线程之间出现了一些&lt;strong>不可预测&lt;/strong>的CPU调度，但是由于线程之间是&lt;strong>相互隔离&lt;/strong>的——&lt;strong>线程没有访问共同的资源&lt;/strong>，尽管在执行任务的过程可能被CPU剥夺运行权，但是当它们再次获得运行权时对运行结果并没有影响，它们是安全的。&lt;/p>
&lt;blockquote>
&lt;p>实际上，上篇文章通过&lt;code>join()&lt;/code>方法演示了一种安全访问共享资源的方法。&lt;/p>
&lt;/blockquote>
&lt;p>考虑一种情况，如果&lt;strong>多个线程访问同一资源&lt;/strong>，并对资源内容进行修改，会发生什么情况？&lt;/p>
&lt;p>对于&lt;strong>非原子性&lt;/strong>操作，多线程下会出现&lt;strong>竞争条件&lt;/strong>。例如，对于操作&lt;code>accounts[to] += amount&lt;/code>，可以被拆分为多个CPU指令：&lt;/p>
&lt;ol>
&lt;li>加载accounts[to]到寄存器&lt;/li>
&lt;li>增加amount&lt;/li>
&lt;li>将结果写回acounts[to]&lt;/li>
&lt;/ol>
&lt;p>上述3个步骤中，线程执行到&lt;strong>任一步骤&lt;/strong>时都可能被剥夺运行权。&lt;/p></description></item><item><title>Queue</title><link>https://wangy325.github.io/zh/docs/java/collections/2_Queue/</link><pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/2_Queue/</guid><description>&lt;h1 id="queue队列">
 Queue队列
 &lt;a class="anchor" href="#queue%e9%98%9f%e5%88%97">#&lt;/a>
&lt;/h1>
&lt;p>Queue（队列），实际开发过程中，在单线程环境下使用的情况下不多，Queue作为集合框架中重要组成似乎习惯性被忽略，队列总是先持有元素，再处理元素&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>
 &lt;img src="https://wangy325.github.io/img/Queue.png" alt="J7NBrQ.png" />&lt;/p>
&lt;p style="text-align:center;font-size:.9rem;font-style:italic">Queue继承关系简图&lt;/p></description></item><item><title>static关键字</title><link>https://wangy325.github.io/zh/docs/java/basic/2_static%E5%85%B3%E9%94%AE%E5%AD%97/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/2_static%E5%85%B3%E9%94%AE%E5%AD%97/</guid><description>&lt;h1 id="static关键字">
 static关键字
 &lt;a class="anchor" href="#static%e5%85%b3%e9%94%ae%e5%ad%97">#&lt;/a>
&lt;/h1>
&lt;p>static关键字意为“静态的”，其语义可以理解为“类的对象”(不要理解为Class对象)，即不需要对象实例，可以直接通过&lt;code>类名.字段名&lt;/code>的形式直接访问。&lt;/p></description></item><item><title>在SpringBoot项目中使用MockMvc进行接口测试</title><link>https://wangy325.github.io/zh/docs/utility/spring/%E5%9C%A8SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MockMvc%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/utility/spring/%E5%9C%A8SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MockMvc%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>现在流行在项目中使用
 &lt;a href="https://swagger.io">swagger&lt;/a>对接口进行测试，这确实很方便、直观。&lt;/p>
&lt;p>但是MockMvc作为spring-test包中指定的测试框架，在没有使用swagger的项目中，使用其进行测试是很好的选择。&lt;/p></description></item><item><title>获取任务的返回值</title><link>https://wangy325.github.io/zh/docs/java/concurrency/3%E8%8E%B7%E5%8F%96%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/3%E8%8E%B7%E5%8F%96%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</guid><description>&lt;h1 id="获取任务的返回值">
 获取任务的返回值
 &lt;a class="anchor" href="#%e8%8e%b7%e5%8f%96%e4%bb%bb%e5%8a%a1%e7%9a%84%e8%bf%94%e5%9b%9e%e5%80%bc">#&lt;/a>
&lt;/h1>
&lt;p>要创建一个任务，通常实现&lt;code>Runnable&lt;/code>接口。不幸的是，&lt;code>Runnable&lt;/code>接口的&lt;code>run()&lt;/code>方法返回&lt;code>void&lt;/code>，因此，其并不适合处理计算任务。&lt;/p>
&lt;p>考虑一个经典的问题：用多线程分段计算0-100的加和，我们需要把每个线程计算的值汇总，然后再求和，那么应该怎样获取每个任务返回值呢？&lt;/p>
&lt;p>Java提供了&lt;code>Callable&lt;/code>和&lt;code>Future&lt;/code>接口，使任务有提供返回值的能力。&lt;/p></description></item><item><title>Set</title><link>https://wangy325.github.io/zh/docs/java/collections/3_Set/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/3_Set/</guid><description>&lt;h1 id="set集">
 Set集
 &lt;a class="anchor" href="#set%e9%9b%86">#&lt;/a>
&lt;/h1>
&lt;p>Set是&lt;strong>不含重复元素的集&lt;/strong>，严格来讲，Set不允许当&lt;code>e1.equals(e2)&lt;/code>为真时， &lt;em>e1&lt;/em> 和 &lt;em>e2&lt;/em> 同时出现在集合中。Set最多允许一个&lt;code>null&lt;/code>元素。&lt;/p>
&lt;p>将&lt;strong>可变对象&lt;/strong>置入Set时需要特别小心，当对象的改动影响到了元素之间的&lt;code>equals()&lt;/code>比较的结果，那么Set的行为就变得不确定了。因此，&lt;strong>不能将Set本身作为Set的元素&lt;/strong>。&lt;/p></description></item><item><title>传值还是传引用</title><link>https://wangy325.github.io/zh/docs/java/basic/3_%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/3_%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/</guid><description>&lt;h1 id="传值还是传引用">
 传值还是传引用
 &lt;a class="anchor" href="#%e4%bc%a0%e5%80%bc%e8%bf%98%e6%98%af%e4%bc%a0%e5%bc%95%e7%94%a8">#&lt;/a>
&lt;/h1>
&lt;p>Java语言设计总是&lt;strong>按值调用&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>按值调用：方法接收的是调用者提供的值&lt;/p>
&lt;p>按引用调用：方法接收的是调用者提供的变量地址&lt;/p>
&lt;/blockquote>
&lt;p>一个方法可以修改传递引用所对应的变量值，但是不能修改传递值所对应的变量值。&lt;/p></description></item><item><title>spring声明式事务的使用</title><link>https://wangy325.github.io/zh/docs/utility/spring/spring-transaction-propagation/</link><pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/utility/spring/spring-transaction-propagation/</guid><description>&lt;h2 id="1-从transactional注解开始">
 1 从&lt;code>@Transactional&lt;/code>注解开始
 &lt;a class="anchor" href="#1-%e4%bb%8etransactional%e6%b3%a8%e8%a7%a3%e5%bc%80%e5%a7%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>@Transactional&lt;/code>注解是使用spring-transaction的最便捷方式。也是使用Spring框架开发最先接触的内容。&lt;/p>
&lt;p>当你在一个服务的方法上使用&lt;code>@Transactional&lt;/code>注解时，意味着你希望为此方法开启事务支持。如果你的项目成功配置了&lt;strong>数据源&lt;/strong>和&lt;strong>事务管理器&lt;/strong>，Spring会为此方法使用如下默认设置开启事务：&lt;/p></description></item><item><title>死锁</title><link>https://wangy325.github.io/zh/docs/java/concurrency/4%E6%AD%BB%E9%94%81/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/4%E6%AD%BB%E9%94%81/</guid><description>&lt;p>Java有能力使任务为等待某些条件成立而进入阻塞状态，所以就有可能出现这样一种情况：某个任务在等待另一个任务，而后者又在等待其他的任务，这样一直等待下去，直到等待链上的最后一个任务又在等待第一个任务释放锁，这样就出现了任务之间相互等待的连续循环现象，这种情况出现之后，没有哪个任务能够执行，于是 &lt;strong>死锁&lt;/strong> 出现。&lt;/p>
&lt;p>死锁之所以难以规避，其重要的原因就在于其不确定性，可能程序运行良好，但是有潜在的死锁风险，这个风险在&lt;strong>某些域的初始条件&lt;/strong>变化时，变得特别大，导致程序很快死锁。同时，死锁难以复现，当程序出现死锁时，往往只能通过jvm的堆栈日志来探究原因。&lt;/p></description></item><item><title>Java集合框架之Map</title><link>https://wangy325.github.io/zh/docs/java/collections/4_Map/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/4_Map/</guid><description>&lt;h1 id="map映射">
 Map映射
 &lt;a class="anchor" href="#map%e6%98%a0%e5%b0%84">#&lt;/a>
&lt;/h1>
&lt;p>Map即映射，即键-值对，键不允许重复，并且一个键最多映射一个值。Map不在Java集合框架的范畴，但是其由集合框架的内容实现。自然也在集合框架的讨论之内。&lt;/p>
&lt;p>映射提供3种&lt;strong>集合视图&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>键集 （Set实现）&lt;/li>
&lt;li>值集 （Collection实现）&lt;/li>
&lt;li>Map.Entry集（Set实现）&lt;/li>
&lt;/ul></description></item><item><title>final关键字</title><link>https://wangy325.github.io/zh/docs/java/basic/4_final%E5%85%B3%E9%94%AE%E5%AD%97/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/4_final%E5%85%B3%E9%94%AE%E5%AD%97/</guid><description>&lt;h1 id="final关键字">
 final关键字
 &lt;a class="anchor" href="#final%e5%85%b3%e9%94%ae%e5%ad%97">#&lt;/a>
&lt;/h1>
&lt;p>不同的使用环境下，&lt;code>final&lt;/code>关键字的含义有细微差别，但通常它指“这是无法改变的”。&lt;/p></description></item><item><title>终结任务</title><link>https://wangy325.github.io/zh/docs/java/concurrency/5%E7%BB%88%E7%BB%93%E4%BB%BB%E5%8A%A1/</link><pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/5%E7%BB%88%E7%BB%93%E4%BB%BB%E5%8A%A1/</guid><description>&lt;h1 id="终结任务">
 终结任务
 &lt;a class="anchor" href="#%e7%bb%88%e7%bb%93%e4%bb%bb%e5%8a%a1">#&lt;/a>
&lt;/h1>
&lt;p>一般地，如果程序运行良好，任务执行完所需操作后自然结束，任务终结。&lt;/p>
&lt;p>如果任务执行时出现异常，任务也会终结。&lt;/p>
&lt;p>在设计多个线程协同工作的任务时，需要判断&lt;strong>任务终结的条件&lt;/strong>，以便合适地终结任务，这点尤为重要。&lt;/p>
&lt;p>在本节中主要讨论在多线程协同工作的情况下，如何合适的终结任务。&lt;/p></description></item><item><title>Collections工具类</title><link>https://wangy325.github.io/zh/docs/java/collections/5_Collections/</link><pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/5_Collections/</guid><description>&lt;h1 id="collections工具类">
 Collections工具类
 &lt;a class="anchor" href="#collections%e5%b7%a5%e5%85%b7%e7%b1%bb">#&lt;/a>
&lt;/h1>
&lt;p>集合框架中一个重要的类，其实是Collection接口的&lt;strong>伴随类&lt;/strong>，其中定义了许多实用方法，用来获取&lt;strong>集合视图&lt;/strong>，或提供一些方便的操作集合元素的&lt;strong>算法&lt;/strong>。&lt;/p>
&lt;p>由于视图是直接封装的Collection接口，&lt;strong>因此其方法有些局限&lt;/strong>，并且由于特殊的设计，部分操作是不允许的（会抛出 &lt;em>UnsupportedOperationExceptin&lt;/em> ）。&lt;/p></description></item><item><title>Object超类</title><link>https://wangy325.github.io/zh/docs/java/basic/5_Object%E8%B6%85%E7%B1%BB/</link><pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/5_Object%E8%B6%85%E7%B1%BB/</guid><description>&lt;h1 id="object超类">
 Object超类
 &lt;a class="anchor" href="#object%e8%b6%85%e7%b1%bb">#&lt;/a>
&lt;/h1>
&lt;p>在Java中，如果一个类没有明确地指出超类，那么Object就是这个类的超类。实际上，Object类是所有类超类，这个类定义了一些重要的方法。&lt;/p></description></item><item><title>动态绑定与静态绑定</title><link>https://wangy325.github.io/zh/docs/java/basic/5_%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/5_%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%B8%8E%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/</guid><description>&lt;h1 id="动态绑定与静态绑定">
 动态绑定与静态绑定
 &lt;a class="anchor" href="#%e5%8a%a8%e6%80%81%e7%bb%91%e5%ae%9a%e4%b8%8e%e9%9d%99%e6%80%81%e7%bb%91%e5%ae%9a">#&lt;/a>
&lt;/h1>
&lt;p>这是Java方法调用的2个术语，用来描述Java虚拟机方法调用的2种机制。&lt;/p></description></item><item><title>生产者-消费者与阻塞队列</title><link>https://wangy325.github.io/zh/docs/java/concurrency/6%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/6%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</guid><description>&lt;h1 id="生产者-消费者与阻塞队列">
 生产者-消费者与阻塞队列
 &lt;a class="anchor" href="#%e7%94%9f%e4%ba%a7%e8%80%85-%e6%b6%88%e8%b4%b9%e8%80%85%e4%b8%8e%e9%98%bb%e5%a1%9e%e9%98%9f%e5%88%97">#&lt;/a>
&lt;/h1>
&lt;p>在讨论线程协作的时候，已经讨论了生产者与消费者雏形，比如录音是生产者，而播放则是消费者；同样的，在汽车打蜡的模型中，打蜡可看作生产者，抛光可看作消费者；只是它们的关系是简单的生产-消费关系。&lt;/p>
&lt;p>除了简单的线程协同之外，Java提供了&lt;strong>同步队列&lt;/strong>来解决线程的协同问题，本节重点讨论这部分的内容。&lt;/p></description></item><item><title>HashMap的源码分析</title><link>https://wangy325.github.io/zh/docs/java/collections/6_HashMap%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link><pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/collections/6_HashMap%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid><description>&lt;h1 id="hashmap的源码分析">
 HashMap的源码分析
 &lt;a class="anchor" href="#hashmap%e7%9a%84%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90">#&lt;/a>
&lt;/h1>
&lt;p>HashMap基于散列表，散列表中每一个Node节点（桶）是链表，当两个条目（entry）的key的hash值对桶数（capacity）取模的值相等时，这两个entry会存储在同一个链表中。但当链表中元素达到一定数目时，链表结构会转变为&lt;strong>树结构&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>此文中没有讨论HashMap中涉及到树结构的源码。&lt;/p>
&lt;/blockquote></description></item><item><title>抽象类与接口</title><link>https://wangy325.github.io/zh/docs/java/basic/6_%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/6_%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</guid><description>&lt;h1 id="抽象类与接口">
 抽象类与接口
 &lt;a class="anchor" href="#%e6%8a%bd%e8%b1%a1%e7%b1%bb%e4%b8%8e%e6%8e%a5%e5%8f%a3">#&lt;/a>
&lt;/h1>
&lt;p>抽象类是由&lt;code>abstract&lt;/code>关键字修饰的类。将一个普通类用&lt;code>abstract&lt;/code>修饰，它就是抽象类。&lt;/p>
&lt;p>若使用&lt;code>abstract&lt;/code>修饰方法，那么称该方法为&lt;strong>抽象方法&lt;/strong>，抽象方法没有方法体。&lt;/p></description></item><item><title>执行器与线程池</title><link>https://wangy325.github.io/zh/docs/java/concurrency/7%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/7%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid><description>&lt;h1 id="执行器和线程池">
 执行器和线程池
 &lt;a class="anchor" href="#%e6%89%a7%e8%a1%8c%e5%99%a8%e5%92%8c%e7%ba%bf%e7%a8%8b%e6%b1%a0">#&lt;/a>
&lt;/h1>
&lt;p>Java并发系列的文章到目前为止，虽然没有特别说明，但是使用执行器(Executor(s))的次数已经难以计数了，&lt;code>Executors&lt;/code>提供了一些非常方便的静态方法，可以根据需要创建不同的&lt;code>ExecutorService&lt;/code>，然后调用其&lt;code>execute(Runnable)&lt;/code>或&lt;code>submit(Callable&amp;lt;T&amp;gt;)&lt;/code>方法。在多线程的条件下，执行器还有一个非常明显的优势，它使用线程池管理线程，减少了系统创建和销毁线程的开销。在一般的Java并发过程中，也建议使用执行器完成任务而非显式地创建线程。&lt;/p>
&lt;p>本文将从执行器开始，阐述Java中的线程池。&lt;/p></description></item><item><title>lambda表达式</title><link>https://wangy325.github.io/zh/docs/java/basic/7_lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/7_lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid><description>&lt;h1 id="lambda表达式">
 Lambda表达式
 &lt;a class="anchor" href="#lambda%e8%a1%a8%e8%be%be%e5%bc%8f">#&lt;/a>
&lt;/h1>
&lt;h2 id="lambda表达式-1">
 lambda表达式
 &lt;a class="anchor" href="#lambda%e8%a1%a8%e8%be%be%e5%bc%8f-1">#&lt;/a>
&lt;/h2>
&lt;p>lambda表达式是一个&lt;strong>可传递的代码块&lt;/strong>，可以在以后执行&lt;strong>一次或多次&lt;/strong>。&lt;/p></description></item><item><title>计划执行任务</title><link>https://wangy325.github.io/zh/docs/java/concurrency/8%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/8%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</guid><description>&lt;h1 id="计划执行任务">
 计划执行任务
 &lt;a class="anchor" href="#%e8%ae%a1%e5%88%92%e6%89%a7%e8%a1%8c%e4%bb%bb%e5%8a%a1">#&lt;/a>
&lt;/h1>
&lt;p>除了ThreadPoolExecutor之外，Java执行器（Executor）框架还提供了可以在指定延迟之后执行一次或周期执行任务的接口&lt;code>ScheduledExecutorService&lt;/code>，较
 &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Timer.html">java.util.Timer&lt;/a>而言，它是更好的选择&lt;/p>
&lt;p>与
 &lt;a href="../7%e6%89%a7%e8%a1%8c%e5%99%a8%e4%b8%8e%e7%ba%bf%e7%a8%8b%e6%b1%a0/#3-%e7%ba%bf%e7%a8%8b%e6%b1%a0">线程池&lt;/a>不同的是，用于计划执行的&lt;code>ScheduledThreadPoolExecutor&lt;/code>使用&lt;code>ScheduledFutureTask&lt;/code>作为任务，使用&lt;code>DelayedWorkQueue&lt;/code>作为任务队列，以实现计划（周期）执行的目的&lt;/p>
&lt;p>
 &lt;img src="https://wangy325.github.io/img/scheduledFutureTask.png" alt="xx" />&lt;/p>
&lt;p style="text-align:center; font-size:.9rem; font-style:italic">ScheduledThreadPoolExecutor继承关系图&lt;/p>
&lt;p>从&lt;code>ScheduledThreadPoolExecutor&lt;/code>的继承关系图可以看到，其是&lt;code>ThreadPoolExecutor&lt;/code>的导出类，其提交任务和执行任务以及关闭线程池的逻辑应和线程池相差无几，其重点差别在于&lt;strong>任务对象以及任务队列&lt;/strong>的封装上，后文将会详述&lt;code>ScheduledThreadPoolExecutor&lt;/code>的任务计划执行以及周期执行机制&lt;/p></description></item><item><title>内部类</title><link>https://wangy325.github.io/zh/docs/java/basic/8_%E5%86%85%E9%83%A8%E7%B1%BB/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/8_%E5%86%85%E9%83%A8%E7%B1%BB/</guid><description>&lt;h1 id="内部类">
 内部类
 &lt;a class="anchor" href="#%e5%86%85%e9%83%a8%e7%b1%bb">#&lt;/a>
&lt;/h1>
&lt;p>将一个类定义在另一个类的内部，这就是内部类。&lt;/p>
&lt;blockquote>
&lt;p>定义言简意赅 ，内涵丰富多彩。&lt;/p>
&lt;/blockquote></description></item><item><title>一些重要的并发组件</title><link>https://wangy325.github.io/zh/docs/java/concurrency/9%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BB%84%E4%BB%B6/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/9%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BB%84%E4%BB%B6/</guid><description>&lt;h1 id="重要的并发组件">
 重要的并发组件
 &lt;a class="anchor" href="#%e9%87%8d%e8%a6%81%e7%9a%84%e5%b9%b6%e5%8f%91%e7%bb%84%e4%bb%b6">#&lt;/a>
&lt;/h1>
&lt;p>Java 1.5以后的并发类库新加入了一些用于解决并发问题的新构件，合理地使用这些构件能够帮助我们写出更加简单且健壮的并发程序。本节内容介绍&lt;code>java.util.concurrent&lt;/code>包中一些具有代表性的构件，包括&lt;/p>
&lt;ul>
&lt;li>CountDownLatch&lt;/li>
&lt;li>CyclicBarrier&lt;/li>
&lt;li>Semaphore&lt;/li>
&lt;li>Exchanger&lt;/li>
&lt;li>DelayQueue&lt;/li>
&lt;li>PriorityBlockingQueue&lt;/li>
&lt;/ul></description></item><item><title>Java内存模型与volatile关键字(转)</title><link>https://wangy325.github.io/zh/docs/java/concurrency/10_Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8Evolatile%E5%85%B3%E9%94%AE%E5%AD%97/</link><pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/concurrency/10_Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8Evolatile%E5%85%B3%E9%94%AE%E5%AD%97/</guid><description>&lt;h1 id="java内存模型与volatile关键字">
 Java内存模型与volatile关键字
 &lt;a class="anchor" href="#java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e4%b8%8evolatile%e5%85%b3%e9%94%ae%e5%ad%97">#&lt;/a>
&lt;/h1>
&lt;p>本文转自
 &lt;a href="http://www.cnblogs.com/dolphin0520/p/3920373.html">Matrix海子&lt;/a>，是描述&lt;code>volatile&lt;/code>关键字非常好的一篇文章，从Java的内存模型开始，归本溯源的阐述了&lt;code>volatile&lt;/code>关键字在并发中的作用与局限&lt;/p>
&lt;p>此文部分内容参照了《深入理解Java虚拟机》&lt;/p></description></item><item><title>Java8日期和时间API</title><link>https://wangy325.github.io/zh/docs/java/basic/11_java-new-time-api/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/11_java-new-time-api/</guid><description>&lt;h1 id="java8日期和时间api">
 Java8日期和时间API
 &lt;a class="anchor" href="#java8%e6%97%a5%e6%9c%9f%e5%92%8c%e6%97%b6%e9%97%b4api">#&lt;/a>
&lt;/h1>
&lt;blockquote>
&lt;p>mybatis自 3.4.5 开始，已经支持使用LocaldateTime作为时间查询入参，映射类型为TimeStamp，参考地址: 
 &lt;a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="1-前言">
 1 前言
 &lt;a class="anchor" href="#1-%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h1>
&lt;p>在介绍Java SE 8中新的日期时间库前，先了解下Java 8之前的日期时间工具的诟病。&lt;/p>
&lt;p>在Java SE 8前，日期时间工具库在&lt;code>java.util&lt;/code>包中，包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>java.util.Date&lt;/code>：表示日期和时间&lt;/li>
&lt;li>&lt;code>java.util.Calendar&lt;/code>以及其实现子类：表示各种日历系统，常用的是格林威治日历&lt;code>java.util.GregorianCalendar&lt;/code>&lt;/li>
&lt;li>&lt;code>java.util.TimeZone&lt;/code>以及其实现子类：表示时区偏移量和夏令时&lt;/li>
&lt;/ul>
&lt;p>以及辅助其进行格式化和解析的工具库在java.text包中，包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>java.text.DateFormat&lt;/code>：格式化日期时间和解析日期时间的工具抽象类&lt;/li>
&lt;li>&lt;code>java.text.SimpleDateFormat&lt;/code>：DateDateFormat的实现&lt;/li>
&lt;/ul></description></item><item><title>使用Logback记录日志</title><link>https://wangy325.github.io/zh/docs/misc/translations/guide-to-logback-cn/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/misc/translations/guide-to-logback-cn/</guid><description>&lt;p>
 &lt;a href="https://logback.qos.ch/">Logback&lt;/a>是Java应用中使用最广的日志框架之一，它是
 &lt;a href="https://logback.qos.ch/reasonsToSwitch.html">其前辈框架Log4j的替代者&lt;/a>。相比Log4j，Logback在日志处理速度、配置多样性、对旧日志文件的处理灵活性上均要优于Log4j。&lt;/p>
&lt;p>这篇文章将介绍Logback的主要组成结构并指导你使用Logback构建更好的程序。&lt;/p></description></item><item><title>使用printf格式化输出</title><link>https://wangy325.github.io/zh/docs/misc/translations/how2use-printf/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/misc/translations/how2use-printf/</guid><description>&lt;p>这篇文章介绍了几种常见的使用&lt;code>printf()&lt;/code>方法进行格式化输出的方法。&lt;/p>
&lt;p>&lt;code>printf()&lt;/code>方法隶属于&lt;code>java.io.PrintStream&lt;/code>类，提供了和C语言中相似的格式化字符串输出的方法。&lt;/p></description></item><item><title>比较器的「退化」</title><link>https://wangy325.github.io/zh/posts/5_%E6%AF%94%E8%BE%83%E5%99%A8%E7%9A%84%E9%80%80%E5%8C%96/</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/posts/5_%E6%AF%94%E8%BE%83%E5%99%A8%E7%9A%84%E9%80%80%E5%8C%96/</guid><description>&lt;hr>
&lt;p>Java「语法糖」越来越牛逼了哈。&lt;/p>
&lt;p>在使用匿名内部类比较器的时候，idea提供了几个层次的比较器代码优化，给👴整懵逼了。&lt;/p></description></item><item><title>Java接口回调</title><link>https://wangy325.github.io/zh/docs/java/basic/Java%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/basic/Java%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</guid><description>&lt;h1 id="第一次接触接口回调">
 第一次接触接口回调
 &lt;a class="anchor" href="#%e7%ac%ac%e4%b8%80%e6%ac%a1%e6%8e%a5%e8%a7%a6%e6%8e%a5%e5%8f%a3%e5%9b%9e%e8%b0%83">#&lt;/a>
&lt;/h1>
&lt;p>回调模式在web开发中用的较多，本文简单介绍了Java的回调机制，理解此文可以在生产中写出适应业务的回调模型。&lt;/p></description></item><item><title>MyBatis的trim标签</title><link>https://wangy325.github.io/zh/posts/1_mybatis%E4%B8%ADtrim%E6%A0%87%E7%AD%BE%E5%8A%A8%E6%80%81%E6%8B%BC%E6%8E%A5SQL/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/posts/1_mybatis%E4%B8%ADtrim%E6%A0%87%E7%AD%BE%E5%8A%A8%E6%80%81%E6%8B%BC%E6%8E%A5SQL/</guid><description>&lt;p>trim标记是一个格式化的标记，可以完成set或者是where标记的功能&lt;/p></description></item></channel></rss>