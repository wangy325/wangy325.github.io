<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>并发 on EndlessRiver</title>
    <link>wangy325.github.io/zh/categories/%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 并发 on EndlessRiver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>wangy325@qq.com (wangy325)</managingEditor>
    <webMaster>wangy325@qq.com (wangy325)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 16 Nov 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="wangy325.github.io/zh/categories/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Java并发系列之9——倒计时门闩、信号量、交换器及其他</title>
        <link>wangy325.github.io/zh/posts/java/concurrency/9%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BB%84%E4%BB%B6/</link>
        <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Fri, 17 Jun 2022 14:24:34 +0800</atom:modified>
        <guid>wangy325.github.io/zh/posts/java/concurrency/9%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BB%84%E4%BB%B6/</guid>
        <description>&lt;p&gt;Java 1.5以后的并发类库新加入了一些用于解决并发问题的新构件，合理地使用这些构件能够帮助我们写出更加简单且健壮的并发程序。本节内容介绍&lt;code&gt;java.util.concurrent&lt;/code&gt;包中一些具有代表性的构件，包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CountDownLatch&lt;/li&gt;
&lt;li&gt;CyclicBarrier&lt;/li&gt;
&lt;li&gt;Semaphore&lt;/li&gt;
&lt;li&gt;Exchanger&lt;/li&gt;
&lt;li&gt;DelayQueue&lt;/li&gt;
&lt;li&gt;PriorityBlockingQueue&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-countdownlatch&#34;&gt;1 CountDownLatch&lt;/h1&gt;
&lt;p&gt;在讨论线程的基本概念时，我们说过&lt;code&gt;join()&lt;/code&gt;方法可使当前线程等待调用join方法的线程执行完，可以实现简单的&lt;a href=&#34;../%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%B8%80/#9-%E5%8A%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8Bjoin&#34;&gt;无锁同步&lt;/a&gt;，使用CountDownLatch可以更加简单的实现这一目的。毕竟，&lt;code&gt;join()&lt;/code&gt;方法的语义“加入一个线程”不是很容易就能让人理解。相较于&lt;code&gt;join()&lt;/code&gt;方法，CountDownLatch的语义就明确多了。&lt;/p&gt;
&lt;p&gt;在有些文档上，将CountDownLatch译为&amp;quot;倒计时门闩【shuān】&amp;quot;，其维护一个计数器，这个计数器在CountDownLatch初始化之后便&lt;strong&gt;不能重置&lt;/strong&gt;。在CountDownLatch上调用&lt;code&gt;countDown()&lt;/code&gt;方法来将计数值减1，调用这个方法并不会引起阻塞。不过，在这个计数器为0之前，任何调用CountDownLatch的&lt;code&gt;await()&lt;/code&gt;方法的任务都将阻塞。&lt;/p&gt;
&lt;p&gt;CountDownLatch的典型用法是将一个任务分割为n个可以独立解决的部分，并创建一个计数器值为n的CountDownLatch，在每个任务完成时，调用&lt;code&gt;countDown()&lt;/code&gt;方法将计数器减1，在等待所有任务完成的线程上调用&lt;code&gt;await()&lt;/code&gt;方法，将任务阻塞，知道计数器为0之后再继续运行。&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>信号量</category>
            
          
            
              <category>交换器</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Java并发系列之8——计划执行任务</title>
        <link>wangy325.github.io/zh/posts/java/concurrency/8%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</link>
        <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Fri, 17 Jun 2022 14:24:34 +0800</atom:modified>
        <guid>wangy325.github.io/zh/posts/java/concurrency/8%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</guid>
        <description>&lt;p&gt;除了ThreadPoolExecutor之外，Java执行器（Executor）框架还提供了可以在指定延迟之后执行一次或周期执行任务的接口&lt;code&gt;ScheduledExecutorService&lt;/code&gt;，较&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Timer.html&#34;&gt;java.util.Timer&lt;/a&gt;而言，它是更好的选择&lt;/p&gt;
&lt;p&gt;与&lt;a href=&#34;../%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/#3-%E7%BA%BF%E7%A8%8B%E6%B1%A0&#34;&gt;线程池&lt;/a&gt;不同的是，用于计划执行的&lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;使用&lt;code&gt;ScheduledFutureTask&lt;/code&gt;作为任务，使用&lt;code&gt;DelayedWorkQueue&lt;/code&gt;作为任务队列，以实现计划（周期）执行的目的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;wangy325.github.io/img/scheduledFutureTask.png&#34; alt=&#34;xx&#34; /&gt;&lt;/p&gt;
&lt;p style=&#34;text-align:center; font-size:.9rem; font-style:italic&#34;&gt;ScheduledThreadPoolExecutor继承关系图&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;的继承关系图可以看到，其是&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;的导出类，其提交任务和执行任务以及关闭线程池的逻辑应和线程池相差无几，其重点差别在于&lt;strong&gt;任务对象以及任务队列&lt;/strong&gt;的封装上，后文将会详述&lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;的任务计划执行以及周期执行机制&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>线程池</category>
            
          
            
              <category>执行器</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Java并发系列之7——执行器与线程池</title>
        <link>wangy325.github.io/zh/posts/java/concurrency/7%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
        <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Fri, 17 Jun 2022 14:24:34 +0800</atom:modified>
        <guid>wangy325.github.io/zh/posts/java/concurrency/7%E6%89%A7%E8%A1%8C%E5%99%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
        <description>&lt;p&gt;Java并发系列的文章到目前为止，虽然没有特别说明，但是使用执行器(Executor(s))的次数已经难以计数了，&lt;code&gt;Executors&lt;/code&gt;提供了一些非常方便的静态方法，可以根据需要创建不同的&lt;code&gt;ExecutorService&lt;/code&gt;，然后调用其&lt;code&gt;execute(Runnable)&lt;/code&gt;或&lt;code&gt;submit(Callable&amp;lt;T&amp;gt;)&lt;/code&gt;方法。在多线程的条件下，执行器还有一个非常明显的优势，它使用线程池管理线程，避免了系统创建和销毁线程的开销。在一般的Java并发过程中，也建议使用执行器完成任务而非显式地创建线程。&lt;/p&gt;
&lt;p&gt;本文将从执行器开始，阐述Java中的线程池。&lt;/p&gt;
&lt;h1 id=&#34;1-executors&#34;&gt;1 Executors&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;java.util.concurrent.Executors&lt;/code&gt;类提供了许多静态方法来获取不同类型的 &lt;strong&gt;线程池&lt;/strong&gt;，下表列出其常用方法&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;newFixedThreadPool&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;创建固定大小的线程池，线程会一直保留&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;newCachedThreadPool&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;创建线程池，该线程池在必要时创建新线程，旧线程也会被重用，线程空闲60s被销毁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;newSingleThreadExecutor&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;相当于newFixedThreadPool(1)，其能保证任务顺序执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;newScheduledThreadPool&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用于预定执行一次或周期执行的线程池&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;newSingleThreadScheduledExecutor&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用于预定执行一次或周期执行的单线程池&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p style=&#34;text-align:center; font-size:.9rem; font-style:italic&#34;&gt;Executors用于构造线程池的部分方法&lt;/p&gt;
&lt;p&gt;上表中的前3个方法返回&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;实例，后面2个方法返回&lt;code&gt;ScheduledExecutorService&lt;/code&gt;接口的实例，不管是ThreadPoolExecutor或是ScheduledExecutorService，都是&lt;code&gt;ExecutorService&lt;/code&gt;的实现，&lt;code&gt;ExecutorService&lt;/code&gt;接口是设计用来处理任务的接口，其顶层接口是&lt;code&gt;java.util.concurrent.Executor&lt;/code&gt;，该接口简单地定义了一个执行任务的方法：&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>执行器</category>
            
          
            
              <category>线程池</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
      </item>
      
      <item>
        <title>Java内存模型与volatile关键字(转)</title>
        <link>wangy325.github.io/zh/posts/java/concurrency/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8Evolatile%E5%85%B3%E9%94%AE%E5%AD%97/</link>
        <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Thu, 08 Apr 2021 22:37:47 +0800</atom:modified>
        <guid>wangy325.github.io/zh/posts/java/concurrency/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8Evolatile%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
        <description>&lt;p&gt;本文转自&lt;a href=&#34;http://www.cnblogs.com/dolphin0520/p/3920373.html&#34;&gt;Matrix海子&lt;/a&gt;，是描述&lt;code&gt;volatile&lt;/code&gt;关键字非常好的一篇文章，从Java的内存模型开始，归本溯源的阐述了&lt;code&gt;volatile&lt;/code&gt;关键字在并发中的作用与局限&lt;/p&gt;
&lt;p&gt;此文部分内容参照了《深入理解Java虚拟机》&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>volatile</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Java并发系列之6——生产者-消费者与阻塞队列</title>
        <link>wangy325.github.io/zh/posts/java/concurrency/6%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</link>
        <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Sun, 19 Jun 2022 02:33:01 +0800</atom:modified>
        <guid>wangy325.github.io/zh/posts/java/concurrency/6%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</guid>
        <description>&lt;p&gt;在讨论线程协作的时候，已经讨论了生产者与消费者雏形，比如录音是生产者，而播放则是消费者；同样的，在汽车打蜡的模型中，打蜡可看作生产者，抛光可看作消费者；只是它们的关系是简单的生产-消费关系。&lt;/p&gt;
&lt;p&gt;除了简单的线程协同之外，Java提供了&lt;strong&gt;同步队列&lt;/strong&gt;来解决线程的协同问题，本节重点讨论这部分的内容。&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>阻塞队列</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Java并发系列之5——终结任务</title>
        <link>wangy325.github.io/zh/posts/java/concurrency/5%E7%BB%88%E7%BB%93%E4%BB%BB%E5%8A%A1/</link>
        <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Fri, 17 Jun 2022 14:24:34 +0800</atom:modified>
        <guid>wangy325.github.io/zh/posts/java/concurrency/5%E7%BB%88%E7%BB%93%E4%BB%BB%E5%8A%A1/</guid>
        <description>&lt;p&gt;一般地，如果程序运行良好，任务执行完所需操作后自然结束，任务终结。&lt;/p&gt;
&lt;p&gt;如果任务执行时出现异常，任务也会终结。&lt;/p&gt;
&lt;p&gt;在设计多个线程协同工作的任务时，需要判断&lt;strong&gt;任务终结的条件&lt;/strong&gt;，以便合适地终结任务，这点尤为重要。&lt;/p&gt;
&lt;p&gt;在本节中主要讨论在多线程协同工作的情况下，如何合适的终结任务。&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>中断任务</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Java并发系列之4——死锁</title>
        <link>wangy325.github.io/zh/posts/java/concurrency/4%E6%AD%BB%E9%94%81/</link>
        <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Fri, 17 Jun 2022 14:24:34 +0800</atom:modified>
        <guid>wangy325.github.io/zh/posts/java/concurrency/4%E6%AD%BB%E9%94%81/</guid>
        <description>&lt;p&gt;Java有能力使任务为等待某些条件成立而进入阻塞状态，所以就有可能出现这样一种情况：某个任务在等待另一个任务，而后者又在等待其他的任务，这样一直等待下去，直到等待链上的最后一个任务又在等待第一个任务释放锁，这样就出现了任务之间相互等待的连续循环现象，这种情况出现之后，没有哪个任务能够执行，于是 &lt;strong&gt;死锁&lt;/strong&gt; 出现&lt;/p&gt;
&lt;p&gt;死锁之所以难以规避，其重要的原因就在于其不确定性，可能程序运行良好，但是有潜在的死锁风险，这个风险在某些域的初始条件变化时，变得特别大，导致程序很快死锁。同时，死锁的出现也很难复现，它就像埋在程序里的地雷&lt;/p&gt;
&lt;p&gt;我们不妨回顾在&lt;a href=&#34;../java%E5%B9%B6%E5%8F%91%E7%B3%BB%E5%88%97%E4%B9%8B2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90/#21-span-idcondition%E6%9D%A1%E4%BB%B6span&#34;&gt;转账问题&lt;/a&gt;中使用的等待条件——如账户余额不足时使任务等待，在余额足够的时候再进行转账。这个程序没有问题，因为有100个账户每个账户初始金额1000元，而转账金额&lt;strong&gt;不大于&lt;/strong&gt;初始金额，所以任一时刻都会有账户的金额满足转账条件。但是如果去除转账金额不大于1000的限制，死锁就会发生，这很容易理解&lt;/p&gt;
&lt;p&gt;比如有2个账户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;账户1 余额200元
账户2 余额300元
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;账户1向账户2转账300元，余额不足，等待；账户2向账户1转账400，余额不足等待；程序就进入死锁&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>死锁</category>
            
          
            
              <category>线程本地存储</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Java并发系列之3——获取任务的返回值</title>
        <link>wangy325.github.io/zh/posts/java/concurrency/3%E8%8E%B7%E5%8F%96%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</link>
        <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Sun, 19 Jun 2022 02:33:01 +0800</atom:modified>
        <guid>wangy325.github.io/zh/posts/java/concurrency/3%E8%8E%B7%E5%8F%96%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</guid>
        <description>&lt;p&gt;要创建一个任务，通常实现&lt;code&gt;Runnable&lt;/code&gt;接口。不幸的是，&lt;code&gt;Runnable&lt;/code&gt;接口的&lt;code&gt;run()&lt;/code&gt;方法返回&lt;code&gt;void&lt;/code&gt;，因此，其并不适合处理计算任务。&lt;/p&gt;
&lt;p&gt;考虑一个经典的问题：用多线程分段计算0-100的加和，我们需要把每个线程计算的值汇总，然后再求和，那么应该怎样获取每个任务返回值呢？&lt;/p&gt;
&lt;p&gt;Java提供了&lt;code&gt;Callable&lt;/code&gt;和&lt;code&gt;Future&lt;/code&gt;接口，使任务有提供返回值的能力。&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>Future</category>
            
          
            
              <category>Callable</category>
            
          
            
              <category>FutureTask</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Java并发系列之2——资源访问受限</title>
        <link>wangy325.github.io/zh/posts/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90/</link>
        <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Fri, 17 Jun 2022 14:24:34 +0800</atom:modified>
        <guid>wangy325.github.io/zh/posts/java/concurrency/2%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90/</guid>
        <description>&lt;p&gt;在&lt;a href=&#34;../1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1&#34;&gt;上一篇文章&lt;/a&gt;中，虽然创建了多线程，并且线程之间出现了一些&lt;strong&gt;不可预测&lt;/strong&gt;的CPU调度，但是由于线程之间是&lt;strong&gt;相互隔离&lt;/strong&gt;的——&lt;strong&gt;线程没有访问共同的资源&lt;/strong&gt;，尽管在执行任务的过程可能被CPU剥夺运行权，但是当它们再次获得运行权时对运行结果并没有影响，它们是安全的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上，上篇文章通过&lt;code&gt;join()&lt;/code&gt;方法演示了一种安全访问共享资源的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;考虑一种情况，如果&lt;strong&gt;多个线程访问同一资源&lt;/strong&gt;，并对资源内容进行修改，会发生什么情况？&lt;/p&gt;
&lt;p&gt;对于&lt;strong&gt;非原子性&lt;/strong&gt;操作，多线程下会出现&lt;strong&gt;竞争条件&lt;/strong&gt;。例如，对于操作&lt;code&gt;accounts[to] += amount&lt;/code&gt;，可以被拆分为多个CPU指令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加载accounts[to]到寄存器&lt;/li&gt;
&lt;li&gt;增加amount&lt;/li&gt;
&lt;li&gt;将结果写回acounts[to]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述3个步骤中，线程执行到&lt;strong&gt;任一步骤&lt;/strong&gt;时都可能被剥夺运行权。&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>锁</category>
            
          
            
              <category>synchronized</category>
            
          
            
              <category>volatile</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Java并发系列之1——线程与任务</title>
        <link>wangy325.github.io/zh/posts/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1/</link>
        <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Fri, 17 Jun 2022 14:24:34 +0800</atom:modified>
        <guid>wangy325.github.io/zh/posts/java/concurrency/1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1/</guid>
        <description>&lt;p&gt;并发的本质是多个线程同时处理任务&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，不同于进程，线程之间的资源是共享的，当程序不够严谨时，使用多线程就可能带来问题，这是要反复讨论并发的原因之一。&lt;/p&gt;
&lt;p&gt;在Java中，必须明白一点：线程由Thread类启动，但Thread类并不执行任何操作，&lt;strong&gt;它只是驱动赋予它的任务&lt;/strong&gt;。因此将&lt;strong&gt;线程与任务&lt;/strong&gt;的概念区分开，有利于理解并发。&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>线程</category>
            
          
        
        
          
            
              <category>并发</category>
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>