<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on Endless River</title><link>https://wangy325.github.io/zh/docs/java/spring/</link><description>Recent content in Spring on Endless River</description><generator>Hugo</generator><language>zh</language><atom:link href="https://wangy325.github.io/zh/docs/java/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>SpringBoot使用AOP的简单示例</title><link>https://wangy325.github.io/zh/docs/java/spring/SpringBoot-aop-demo/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/spring/SpringBoot-aop-demo/</guid><description>&lt;p>有一个cd接口，其实体类用于播放歌曲，同时我们想在播放歌曲的时候记录每个曲目的播放次数。看起来，记录次数这个事和播放曲目是不相干的事情，当然，我们可以在每首歌曲播放完成之后记录，但是更好的办法是使用一个切面，切入到播放方法中，来完成这件事，这样可以减少无关逻辑对代码的侵入。&lt;/p></description></item><item><title>在SpringBoot项目中使用MockMvc进行接口测试</title><link>https://wangy325.github.io/zh/docs/java/spring/%E5%9C%A8SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MockMvc%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/spring/%E5%9C%A8SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MockMvc%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>现在流行在项目中使用
 &lt;a href="https://swagger.io">swagger&lt;/a>对接口进行测试，这确实很方便、直观。&lt;/p>
&lt;p>但是MockMvc作为spring-test包中指定的测试框架，在没有使用swagger的项目中，使用其进行测试是很好的选择。&lt;/p></description></item><item><title>spring声明式事务的使用</title><link>https://wangy325.github.io/zh/docs/java/spring/spring-transaction-propagation/</link><pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/java/spring/spring-transaction-propagation/</guid><description>&lt;h2 id="1-从transactional注解开始">
 1 从&lt;code>@Transactional&lt;/code>注解开始
 &lt;a class="anchor" href="#1-%e4%bb%8etransactional%e6%b3%a8%e8%a7%a3%e5%bc%80%e5%a7%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>@Transactional&lt;/code>注解是使用spring-transaction的最便捷方式。也是使用Spring框架开发最先接触的内容。&lt;/p>
&lt;p>当你在一个服务的方法上使用&lt;code>@Transactional&lt;/code>注解时，意味着你希望为此方法开启事务支持。如果你的项目成功配置了&lt;strong>数据源&lt;/strong>和&lt;strong>事务管理器&lt;/strong>，Spring会为此方法使用如下默认设置开启事务：&lt;/p></description></item></channel></rss>