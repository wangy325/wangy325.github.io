<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>行为型 on Endless River</title><link>https://wangy325.github.io/zh/docs/craft/design_pattern/behaviour/</link><description>Recent content in 行为型 on Endless River</description><generator>Hugo</generator><language>zh</language><atom:link href="https://wangy325.github.io/zh/docs/craft/design_pattern/behaviour/index.xml" rel="self" type="application/rss+xml"/><item><title>命令模式</title><link>https://wangy325.github.io/zh/docs/craft/design_pattern/behaviour/1_command/</link><pubDate>Fri, 29 Mar 2024 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/craft/design_pattern/behaviour/1_command/</guid><description>&lt;h2 id="命令模式">
 命令模式
 &lt;a class="anchor" href="#%e5%91%bd%e4%bb%a4%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;p>命令模式将&amp;quot;请求&amp;quot;封装成（命令）对象，&lt;em>以便使用不同的请求、队列或者日志来参数化其他对象&lt;/em>。
命令模式也支持&lt;strong>撤销&lt;/strong>的操作。&lt;/p>
&lt;blockquote>
&lt;p>命令模式是一种行为设计模式，它可将请求转换为一个包含与请求相关的所有信息的独立对象。
该转换让你能根据不同的请求将方法参数化、延迟请求执行或将其放入队列中，且能实现可撤销操作。&lt;/p>
&lt;/blockquote></description></item><item><title>观察者模式</title><link>https://wangy325.github.io/zh/docs/craft/design_pattern/behaviour/2_observer/</link><pubDate>Fri, 08 Mar 2024 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/craft/design_pattern/behaviour/2_observer/</guid><description>&lt;h2 id="观察者模式">
 观察者模式
 &lt;a class="anchor" href="#%e8%a7%82%e5%af%9f%e8%80%85%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>by Head First 设计模式
&lt;blockquote>
&lt;p>在对象之间建立一对多的依赖，这样一来，当一个对象的状态改变，依赖它的对象都会收到通知，并且自动更新。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>by Dive into Design Patterns:
&lt;blockquote>
&lt;p>&lt;em>Also Known as: Event-Subscriber, Listener&lt;/em>&lt;/p>
&lt;p>Observer is a behavioral design pattern that lets you define a &lt;em>subscription mechanism&lt;/em>
to notify multiple objects about any events that happen to the object they’re observing.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>策略模式</title><link>https://wangy325.github.io/zh/docs/craft/design_pattern/behaviour/3_strategy/</link><pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/craft/design_pattern/behaviour/3_strategy/</guid><description>&lt;h2 id="策略模式">
 策略模式
 &lt;a class="anchor" href="#%e7%ad%96%e7%95%a5%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>by Head First 设计模式:&lt;/p>
&lt;blockquote>
&lt;p>策略模式定义了算法族，分别封装起来，让他们之间可以互相替换。此模式让算法的&lt;strong>变化&lt;/strong>独立于使用算法的&amp;quot;客户&amp;quot;。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>by Dive into Design Patterns:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Strategy&lt;/strong> is a behavioral design pattern that lets you define a family of algorithms,
put each of them into a separate class, and make their objects interchangeable.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>模板方法模式</title><link>https://wangy325.github.io/zh/docs/craft/design_pattern/behaviour/4_template_method/</link><pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate><guid>https://wangy325.github.io/zh/docs/craft/design_pattern/behaviour/4_template_method/</guid><description>&lt;h2 id="模板方法模式">
 模板方法模式
 &lt;a class="anchor" href="#%e6%a8%a1%e6%9d%bf%e6%96%b9%e6%b3%95%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;p>模板方法模式在一个方法中定义一个算法的骨架，而将一些步骤
延迟到子类中。模板方法可以使得子类在不改变算法结构的前提
下，重新 定义算法的某些步骤。&lt;/p></description></item></channel></rss>