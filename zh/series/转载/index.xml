<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>转载 on EndlessRiver</title>
    <link>/zh/series/%E8%BD%AC%E8%BD%BD/</link>
    <description>Recent content in 转载 on EndlessRiver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>wangy325@qq.com (wangy325)</managingEditor>
    <webMaster>wangy325@qq.com (wangy325)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 30 Nov 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/zh/series/%E8%BD%AC%E8%BD%BD/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Java内存区域详解(转)</title>
        <link>/zh/posts/java/jvm/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AF%A6%E8%A7%A3/</link>
        <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Thu, 08 Apr 2021 22:37:47 +0800</atom:modified>
        <guid>/zh/posts/java/jvm/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AF%A6%E8%A7%A3/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;如果没有特殊说明，都是针对的是 HotSpot 虚拟机。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;1-概述&#34;&gt;1 概述&lt;/h1&gt;
&lt;p&gt;对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像 C/C++程序开发程序员这样为每一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>Java虚拟机</category>
            
          
        
        
          
            
              <category>JVM</category>
            
          
        
        
          
            
              <category>转载</category>
            
          
        
      </item>
      
      <item>
        <title>JVM垃圾回收概要(转)</title>
        <link>/zh/posts/java/jvm/java-gc/</link>
        <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Thu, 08 Apr 2021 22:37:47 +0800</atom:modified>
        <guid>/zh/posts/java/jvm/java-gc/</guid>
        <description>&lt;h1 id=&#34;本节常见面试题&#34;&gt;本节常见面试题&lt;/h1&gt;
&lt;p&gt;问题答案在文中都有提到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何判断对象是否死亡（两种方法）。&lt;/li&gt;
&lt;li&gt;简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。&lt;/li&gt;
&lt;li&gt;如何判断一个常量是废弃常量&lt;/li&gt;
&lt;li&gt;如何判断一个类是无用的类&lt;/li&gt;
&lt;li&gt;垃圾收集有哪些算法，各自的特点？&lt;/li&gt;
&lt;li&gt;HotSpot 为什么要分为新生代和老年代？&lt;/li&gt;
&lt;li&gt;常见的垃圾回收器有哪些？&lt;/li&gt;
&lt;li&gt;介绍一下 CMS,G1 收集器。&lt;/li&gt;
&lt;li&gt;Minor Gc 和 Full GC 有什么不同呢？&lt;/li&gt;
&lt;/ul&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>gc</category>
            
          
        
        
          
            
              <category>JVM</category>
            
          
        
        
          
            
              <category>转载</category>
            
          
        
      </item>
      
      <item>
        <title>redis必知必会(转)</title>
        <link>/zh/posts/java/redis/redis-all/</link>
        <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Thu, 08 Apr 2021 22:37:47 +0800</atom:modified>
        <guid>/zh/posts/java/redis/redis-all/</guid>
        <description>&lt;p&gt;简单来说 &lt;strong&gt;Redis 就是一个使用 C 语言开发的数据库&lt;/strong&gt;，不过与传统数据库不同的是 &lt;strong&gt;Redis 的数据是存在内存中的&lt;/strong&gt; ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>redis</category>
            
          
        
        
          
            
              <category>redis</category>
            
          
        
        
          
            
              <category>转载</category>
            
          
        
      </item>
      
      <item>
        <title>布隆过滤器(转)</title>
        <link>/zh/posts/java/redis/bloom-filter/</link>
        <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
        <author>wangy325@qq.com (wangy325)</author>
        <atom:modified>Thu, 08 Apr 2021 22:37:47 +0800</atom:modified>
        <guid>/zh/posts/java/redis/bloom-filter/</guid>
        <description>&lt;p&gt;海量数据处理以及缓存穿透这两个场景让我认识了 布隆过滤器 ，我查阅了一些资料来了解它，但是很多现成资料并不满足我的需求，所以就决定自己总结一篇关于布隆过滤器的文章。希望通过这篇文章让更多人了解布隆过滤器，并且会实际去使用它！&lt;/p&gt;
&lt;p&gt;下面我们将分为几个方面来介绍布隆过滤器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是布隆过滤器？&lt;/li&gt;
&lt;li&gt;布隆过滤器的原理介绍。&lt;/li&gt;
&lt;li&gt;布隆过滤器使用场景。&lt;/li&gt;
&lt;li&gt;通过 Java 编程手动实现布隆过滤器。&lt;/li&gt;
&lt;li&gt;利用Google开源的Guava中自带的布隆过滤器。&lt;/li&gt;
&lt;li&gt;Redis 中的布隆过滤器。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1什么是布隆过滤器&#34;&gt;1.什么是布隆过滤器？&lt;/h3&gt;
&lt;p&gt;首先，我们需要了解布隆过滤器的概念。&lt;/p&gt;
&lt;p&gt;布隆过滤器（Bloom Filter）是一个叫做 Bloom 的老哥于1970年提出的。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的的 List、Map 、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。理论情况下添加到集合中的元素越多，误报的可能性就越大。并且，存放在布隆过滤器的数据不容易删除。&lt;/p&gt;</description>
        
        <dc:creator>wangy325</dc:creator>
        
        
        
        
          
            
              <category>bloomfilter</category>
            
          
        
        
          
            
          
        
        
          
            
              <category>转载</category>
            
          
        
      </item>
      

    
  </channel>
</rss>